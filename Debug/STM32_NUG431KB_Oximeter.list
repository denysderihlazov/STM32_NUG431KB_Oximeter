
STM32_NUG431KB_Oximeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac64  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001368  0800ae48  0800ae48  0000be48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1b0  0800c1b0  0000e1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1b0  0800c1b0  0000d1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1b8  0800c1b8  0000e1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1b8  0800c1b8  0000d1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1bc  0800c1bc  0000d1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800c1c0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001dc  0800c39c  0000e1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  0800c39c  0000e514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019eca  00000000  00000000  0000e20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396e  00000000  00000000  000280d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0002ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001238  00000000  00000000  0002d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005778  00000000  00000000  0002e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee23  00000000  00000000  00033b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce1e9  00000000  00000000  00052993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120b7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007830  00000000  00000000  00120bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001283f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ae2c 	.word	0x0800ae2c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800ae2c 	.word	0x0800ae2c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_GPIO_Init>:
        * EXTI
     PA15   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800104a:	4b3a      	ldr	r3, [pc, #232]	@ (8001134 <MX_GPIO_Init+0x100>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	4a39      	ldr	r2, [pc, #228]	@ (8001134 <MX_GPIO_Init+0x100>)
 8001050:	f043 0320 	orr.w	r3, r3, #32
 8001054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001056:	4b37      	ldr	r3, [pc, #220]	@ (8001134 <MX_GPIO_Init+0x100>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	f003 0320 	and.w	r3, r3, #32
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b34      	ldr	r3, [pc, #208]	@ (8001134 <MX_GPIO_Init+0x100>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a33      	ldr	r2, [pc, #204]	@ (8001134 <MX_GPIO_Init+0x100>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b31      	ldr	r3, [pc, #196]	@ (8001134 <MX_GPIO_Init+0x100>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b2e      	ldr	r3, [pc, #184]	@ (8001134 <MX_GPIO_Init+0x100>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	4a2d      	ldr	r2, [pc, #180]	@ (8001134 <MX_GPIO_Init+0x100>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001086:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <MX_GPIO_Init+0x100>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2103      	movs	r1, #3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109a:	f001 f903 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80010a4:	4824      	ldr	r0, [pc, #144]	@ (8001138 <MX_GPIO_Init+0x104>)
 80010a6:	f001 f8fd 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin;
 80010aa:	2303      	movs	r3, #3
 80010ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c4:	f000 ff6c 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ce:	2312      	movs	r3, #18
 80010d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010da:	2304      	movs	r3, #4
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e8:	f000 ff5a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CS_Pin|LD2_Pin;
 80010ec:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80010f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <MX_GPIO_Init+0x104>)
 8001106:	f000 ff4b 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800110a:	2380      	movs	r3, #128	@ 0x80
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110e:	2312      	movs	r3, #18
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800111a:	2304      	movs	r3, #4
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <MX_GPIO_Init+0x104>)
 8001126:	f000 ff3b 	bl	8001fa0 <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	48000400 	.word	0x48000400

0800113c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001142:	4a1c      	ldr	r2, [pc, #112]	@ (80011b4 <MX_I2C2_Init+0x78>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001148:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <MX_I2C2_Init+0x7c>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001154:	2201      	movs	r2, #1
 8001156:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001176:	480e      	ldr	r0, [pc, #56]	@ (80011b0 <MX_I2C2_Init+0x74>)
 8001178:	f001 f8ac 	bl	80022d4 <HAL_I2C_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001182:	f000 fa64 	bl	800164e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001186:	2100      	movs	r1, #0
 8001188:	4809      	ldr	r0, [pc, #36]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800118a:	f001 fe2f 	bl	8002dec <HAL_I2CEx_ConfigAnalogFilter>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001194:	f000 fa5b 	bl	800164e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001198:	2100      	movs	r1, #0
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_I2C2_Init+0x74>)
 800119c:	f001 fe71 	bl	8002e82 <HAL_I2CEx_ConfigDigitalFilter>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 fa52 	bl	800164e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001f8 	.word	0x200001f8
 80011b4:	40005800 	.word	0x40005800
 80011b8:	40b285c2 	.word	0x40b285c2

080011bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b09a      	sub	sp, #104	@ 0x68
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	2244      	movs	r2, #68	@ 0x44
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 fb97 	bl	8007910 <memset>
  if(i2cHandle->Instance==I2C2)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <HAL_I2C_MspInit+0xa8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d137      	bne.n	800125c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 fc71 	bl	8003ae0 <HAL_RCCEx_PeriphCLKConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001204:	f000 fa23 	bl	800164e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <HAL_I2C_MspInit+0xac>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	4a16      	ldr	r2, [pc, #88]	@ (8001268 <HAL_I2C_MspInit+0xac>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <HAL_I2C_MspInit+0xac>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001220:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001224:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001226:	2312      	movs	r3, #18
 8001228:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001232:	2304      	movs	r3, #4
 8001234:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001240:	f000 feae 	bl	8001fa0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_I2C_MspInit+0xac>)
 8001246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_I2C_MspInit+0xac>)
 800124a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800124e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <HAL_I2C_MspInit+0xac>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800125c:	bf00      	nop
 800125e:	3768      	adds	r7, #104	@ 0x68
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40005800 	.word	0x40005800
 8001268:	40021000 	.word	0x40021000

0800126c <initLCD>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Initialize LCD IPS 1.47"
void initLCD()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	LCD_1IN47_SetBackLight(1000); // Not sure if we need it but of. docs has it
 8001270:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001274:	f005 f9f0 	bl	8006658 <LCD_1IN47_SetBackLight>
	LCD_1IN47_Init(VERTICAL);
 8001278:	2001      	movs	r0, #1
 800127a:	f005 f8fb 	bl	8006474 <LCD_1IN47_Init>
	LCD_1IN47_Clear(WHITE);
 800127e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001282:	f005 f997 	bl	80065b4 <LCD_1IN47_Clear>

	// Set screen perspective as VERTICAL
	Paint_NewImage(LCD_1IN47_HEIGHT,LCD_1IN47_WIDTH, ROTATE_90, WHITE);
 8001286:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800128a:	225a      	movs	r2, #90	@ 0x5a
 800128c:	21ac      	movs	r1, #172	@ 0xac
 800128e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8001292:	f004 fd69 	bl	8005d68 <Paint_NewImage>
	// Set screen cleaner function for LCD
	Paint_SetClearFuntion(LCD_1IN47_Clear);
 8001296:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <initLCD+0x3c>)
 8001298:	f004 fdb2 	bl	8005e00 <Paint_SetClearFuntion>
	// Set pointer to draw (it helps to draw automatically)
	Paint_SetDisplayFuntion(LCD_1IN47_DrawPoint);
 800129c:	4803      	ldr	r0, [pc, #12]	@ (80012ac <initLCD+0x40>)
 800129e:	f004 fdbf 	bl	8005e20 <Paint_SetDisplayFuntion>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	080065b5 	.word	0x080065b5
 80012ac:	08006629 	.word	0x08006629

080012b0 <MAX30102_GetHeartbeatSPO2.0>:
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x20, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&start_collect, 2, HAL_MAX_DELAY);



  void MAX30102_GetHeartbeatSPO2(uint8_t *spo2, uint32_t *heartbeat)
  {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af04      	add	r7, sp, #16
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	f8c7 c004 	str.w	ip, [r7, #4]
	  uint8_t rbuf[8]; // Buffer to store the read data

	  // Read from the register where SPO2 and Heartbeat data are stored
	  HAL_I2C_Mem_Read(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x0C, I2C_MEMADD_SIZE_8BIT, rbuf, 8, HAL_MAX_DELAY);
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	2308      	movs	r3, #8
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	220c      	movs	r2, #12
 80012d2:	21ae      	movs	r1, #174	@ 0xae
 80012d4:	480b      	ldr	r0, [pc, #44]	@ (8001304 <MAX30102_GetHeartbeatSPO2.0+0x54>)
 80012d6:	f001 f9ad 	bl	8002634 <HAL_I2C_Mem_Read>

	  // Extract SPO2 and Heartbeat data
	  *spo2 = rbuf[0]; // SPO2 level
 80012da:	7c3a      	ldrb	r2, [r7, #16]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	701a      	strb	r2, [r3, #0]
	  *heartbeat = (rbuf[2] << 24) | (rbuf[3] << 16) | (rbuf[4] << 8) | rbuf[5]; // Heartbeat rate
 80012e0:	7cbb      	ldrb	r3, [r7, #18]
 80012e2:	061a      	lsls	r2, r3, #24
 80012e4:	7cfb      	ldrb	r3, [r7, #19]
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	431a      	orrs	r2, r3
 80012ea:	7d3b      	ldrb	r3, [r7, #20]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	4313      	orrs	r3, r2
 80012f0:	7d7a      	ldrb	r2, [r7, #21]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	601a      	str	r2, [r3, #0]
  }
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001f8 	.word	0x200001f8

08001308 <main>:
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0b0      	sub	sp, #192	@ 0xc0
 800130c:	af04      	add	r7, sp, #16
int main(void)
 800130e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001312:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  HAL_Init();
 8001316:	f000 fccc 	bl	8001cb2 <HAL_Init>
  SystemClock_Config();
 800131a:	f000 f94d 	bl	80015b8 <SystemClock_Config>
  MX_GPIO_Init();
 800131e:	f7ff fe89 	bl	8001034 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001322:	f000 fbf9 	bl	8001b18 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001326:	f000 f999 	bl	800165c <MX_SPI1_Init>
  MX_TIM3_Init();
 800132a:	f000 fb43 	bl	80019b4 <MX_TIM3_Init>
  MX_I2C2_Init();
 800132e:	f7ff ff05 	bl	800113c <MX_I2C2_Init>
  initLCD();
 8001332:	f7ff ff9b 	bl	800126c <initLCD>
  uint8_t mode_reset = 0x40; // Reset bit
 8001336:	2340      	movs	r3, #64	@ 0x40
 8001338:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x09, I2C_MEMADD_SIZE_8BIT, &mode_reset, 1, HAL_MAX_DELAY);
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 03a7 	add.w	r3, r7, #167	@ 0xa7
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	2209      	movs	r2, #9
 8001350:	21ae      	movs	r1, #174	@ 0xae
 8001352:	4874      	ldr	r0, [pc, #464]	@ (8001524 <main+0x21c>)
 8001354:	f001 f85a 	bl	800240c <HAL_I2C_Mem_Write>
  HAL_Delay(100); // Wait for reset
 8001358:	2064      	movs	r0, #100	@ 0x64
 800135a:	f000 fd1b 	bl	8001d94 <HAL_Delay>
  uint8_t mode_config = 0x03; // Set to SpO2 mode
 800135e:	2303      	movs	r3, #3
 8001360:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x09, I2C_MEMADD_SIZE_8BIT, &mode_config, 1, HAL_MAX_DELAY);
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f107 03a6 	add.w	r3, r7, #166	@ 0xa6
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	2209      	movs	r2, #9
 8001378:	21ae      	movs	r1, #174	@ 0xae
 800137a:	486a      	ldr	r0, [pc, #424]	@ (8001524 <main+0x21c>)
 800137c:	f001 f846 	bl	800240c <HAL_I2C_Mem_Write>
  uint8_t led1_pa = 0x7F; // Red LED current
 8001380:	237f      	movs	r3, #127	@ 0x7f
 8001382:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
  uint8_t led2_pa = 0x7F; // IR LED current
 8001386:	237f      	movs	r3, #127	@ 0x7f
 8001388:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x0C, I2C_MEMADD_SIZE_8BIT, &led1_pa, 1, HAL_MAX_DELAY);
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2301      	movs	r3, #1
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f107 03a5 	add.w	r3, r7, #165	@ 0xa5
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	220c      	movs	r2, #12
 80013a0:	21ae      	movs	r1, #174	@ 0xae
 80013a2:	4860      	ldr	r0, [pc, #384]	@ (8001524 <main+0x21c>)
 80013a4:	f001 f832 	bl	800240c <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x0D, I2C_MEMADD_SIZE_8BIT, &led2_pa, 1, HAL_MAX_DELAY);
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2301      	movs	r3, #1
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	220d      	movs	r2, #13
 80013bc:	21ae      	movs	r1, #174	@ 0xae
 80013be:	4859      	ldr	r0, [pc, #356]	@ (8001524 <main+0x21c>)
 80013c0:	f001 f824 	bl	800240c <HAL_I2C_Mem_Write>
  uint8_t spo2_config = 0x27; // 0x27 sets sample rate to 100 Hz, pulse width to 411us
 80013c4:	2327      	movs	r3, #39	@ 0x27
 80013c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x0A, I2C_MEMADD_SIZE_8BIT, &spo2_config, 1, HAL_MAX_DELAY);
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 03a3 	add.w	r3, r7, #163	@ 0xa3
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	220a      	movs	r2, #10
 80013de:	21ae      	movs	r1, #174	@ 0xae
 80013e0:	4850      	ldr	r0, [pc, #320]	@ (8001524 <main+0x21c>)
 80013e2:	f001 f813 	bl	800240c <HAL_I2C_Mem_Write>
  uint8_t slot_config = 0x21; // Slot 1 for Red, Slot 2 for IR
 80013e6:	2321      	movs	r3, #33	@ 0x21
 80013e8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x11, I2C_MEMADD_SIZE_8BIT, &slot_config, 1, HAL_MAX_DELAY);
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2301      	movs	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	2211      	movs	r2, #17
 8001400:	21ae      	movs	r1, #174	@ 0xae
 8001402:	4848      	ldr	r0, [pc, #288]	@ (8001524 <main+0x21c>)
 8001404:	f001 f802 	bl	800240c <HAL_I2C_Mem_Write>
  uint8_t fifo_config = 0x00;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x04, I2C_MEMADD_SIZE_8BIT, &fifo_config, 1, HAL_MAX_DELAY); // FIFO Write Pointer
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2301      	movs	r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	f107 03a1 	add.w	r3, r7, #161	@ 0xa1
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	2204      	movs	r2, #4
 8001422:	21ae      	movs	r1, #174	@ 0xae
 8001424:	483f      	ldr	r0, [pc, #252]	@ (8001524 <main+0x21c>)
 8001426:	f000 fff1 	bl	800240c <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x05, I2C_MEMADD_SIZE_8BIT, &fifo_config, 1, HAL_MAX_DELAY); // FIFO Overflow Counter
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	2301      	movs	r3, #1
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	f107 03a1 	add.w	r3, r7, #161	@ 0xa1
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	2205      	movs	r2, #5
 800143e:	21ae      	movs	r1, #174	@ 0xae
 8001440:	4838      	ldr	r0, [pc, #224]	@ (8001524 <main+0x21c>)
 8001442:	f000 ffe3 	bl	800240c <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x06, I2C_MEMADD_SIZE_8BIT, &fifo_config, 1, HAL_MAX_DELAY); // FIFO Read Pointer
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	f107 03a1 	add.w	r3, r7, #161	@ 0xa1
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	2206      	movs	r2, #6
 800145a:	21ae      	movs	r1, #174	@ 0xae
 800145c:	4831      	ldr	r0, [pc, #196]	@ (8001524 <main+0x21c>)
 800145e:	f000 ffd5 	bl	800240c <HAL_I2C_Mem_Write>
  uint8_t start_collect[2] =  {0x00, 0x01}; // Command to start data collection
 8001462:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001466:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
  HAL_I2C_Mem_Write(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x20, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&start_collect, 2, HAL_MAX_DELAY);
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2302      	movs	r3, #2
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	2220      	movs	r2, #32
 800147e:	21ae      	movs	r1, #174	@ 0xae
 8001480:	4828      	ldr	r0, [pc, #160]	@ (8001524 <main+0x21c>)
 8001482:	f000 ffc3 	bl	800240c <HAL_I2C_Mem_Write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Get SPO2 and Heartbeat values */
	  MAX30102_GetHeartbeatSPO2(&spo2, &heartbeat);
 8001486:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800148a:	469c      	mov	ip, r3
 800148c:	4926      	ldr	r1, [pc, #152]	@ (8001528 <main+0x220>)
 800148e:	4827      	ldr	r0, [pc, #156]	@ (800152c <main+0x224>)
 8001490:	f7ff ff0e 	bl	80012b0 <MAX30102_GetHeartbeatSPO2.0>


	  /* Prepare text for SPO2 and Heartbeat values */
	  char spo2Text[50];
	  sprintf(spo2Text, "SPO2: %d%%", spo2);\
 8001494:	4b25      	ldr	r3, [pc, #148]	@ (800152c <main+0x224>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	463b      	mov	r3, r7
 800149c:	4924      	ldr	r1, [pc, #144]	@ (8001530 <main+0x228>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f006 f93e 	bl	8007720 <siprintf>
	  Paint_DrawString_EN(0, 70, spo2Text, &Font16, BLACK, WHITE); // Display SPO2 on the screen
 80014a4:	463a      	mov	r2, r7
 80014a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <main+0x22c>)
 80014b2:	2146      	movs	r1, #70	@ 0x46
 80014b4:	2000      	movs	r0, #0
 80014b6:	f004 fe1f 	bl	80060f8 <Paint_DrawString_EN>

	  char heartbeatText[50];
	  sprintf(heartbeatText, "bpm: %lu", heartbeat);
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <main+0x220>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014c2:	491d      	ldr	r1, [pc, #116]	@ (8001538 <main+0x230>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 f92b 	bl	8007720 <siprintf>
	  Paint_DrawString_EN(0, 120, heartbeatText, &Font16, BLACK, WHITE); // Display Heartbeat on the screen
 80014ca:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80014ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <main+0x22c>)
 80014da:	2178      	movs	r1, #120	@ 0x78
 80014dc:	2000      	movs	r0, #0
 80014de:	f004 fe0b 	bl	80060f8 <Paint_DrawString_EN>


	  /* Get and format temperature */
	  float temperature = MAX30102_GetTemperature();
 80014e2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80014e6:	469c      	mov	ip, r3
 80014e8:	f000 f82a 	bl	8001540 <MAX30102_GetTemperature.1>
 80014ec:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac

	  char temperatureText[50];
	  sprintf(temperatureText, "T: %.2f C", temperature); // Format Temperature string
 80014f0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001500:	490e      	ldr	r1, [pc, #56]	@ (800153c <main+0x234>)
 8001502:	f006 f90d 	bl	8007720 <siprintf>
	  Paint_DrawString_EN(0, 250, temperatureText, &Font16, BLACK, WHITE); // Display Temperature on the screen
 8001506:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800150a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <main+0x22c>)
 8001516:	21fa      	movs	r1, #250	@ 0xfa
 8001518:	2000      	movs	r0, #0
 800151a:	f004 fded 	bl	80060f8 <Paint_DrawString_EN>
  {
 800151e:	bf00      	nop
 8001520:	e7b1      	b.n	8001486 <main+0x17e>
 8001522:	bf00      	nop
 8001524:	200001f8 	.word	0x200001f8
 8001528:	20000250 	.word	0x20000250
 800152c:	2000024c 	.word	0x2000024c
 8001530:	0800ae48 	.word	0x0800ae48
 8001534:	2000000c 	.word	0x2000000c
 8001538:	0800ae54 	.word	0x0800ae54
 800153c:	0800ae60 	.word	0x0800ae60

08001540 <MAX30102_GetTemperature.1>:
  {
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af04      	add	r7, sp, #16
 8001546:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_I2C_Mem_Read(&hi2c2, MAX30102_I2C_ADDRESS << 1, 0x14, I2C_MEMADD_SIZE_8BIT, temp_buf, 2, HAL_MAX_DELAY);
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2302      	movs	r3, #2
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2301      	movs	r3, #1
 800155c:	2214      	movs	r2, #20
 800155e:	21ae      	movs	r1, #174	@ 0xae
 8001560:	4813      	ldr	r0, [pc, #76]	@ (80015b0 <MAX30102_GetTemperature.1+0x70>)
 8001562:	f001 f867 	bl	8002634 <HAL_I2C_Mem_Read>
	  float temperature = temp_buf[0] + temp_buf[1] / 100.0;
 8001566:	7a3b      	ldrb	r3, [r7, #8]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f803 	bl	8000574 <__aeabi_i2d>
 800156e:	4604      	mov	r4, r0
 8001570:	460d      	mov	r5, r1
 8001572:	7a7b      	ldrb	r3, [r7, #9]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fffd 	bl	8000574 <__aeabi_i2d>
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <MAX30102_GetTemperature.1+0x74>)
 8001580:	f7ff f98c 	bl	800089c <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7fe fea6 	bl	80002dc <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fb4e 	bl	8000c38 <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	60fb      	str	r3, [r7, #12]
	  return temperature;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	ee07 3a90 	vmov	s15, r3
  }
 80015a6:	eeb0 0a67 	vmov.f32	s0, s15
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	200001f8 	.word	0x200001f8
 80015b4:	40590000 	.word	0x40590000

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	@ 0x50
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	2238      	movs	r2, #56	@ 0x38
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 f9a2 	bl	8007910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015da:	2000      	movs	r0, #0
 80015dc:	f001 fc9e 	bl	8002f1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ea:	2340      	movs	r3, #64	@ 0x40
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ee:	2302      	movs	r3, #2
 80015f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f2:	2302      	movs	r3, #2
 80015f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015fa:	2355      	movs	r3, #85	@ 0x55
 80015fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015fe:	2302      	movs	r3, #2
 8001600:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001602:	2302      	movs	r3, #2
 8001604:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001606:	2302      	movs	r3, #2
 8001608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	4618      	mov	r0, r3
 8001610:	f001 fd38 	bl	8003084 <HAL_RCC_OscConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800161a:	f000 f818 	bl	800164e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161e:	230f      	movs	r3, #15
 8001620:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001622:	2303      	movs	r3, #3
 8001624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2104      	movs	r1, #4
 8001636:	4618      	mov	r0, r3
 8001638:	f002 f836 	bl	80036a8 <HAL_RCC_ClockConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001642:	f000 f804 	bl	800164e <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	3750      	adds	r7, #80	@ 0x50
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001652:	b672      	cpsid	i
}
 8001654:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001656:	bf00      	nop
 8001658:	e7fd      	b.n	8001656 <Error_Handler+0x8>
	...

0800165c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <MX_SPI1_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001668:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001674:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001676:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800167a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_SPI1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_SPI1_Init+0x74>)
 800168a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800168e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001692:	2210      	movs	r2, #16
 8001694:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_SPI1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016aa:	2207      	movs	r2, #7
 80016ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016b6:	2208      	movs	r2, #8
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016bc:	f002 fc00 	bl	8003ec0 <HAL_SPI_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f7ff ffc2 	bl	800164e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000254 	.word	0x20000254
 80016d4:	40013000 	.word	0x40013000

080016d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_SPI_MspInit+0x7c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d128      	bne.n	800174c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fe:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001704:	6613      	str	r3, [r2, #96]	@ 0x60
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_SPI_MspInit+0x80>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800172a:	23e0      	movs	r3, #224	@ 0xe0
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800173a:	2305      	movs	r3, #5
 800173c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001748:	f000 fc2a 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	@ 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40013000 	.word	0x40013000
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <HAL_MspInit+0x44>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001766:	4a0e      	ldr	r2, [pc, #56]	@ (80017a0 <HAL_MspInit+0x44>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6613      	str	r3, [r2, #96]	@ 0x60
 800176e:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <HAL_MspInit+0x44>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_MspInit+0x44>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177e:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <HAL_MspInit+0x44>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001784:	6593      	str	r3, [r2, #88]	@ 0x58
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_MspInit+0x44>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001792:	f001 fc67 	bl	8003064 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <NMI_Handler+0x4>

080017ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <MemManage_Handler+0x4>

080017bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <BusFault_Handler+0x4>

080017c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <UsageFault_Handler+0x4>

080017cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fa:	f000 faad 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}

08001802 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  return 1;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_kill>:

int _kill(int pid, int sig)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800181c:	f006 f8da 	bl	80079d4 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	2216      	movs	r2, #22
 8001824:	601a      	str	r2, [r3, #0]
  return -1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_exit>:

void _exit (int status)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800183a:	f04f 31ff 	mov.w	r1, #4294967295
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffe7 	bl	8001812 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <_exit+0x12>

08001848 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e00a      	b.n	8001870 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800185a:	f3af 8000 	nop.w
 800185e:	4601      	mov	r1, r0
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	b2ca      	uxtb	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf0      	blt.n	800185a <_read+0x12>
  }

  return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e009      	b.n	80018a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	60ba      	str	r2, [r7, #8]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3301      	adds	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dbf1      	blt.n	8001894 <_write+0x12>
  }
  return len;
 80018b0:	687b      	ldr	r3, [r7, #4]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_close>:

int _close(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e2:	605a      	str	r2, [r3, #4]
  return 0;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_isatty>:

int _isatty(int file)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	@ (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f006 f83e 	bl	80079d4 <__errno>
 8001958:	4603      	mov	r3, r0
 800195a:	220c      	movs	r2, #12
 800195c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	@ (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20008000 	.word	0x20008000
 8001984:	00000400 	.word	0x00000400
 8001988:	200002b8 	.word	0x200002b8
 800198c:	20000518 	.word	0x20000518

08001990 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <SystemInit+0x20>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <SystemInit+0x20>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	@ 0x28
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c6:	463b      	mov	r3, r7
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019d8:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <MX_TIM3_Init+0xac>)
 80019da:	4a22      	ldr	r2, [pc, #136]	@ (8001a64 <MX_TIM3_Init+0xb0>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <MX_TIM3_Init+0xac>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_TIM3_Init+0xac>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM3_Init+0xac>)
 80019ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_TIM3_Init+0xac>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_TIM3_Init+0xac>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019fe:	4818      	ldr	r0, [pc, #96]	@ (8001a60 <MX_TIM3_Init+0xac>)
 8001a00:	f002 fde2 	bl	80045c8 <HAL_TIM_PWM_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a0a:	f7ff fe20 	bl	800164e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4810      	ldr	r0, [pc, #64]	@ (8001a60 <MX_TIM3_Init+0xac>)
 8001a1e:	f003 fad1 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a28:	f7ff fe11 	bl	800164e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2c:	2360      	movs	r3, #96	@ 0x60
 8001a2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2204      	movs	r2, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <MX_TIM3_Init+0xac>)
 8001a44:	f002 fe18 	bl	8004678 <HAL_TIM_PWM_ConfigChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a4e:	f7ff fdfe 	bl	800164e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a52:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <MX_TIM3_Init+0xac>)
 8001a54:	f000 f828 	bl	8001aa8 <HAL_TIM_MspPostInit>

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	@ 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200002bc 	.word	0x200002bc
 8001a64:	40000400 	.word	0x40000400

08001a68 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <HAL_TIM_PWM_MspInit+0x38>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10b      	bne.n	8001a92 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	4a09      	ldr	r2, [pc, #36]	@ (8001aa4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a11      	ldr	r2, [pc, #68]	@ (8001b0c <HAL_TIM_MspPostInit+0x64>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d11b      	bne.n	8001b02 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_TIM_MspPostInit+0x68>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	4a10      	ldr	r2, [pc, #64]	@ (8001b10 <HAL_TIM_MspPostInit+0x68>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_TIM_MspPostInit+0x68>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <HAL_TIM_MspPostInit+0x6c>)
 8001afe:	f000 fa4f 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48000400 	.word	0x48000400

08001b18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b1e:	4a23      	ldr	r2, [pc, #140]	@ (8001bac <MX_USART2_UART_Init+0x94>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b22:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b60:	4811      	ldr	r0, [pc, #68]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b62:	f003 fab1 	bl	80050c8 <HAL_UART_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b6c:	f7ff fd6f 	bl	800164e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b70:	2100      	movs	r1, #0
 8001b72:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b74:	f004 f81c 	bl	8005bb0 <HAL_UARTEx_SetTxFifoThreshold>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b7e:	f7ff fd66 	bl	800164e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b82:	2100      	movs	r1, #0
 8001b84:	4808      	ldr	r0, [pc, #32]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b86:	f004 f851 	bl	8005c2c <HAL_UARTEx_SetRxFifoThreshold>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b90:	f7ff fd5d 	bl	800164e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b94:	4804      	ldr	r0, [pc, #16]	@ (8001ba8 <MX_USART2_UART_Init+0x90>)
 8001b96:	f003 ffd2 	bl	8005b3e <HAL_UARTEx_DisableFifoMode>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ba0:	f7ff fd55 	bl	800164e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000308 	.word	0x20000308
 8001bac:	40004400 	.word	0x40004400

08001bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b09a      	sub	sp, #104	@ 0x68
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	2244      	movs	r2, #68	@ 0x44
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f005 fe9d 	bl	8007910 <memset>
  if(uartHandle->Instance==USART2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HAL_UART_MspInit+0xa8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d136      	bne.n	8001c4e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001be0:	2302      	movs	r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 ff77 	bl	8003ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bf8:	f7ff fd29 	bl	800164e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <HAL_UART_MspInit+0xac>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	4a16      	ldr	r2, [pc, #88]	@ (8001c5c <HAL_UART_MspInit+0xac>)
 8001c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <HAL_UART_MspInit+0xac>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_UART_MspInit+0xac>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c18:	4a10      	ldr	r2, [pc, #64]	@ (8001c5c <HAL_UART_MspInit+0xac>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_UART_MspInit+0xac>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001c2c:	230c      	movs	r3, #12
 8001c2e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c3c:	2307      	movs	r3, #7
 8001c3e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c44:	4619      	mov	r1, r3
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4a:	f000 f9a9 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3768      	adds	r7, #104	@ 0x68
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40004400 	.word	0x40004400
 8001c5c:	40021000 	.word	0x40021000

08001c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c60:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c62:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c64:	f7ff fe94 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c68:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c6a:	490d      	ldr	r1, [pc, #52]	@ (8001ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca4 <LoopForever+0xe>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c80:	4c0a      	ldr	r4, [pc, #40]	@ (8001cac <LoopForever+0x16>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c8e:	f005 fea7 	bl	80079e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c92:	f7ff fb39 	bl	8001308 <main>

08001c96 <LoopForever>:

LoopForever:
    b LoopForever
 8001c96:	e7fe      	b.n	8001c96 <LoopForever>
  ldr   r0, =_estack
 8001c98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ca4:	0800c1c0 	.word	0x0800c1c0
  ldr r2, =_sbss
 8001ca8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001cac:	20000514 	.word	0x20000514

08001cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC1_2_IRQHandler>

08001cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 f93d 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f80e 	bl	8001ce4 <HAL_InitTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	71fb      	strb	r3, [r7, #7]
 8001cd2:	e001      	b.n	8001cd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cd4:	f7ff fd42 	bl	800175c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cd8:	79fb      	ldrb	r3, [r7, #7]

}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_InitTick+0x68>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d022      	beq.n	8001d3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_InitTick+0x6c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <HAL_InitTick+0x68>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f93a 	bl	8001f86 <HAL_SYSTICK_Config>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10f      	bne.n	8001d38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b0f      	cmp	r3, #15
 8001d1c:	d809      	bhi.n	8001d32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	f04f 30ff 	mov.w	r0, #4294967295
 8001d26:	f000 f914 	bl	8001f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <HAL_InitTick+0x70>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e007      	b.n	8001d42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	e004      	b.n	8001d42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e001      	b.n	8001d42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_IncTick+0x1c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_IncTick+0x20>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a03      	ldr	r2, [pc, #12]	@ (8001d74 <HAL_IncTick+0x1c>)
 8001d68:	6013      	str	r3, [r2, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	2000039c 	.word	0x2000039c
 8001d78:	20000008 	.word	0x20000008

08001d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b03      	ldr	r3, [pc, #12]	@ (8001d90 <HAL_GetTick+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	2000039c 	.word	0x2000039c

08001d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff ffee 	bl	8001d7c <HAL_GetTick>
 8001da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d004      	beq.n	8001db8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_Delay+0x40>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4413      	add	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db8:	bf00      	nop
 8001dba:	f7ff ffdf 	bl	8001d7c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d8f7      	bhi.n	8001dba <HAL_Delay+0x26>
  {
  }
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000008 	.word	0x20000008

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	@ (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	@ (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	@ 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff47 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff5e 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff90 	bl	8001e90 <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5f 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffb2 	bl	8001ef8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fae:	e15a      	b.n	8002266 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 814c 	beq.w	8002260 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d005      	beq.n	8001fe0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d130      	bne.n	8002042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002016:	2201      	movs	r2, #1
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 0201 	and.w	r2, r3, #1
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b03      	cmp	r3, #3
 800204c:	d017      	beq.n	800207e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d123      	bne.n	80020d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3208      	adds	r2, #8
 8002092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	6939      	ldr	r1, [r7, #16]
 80020ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0203 	and.w	r2, r3, #3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80a6 	beq.w	8002260 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002114:	4b5b      	ldr	r3, [pc, #364]	@ (8002284 <HAL_GPIO_Init+0x2e4>)
 8002116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002118:	4a5a      	ldr	r2, [pc, #360]	@ (8002284 <HAL_GPIO_Init+0x2e4>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002120:	4b58      	ldr	r3, [pc, #352]	@ (8002284 <HAL_GPIO_Init+0x2e4>)
 8002122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212c:	4a56      	ldr	r2, [pc, #344]	@ (8002288 <HAL_GPIO_Init+0x2e8>)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002156:	d01f      	beq.n	8002198 <HAL_GPIO_Init+0x1f8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a4c      	ldr	r2, [pc, #304]	@ (800228c <HAL_GPIO_Init+0x2ec>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d019      	beq.n	8002194 <HAL_GPIO_Init+0x1f4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a4b      	ldr	r2, [pc, #300]	@ (8002290 <HAL_GPIO_Init+0x2f0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <HAL_GPIO_Init+0x1f0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a4a      	ldr	r2, [pc, #296]	@ (8002294 <HAL_GPIO_Init+0x2f4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <HAL_GPIO_Init+0x1ec>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a49      	ldr	r2, [pc, #292]	@ (8002298 <HAL_GPIO_Init+0x2f8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x1e8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a48      	ldr	r2, [pc, #288]	@ (800229c <HAL_GPIO_Init+0x2fc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_GPIO_Init+0x1e4>
 8002180:	2305      	movs	r3, #5
 8002182:	e00a      	b.n	800219a <HAL_GPIO_Init+0x1fa>
 8002184:	2306      	movs	r3, #6
 8002186:	e008      	b.n	800219a <HAL_GPIO_Init+0x1fa>
 8002188:	2304      	movs	r3, #4
 800218a:	e006      	b.n	800219a <HAL_GPIO_Init+0x1fa>
 800218c:	2303      	movs	r3, #3
 800218e:	e004      	b.n	800219a <HAL_GPIO_Init+0x1fa>
 8002190:	2302      	movs	r3, #2
 8002192:	e002      	b.n	800219a <HAL_GPIO_Init+0x1fa>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_GPIO_Init+0x1fa>
 8002198:	2300      	movs	r3, #0
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	f002 0203 	and.w	r2, r2, #3
 80021a0:	0092      	lsls	r2, r2, #2
 80021a2:	4093      	lsls	r3, r2
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021aa:	4937      	ldr	r1, [pc, #220]	@ (8002288 <HAL_GPIO_Init+0x2e8>)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021b8:	4b39      	ldr	r3, [pc, #228]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021dc:	4a30      	ldr	r2, [pc, #192]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021e2:	4b2f      	ldr	r3, [pc, #188]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002206:	4a26      	ldr	r2, [pc, #152]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800220c:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002230:	4a1b      	ldr	r2, [pc, #108]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002236:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800225a:	4a11      	ldr	r2, [pc, #68]	@ (80022a0 <HAL_GPIO_Init+0x300>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3301      	adds	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	f47f ae9d 	bne.w	8001fb0 <HAL_GPIO_Init+0x10>
  }
}
 8002276:	bf00      	nop
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40021000 	.word	0x40021000
 8002288:	40010000 	.word	0x40010000
 800228c:	48000400 	.word	0x48000400
 8002290:	48000800 	.word	0x48000800
 8002294:	48000c00 	.word	0x48000c00
 8002298:	48001000 	.word	0x48001000
 800229c:	48001400 	.word	0x48001400
 80022a0:	40010400 	.word	0x40010400

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e08d      	b.n	8002402 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe ff5e 	bl	80011bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	@ 0x24
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002324:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002334:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d107      	bne.n	800234e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	e006      	b.n	800235c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800235a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d108      	bne.n	8002376 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	e007      	b.n	8002386 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002384:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002398:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69d9      	ldr	r1, [r3, #28]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4603      	mov	r3, r0
 800241c:	817b      	strh	r3, [r7, #10]
 800241e:	460b      	mov	r3, r1
 8002420:	813b      	strh	r3, [r7, #8]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b20      	cmp	r3, #32
 8002430:	f040 80f9 	bne.w	8002626 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_I2C_Mem_Write+0x34>
 800243a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002446:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0ed      	b.n	8002628 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_I2C_Mem_Write+0x4e>
 8002456:	2302      	movs	r3, #2
 8002458:	e0e6      	b.n	8002628 <HAL_I2C_Mem_Write+0x21c>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002462:	f7ff fc8b 	bl	8001d7c <HAL_GetTick>
 8002466:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2319      	movs	r3, #25
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fac3 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0d1      	b.n	8002628 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2221      	movs	r2, #33	@ 0x21
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2240      	movs	r2, #64	@ 0x40
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a3a      	ldr	r2, [r7, #32]
 800249e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ac:	88f8      	ldrh	r0, [r7, #6]
 80024ae:	893a      	ldrh	r2, [r7, #8]
 80024b0:	8979      	ldrh	r1, [r7, #10]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	4603      	mov	r3, r0
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f9d3 	bl	8002868 <I2C_RequestMemoryWrite>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0a9      	b.n	8002628 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2bff      	cmp	r3, #255	@ 0xff
 80024dc:	d90e      	bls.n	80024fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	22ff      	movs	r2, #255	@ 0xff
 80024e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	8979      	ldrh	r1, [r7, #10]
 80024ec:	2300      	movs	r3, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fc47 	bl	8002d88 <I2C_TransferConfig>
 80024fa:	e00f      	b.n	800251c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250a:	b2da      	uxtb	r2, r3
 800250c:	8979      	ldrh	r1, [r7, #10]
 800250e:	2300      	movs	r3, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fc36 	bl	8002d88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fac6 	bl	8002ab2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e07b      	b.n	8002628 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d034      	beq.n	80025d4 <HAL_I2C_Mem_Write+0x1c8>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	2b00      	cmp	r3, #0
 8002570:	d130      	bne.n	80025d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002578:	2200      	movs	r2, #0
 800257a:	2180      	movs	r1, #128	@ 0x80
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fa3f 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e04d      	b.n	8002628 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2bff      	cmp	r3, #255	@ 0xff
 8002594:	d90e      	bls.n	80025b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	22ff      	movs	r2, #255	@ 0xff
 800259a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	8979      	ldrh	r1, [r7, #10]
 80025a4:	2300      	movs	r3, #0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fbeb 	bl	8002d88 <I2C_TransferConfig>
 80025b2:	e00f      	b.n	80025d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	8979      	ldrh	r1, [r7, #10]
 80025c6:	2300      	movs	r3, #0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fbda 	bl	8002d88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d19e      	bne.n	800251c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 faac 	bl	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e01a      	b.n	8002628 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2220      	movs	r2, #32
 80025f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <HAL_I2C_Mem_Write+0x224>)
 8002606:	400b      	ands	r3, r1
 8002608:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	fe00e800 	.word	0xfe00e800

08002634 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	817b      	strh	r3, [r7, #10]
 8002646:	460b      	mov	r3, r1
 8002648:	813b      	strh	r3, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	f040 80fd 	bne.w	8002856 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_I2C_Mem_Read+0x34>
 8002662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0f1      	b.n	8002858 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Read+0x4e>
 800267e:	2302      	movs	r3, #2
 8002680:	e0ea      	b.n	8002858 <HAL_I2C_Mem_Read+0x224>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800268a:	f7ff fb77 	bl	8001d7c <HAL_GetTick>
 800268e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	2201      	movs	r2, #1
 8002698:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f9af 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0d5      	b.n	8002858 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2222      	movs	r2, #34	@ 0x22
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2240      	movs	r2, #64	@ 0x40
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a3a      	ldr	r2, [r7, #32]
 80026c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026d4:	88f8      	ldrh	r0, [r7, #6]
 80026d6:	893a      	ldrh	r2, [r7, #8]
 80026d8:	8979      	ldrh	r1, [r7, #10]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	4603      	mov	r3, r0
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f913 	bl	8002910 <I2C_RequestMemoryRead>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0ad      	b.n	8002858 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2bff      	cmp	r3, #255	@ 0xff
 8002704:	d90e      	bls.n	8002724 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	22ff      	movs	r2, #255	@ 0xff
 800270a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002710:	b2da      	uxtb	r2, r3
 8002712:	8979      	ldrh	r1, [r7, #10]
 8002714:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <HAL_I2C_Mem_Read+0x22c>)
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fb33 	bl	8002d88 <I2C_TransferConfig>
 8002722:	e00f      	b.n	8002744 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002732:	b2da      	uxtb	r2, r3
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_I2C_Mem_Read+0x22c>)
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fb22 	bl	8002d88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274a:	2200      	movs	r2, #0
 800274c:	2104      	movs	r1, #4
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f956 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07c      	b.n	8002858 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d034      	beq.n	8002804 <HAL_I2C_Mem_Read+0x1d0>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d130      	bne.n	8002804 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a8:	2200      	movs	r2, #0
 80027aa:	2180      	movs	r1, #128	@ 0x80
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f927 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e04d      	b.n	8002858 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2bff      	cmp	r3, #255	@ 0xff
 80027c4:	d90e      	bls.n	80027e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	22ff      	movs	r2, #255	@ 0xff
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	2300      	movs	r3, #0
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fad3 	bl	8002d88 <I2C_TransferConfig>
 80027e2:	e00f      	b.n	8002804 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	8979      	ldrh	r1, [r7, #10]
 80027f6:	2300      	movs	r3, #0
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fac2 	bl	8002d88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d19a      	bne.n	8002744 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f994 	bl	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e01a      	b.n	8002858 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2220      	movs	r2, #32
 8002828:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_I2C_Mem_Read+0x230>)
 8002836:	400b      	ands	r3, r1
 8002838:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	80002400 	.word	0x80002400
 8002864:	fe00e800 	.word	0xfe00e800

08002868 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	460b      	mov	r3, r1
 800287c:	813b      	strh	r3, [r7, #8]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	4b20      	ldr	r3, [pc, #128]	@ (800290c <I2C_RequestMemoryWrite+0xa4>)
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fa79 	bl	8002d88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	69b9      	ldr	r1, [r7, #24]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f909 	bl	8002ab2 <I2C_WaitOnTXISFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e02c      	b.n	8002904 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028b0:	893b      	ldrh	r3, [r7, #8]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80028ba:	e015      	b.n	80028e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	69b9      	ldr	r1, [r7, #24]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f8ef 	bl	8002ab2 <I2C_WaitOnTXISFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e012      	b.n	8002904 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028de:	893b      	ldrh	r3, [r7, #8]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2200      	movs	r2, #0
 80028f0:	2180      	movs	r1, #128	@ 0x80
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f884 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	80002000 	.word	0x80002000

08002910 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	4608      	mov	r0, r1
 800291a:	4611      	mov	r1, r2
 800291c:	461a      	mov	r2, r3
 800291e:	4603      	mov	r3, r0
 8002920:	817b      	strh	r3, [r7, #10]
 8002922:	460b      	mov	r3, r1
 8002924:	813b      	strh	r3, [r7, #8]
 8002926:	4613      	mov	r3, r2
 8002928:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	8979      	ldrh	r1, [r7, #10]
 8002930:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <I2C_RequestMemoryRead+0xa4>)
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2300      	movs	r3, #0
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fa26 	bl	8002d88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f8b6 	bl	8002ab2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e02c      	b.n	80029aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002956:	893b      	ldrh	r3, [r7, #8]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002960:	e015      	b.n	800298e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	b29b      	uxth	r3, r3
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f89c 	bl	8002ab2 <I2C_WaitOnTXISFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e012      	b.n	80029aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002984:	893b      	ldrh	r3, [r7, #8]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2200      	movs	r2, #0
 8002996:	2140      	movs	r1, #64	@ 0x40
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f831 	bl	8002a00 <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	80002000 	.word	0x80002000

080029b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d103      	bne.n	80029d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2200      	movs	r2, #0
 80029d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d007      	beq.n	80029f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	619a      	str	r2, [r3, #24]
  }
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a10:	e03b      	b.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f8d6 	bl	8002bc8 <I2C_IsErrorOccurred>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e041      	b.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d02d      	beq.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2e:	f7ff f9a5 	bl	8001d7c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d122      	bne.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d113      	bne.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4013      	ands	r3, r2
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d0b4      	beq.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002abe:	e033      	b.n	8002b28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f87f 	bl	8002bc8 <I2C_IsErrorOccurred>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e031      	b.n	8002b38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d025      	beq.n	8002b28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002adc:	f7ff f94e 	bl	8001d7c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d302      	bcc.n	8002af2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d11a      	bne.n	8002b28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d013      	beq.n	8002b28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e007      	b.n	8002b38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d1c4      	bne.n	8002ac0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b4c:	e02f      	b.n	8002bae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f838 	bl	8002bc8 <I2C_IsErrorOccurred>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e02d      	b.n	8002bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b62:	f7ff f90b 	bl	8001d7c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d302      	bcc.n	8002b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d11a      	bne.n	8002bae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d013      	beq.n	8002bae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f043 0220 	orr.w	r2, r3, #32
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e007      	b.n	8002bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d1c8      	bne.n	8002b4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d068      	beq.n	8002cc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bfc:	e049      	b.n	8002c92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d045      	beq.n	8002c92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7ff f8b9 	bl	8001d7c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_IsErrorOccurred+0x54>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d13a      	bne.n	8002c92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c3e:	d121      	bne.n	8002c84 <I2C_IsErrorOccurred+0xbc>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c46:	d01d      	beq.n	8002c84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d01a      	beq.n	8002c84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c5e:	f7ff f88d 	bl	8001d7c <HAL_GetTick>
 8002c62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c64:	e00e      	b.n	8002c84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c66:	f7ff f889 	bl	8001d7c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b19      	cmp	r3, #25
 8002c72:	d907      	bls.n	8002c84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	f043 0320 	orr.w	r3, r3, #32
 8002c7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c82:	e006      	b.n	8002c92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d1e9      	bne.n	8002c66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d003      	beq.n	8002ca8 <I2C_IsErrorOccurred+0xe0>
 8002ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0aa      	beq.n	8002bfe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00b      	beq.n	8002cf0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ce8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01c      	beq.n	8002d76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7ff fe3b 	bl	80029b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <I2C_IsErrorOccurred+0x1bc>)
 8002d4e:	400b      	ands	r3, r1
 8002d50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3728      	adds	r7, #40	@ 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	fe00e800 	.word	0xfe00e800

08002d88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	817b      	strh	r3, [r7, #10]
 8002d96:	4613      	mov	r3, r2
 8002d98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002da0:	7a7b      	ldrb	r3, [r7, #9]
 8002da2:	041b      	lsls	r3, r3, #16
 8002da4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002da8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002db6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	0d5b      	lsrs	r3, r3, #21
 8002dc2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002dc6:	4b08      	ldr	r3, [pc, #32]	@ (8002de8 <I2C_TransferConfig+0x60>)
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	ea02 0103 	and.w	r1, r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	03ff63ff 	.word	0x03ff63ff

08002dec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d138      	bne.n	8002e74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e032      	b.n	8002e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	@ 0x24
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d139      	bne.n	8002f0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e033      	b.n	8002f0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2224      	movs	r2, #36	@ 0x24
 8002eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ed4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d141      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f36:	d131      	bne.n	8002f9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f38:	4b47      	ldr	r3, [pc, #284]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f3e:	4a46      	ldr	r2, [pc, #280]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f48:	4b43      	ldr	r3, [pc, #268]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f50:	4a41      	ldr	r2, [pc, #260]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f58:	4b40      	ldr	r3, [pc, #256]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2232      	movs	r2, #50	@ 0x32
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	4a3f      	ldr	r2, [pc, #252]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	0c9b      	lsrs	r3, r3, #18
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f6e:	e002      	b.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f76:	4b38      	ldr	r3, [pc, #224]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f82:	d102      	bne.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f2      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f8a:	4b33      	ldr	r3, [pc, #204]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f96:	d158      	bne.n	800304a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e057      	b.n	800304c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fac:	e04d      	b.n	800304a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb4:	d141      	bne.n	800303a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fb6:	4b28      	ldr	r3, [pc, #160]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc2:	d131      	bne.n	8003028 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc4:	4b24      	ldr	r3, [pc, #144]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fca:	4a23      	ldr	r2, [pc, #140]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd4:	4b20      	ldr	r3, [pc, #128]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2232      	movs	r2, #50	@ 0x32
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	4a1c      	ldr	r2, [pc, #112]	@ (8003060 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	0c9b      	lsrs	r3, r3, #18
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ffa:	e002      	b.n	8003002 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003002:	4b15      	ldr	r3, [pc, #84]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300e:	d102      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f2      	bne.n	8002ffc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003022:	d112      	bne.n	800304a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e011      	b.n	800304c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800302e:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003034:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003038:	e007      	b.n	800304a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800303a:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003042:	4a05      	ldr	r2, [pc, #20]	@ (8003058 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003044:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003048:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40007000 	.word	0x40007000
 800305c:	20000000 	.word	0x20000000
 8003060:	431bde83 	.word	0x431bde83

08003064 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003068:	4b05      	ldr	r3, [pc, #20]	@ (8003080 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a04      	ldr	r2, [pc, #16]	@ (8003080 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800306e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003072:	6093      	str	r3, [r2, #8]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40007000 	.word	0x40007000

08003084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e2fe      	b.n	8003694 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d075      	beq.n	800318e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a2:	4b97      	ldr	r3, [pc, #604]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ac:	4b94      	ldr	r3, [pc, #592]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_OscConfig+0x3e>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d002      	beq.n	80030c8 <HAL_RCC_OscConfig+0x44>
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	4b8d      	ldr	r3, [pc, #564]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05b      	beq.n	800318c <HAL_RCC_OscConfig+0x108>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d157      	bne.n	800318c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e2d9      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e8:	d106      	bne.n	80030f8 <HAL_RCC_OscConfig+0x74>
 80030ea:	4b85      	ldr	r3, [pc, #532]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a84      	ldr	r2, [pc, #528]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e01d      	b.n	8003134 <HAL_RCC_OscConfig+0xb0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x98>
 8003102:	4b7f      	ldr	r3, [pc, #508]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7e      	ldr	r2, [pc, #504]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b7c      	ldr	r3, [pc, #496]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a7b      	ldr	r2, [pc, #492]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0xb0>
 800311c:	4b78      	ldr	r3, [pc, #480]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a77      	ldr	r2, [pc, #476]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b75      	ldr	r3, [pc, #468]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a74      	ldr	r2, [pc, #464]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fe1e 	bl	8001d7c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fe1a 	bl	8001d7c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	@ 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e29e      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003156:	4b6a      	ldr	r3, [pc, #424]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xc0>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fe0a 	bl	8001d7c <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fe06 	bl	8001d7c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	@ 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e28a      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317e:	4b60      	ldr	r3, [pc, #384]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0xe8>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d075      	beq.n	8003286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319a:	4b59      	ldr	r3, [pc, #356]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a4:	4b56      	ldr	r3, [pc, #344]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d102      	bne.n	80031ba <HAL_RCC_OscConfig+0x136>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_OscConfig+0x13c>
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d11f      	bne.n	8003200 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_OscConfig+0x154>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e25d      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d8:	4b49      	ldr	r3, [pc, #292]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	061b      	lsls	r3, r3, #24
 80031e6:	4946      	ldr	r1, [pc, #280]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031ec:	4b45      	ldr	r3, [pc, #276]	@ (8003304 <HAL_RCC_OscConfig+0x280>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fe fd77 	bl	8001ce4 <HAL_InitTick>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d043      	beq.n	8003284 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e249      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b3d      	ldr	r3, [pc, #244]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a3c      	ldr	r2, [pc, #240]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fdb2 	bl	8001d7c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe fdae 	bl	8001d7c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e232      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322e:	4b34      	ldr	r3, [pc, #208]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	492d      	ldr	r1, [pc, #180]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
 800324e:	e01a      	b.n	8003286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003250:	4b2b      	ldr	r3, [pc, #172]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a2a      	ldr	r2, [pc, #168]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003256:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800325a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fd8e 	bl	8001d7c <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7fe fd8a 	bl	8001d7c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e20e      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003276:	4b22      	ldr	r3, [pc, #136]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1e0>
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003284:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d041      	beq.n	8003316 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 800329c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a0:	4a17      	ldr	r2, [pc, #92]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fe fd67 	bl	8001d7c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe fd63 	bl	8001d7c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e1e7      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ef      	beq.n	80032b2 <HAL_RCC_OscConfig+0x22e>
 80032d2:	e020      	b.n	8003316 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80032d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032da:	4a09      	ldr	r2, [pc, #36]	@ (8003300 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe fd4a 	bl	8001d7c <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ea:	e00d      	b.n	8003308 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ec:	f7fe fd46 	bl	8001d7c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d906      	bls.n	8003308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1ca      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003308:	4b8c      	ldr	r3, [pc, #560]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 800330a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1ea      	bne.n	80032ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80a6 	beq.w	8003470 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003328:	4b84      	ldr	r3, [pc, #528]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_OscConfig+0x2b4>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x2b6>
 8003338:	2300      	movs	r3, #0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b7f      	ldr	r3, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003342:	4a7e      	ldr	r2, [pc, #504]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003348:	6593      	str	r3, [r2, #88]	@ 0x58
 800334a:	4b7c      	ldr	r3, [pc, #496]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335a:	4b79      	ldr	r3, [pc, #484]	@ (8003540 <HAL_RCC_OscConfig+0x4bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d118      	bne.n	8003398 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003366:	4b76      	ldr	r3, [pc, #472]	@ (8003540 <HAL_RCC_OscConfig+0x4bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a75      	ldr	r2, [pc, #468]	@ (8003540 <HAL_RCC_OscConfig+0x4bc>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fe fd03 	bl	8001d7c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe fcff 	bl	8001d7c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e183      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338c:	4b6c      	ldr	r3, [pc, #432]	@ (8003540 <HAL_RCC_OscConfig+0x4bc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d108      	bne.n	80033b2 <HAL_RCC_OscConfig+0x32e>
 80033a0:	4b66      	ldr	r3, [pc, #408]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a6:	4a65      	ldr	r2, [pc, #404]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033b0:	e024      	b.n	80033fc <HAL_RCC_OscConfig+0x378>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b05      	cmp	r3, #5
 80033b8:	d110      	bne.n	80033dc <HAL_RCC_OscConfig+0x358>
 80033ba:	4b60      	ldr	r3, [pc, #384]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c0:	4a5e      	ldr	r2, [pc, #376]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ca:	4b5c      	ldr	r3, [pc, #368]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d0:	4a5a      	ldr	r2, [pc, #360]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033da:	e00f      	b.n	80033fc <HAL_RCC_OscConfig+0x378>
 80033dc:	4b57      	ldr	r3, [pc, #348]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e2:	4a56      	ldr	r2, [pc, #344]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ec:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f2:	4a52      	ldr	r2, [pc, #328]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80033f4:	f023 0304 	bic.w	r3, r3, #4
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d016      	beq.n	8003432 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe fcba 	bl	8001d7c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe fcb6 	bl	8001d7c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e138      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003422:	4b46      	ldr	r3, [pc, #280]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ed      	beq.n	800340c <HAL_RCC_OscConfig+0x388>
 8003430:	e015      	b.n	800345e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7fe fca3 	bl	8001d7c <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fe fc9f 	bl	8001d7c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e121      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003450:	4b3a      	ldr	r3, [pc, #232]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ed      	bne.n	800343a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800345e:	7ffb      	ldrb	r3, [r7, #31]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003464:	4b35      	ldr	r3, [pc, #212]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003468:	4a34      	ldr	r2, [pc, #208]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 800346a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d03c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01c      	beq.n	80034be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003484:	4b2d      	ldr	r3, [pc, #180]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 8003486:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800348a:	4a2c      	ldr	r2, [pc, #176]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe fc72 	bl	8001d7c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800349c:	f7fe fc6e 	bl	8001d7c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0f2      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ae:	4b23      	ldr	r3, [pc, #140]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80034b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ef      	beq.n	800349c <HAL_RCC_OscConfig+0x418>
 80034bc:	e01b      	b.n	80034f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034be:	4b1f      	ldr	r3, [pc, #124]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80034c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034c4:	4a1d      	ldr	r2, [pc, #116]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe fc55 	bl	8001d7c <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d6:	f7fe fc51 	bl	8001d7c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0d5      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e8:	4b14      	ldr	r3, [pc, #80]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 80034ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ef      	bne.n	80034d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80c9 	beq.w	8003692 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003500:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b0c      	cmp	r3, #12
 800350a:	f000 8083 	beq.w	8003614 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d15e      	bne.n	80035d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b09      	ldr	r3, [pc, #36]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a08      	ldr	r2, [pc, #32]	@ (800353c <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fe fc2b 	bl	8001d7c <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003528:	e00c      	b.n	8003544 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe fc27 	bl	8001d7c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d905      	bls.n	8003544 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0ab      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
 800353c:	40021000 	.word	0x40021000
 8003540:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003544:	4b55      	ldr	r3, [pc, #340]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ec      	bne.n	800352a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003550:	4b52      	ldr	r3, [pc, #328]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <HAL_RCC_OscConfig+0x61c>)
 8003556:	4013      	ands	r3, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6a11      	ldr	r1, [r2, #32]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003560:	3a01      	subs	r2, #1
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	4311      	orrs	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800356a:	0212      	lsls	r2, r2, #8
 800356c:	4311      	orrs	r1, r2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003572:	0852      	lsrs	r2, r2, #1
 8003574:	3a01      	subs	r2, #1
 8003576:	0552      	lsls	r2, r2, #21
 8003578:	4311      	orrs	r1, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800357e:	0852      	lsrs	r2, r2, #1
 8003580:	3a01      	subs	r2, #1
 8003582:	0652      	lsls	r2, r2, #25
 8003584:	4311      	orrs	r1, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800358a:	06d2      	lsls	r2, r2, #27
 800358c:	430a      	orrs	r2, r1
 800358e:	4943      	ldr	r1, [pc, #268]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 8003590:	4313      	orrs	r3, r2
 8003592:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	4b41      	ldr	r3, [pc, #260]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a40      	ldr	r2, [pc, #256]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 800359a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800359e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a0:	4b3e      	ldr	r3, [pc, #248]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a3d      	ldr	r2, [pc, #244]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 80035a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fbe6 	bl	8001d7c <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe fbe2 	bl	8001d7c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e066      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c6:	4b35      	ldr	r3, [pc, #212]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x530>
 80035d2:	e05e      	b.n	8003692 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	4b31      	ldr	r3, [pc, #196]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a30      	ldr	r2, [pc, #192]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fbcc 	bl	8001d7c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe fbc8 	bl	8001d7c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e04c      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fa:	4b28      	ldr	r3, [pc, #160]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003606:	4b25      	ldr	r3, [pc, #148]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	4924      	ldr	r1, [pc, #144]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 800360c:	4b25      	ldr	r3, [pc, #148]	@ (80036a4 <HAL_RCC_OscConfig+0x620>)
 800360e:	4013      	ands	r3, r2
 8003610:	60cb      	str	r3, [r1, #12]
 8003612:	e03e      	b.n	8003692 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e039      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003620:	4b1e      	ldr	r3, [pc, #120]	@ (800369c <HAL_RCC_OscConfig+0x618>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0203 	and.w	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	429a      	cmp	r2, r3
 8003632:	d12c      	bne.n	800368e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	3b01      	subs	r3, #1
 8003640:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d123      	bne.n	800368e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d11b      	bne.n	800368e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d113      	bne.n	800368e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	3b01      	subs	r3, #1
 8003674:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d109      	bne.n	800368e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	019f800c 	.word	0x019f800c
 80036a4:	feeefffc 	.word	0xfeeefffc

080036a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e11e      	b.n	80038fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b91      	ldr	r3, [pc, #580]	@ (8003908 <HAL_RCC_ClockConfig+0x260>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d910      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b8e      	ldr	r3, [pc, #568]	@ (8003908 <HAL_RCC_ClockConfig+0x260>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 020f 	bic.w	r2, r3, #15
 80036d6:	498c      	ldr	r1, [pc, #560]	@ (8003908 <HAL_RCC_ClockConfig+0x260>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b8a      	ldr	r3, [pc, #552]	@ (8003908 <HAL_RCC_ClockConfig+0x260>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e106      	b.n	80038fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d073      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d129      	bne.n	8003758 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003704:	4b81      	ldr	r3, [pc, #516]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0f4      	b.n	80038fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003714:	f000 f99e 	bl	8003a54 <RCC_GetSysClockFreqFromPLLSource>
 8003718:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4a7c      	ldr	r2, [pc, #496]	@ (8003910 <HAL_RCC_ClockConfig+0x268>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d93f      	bls.n	80037a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003722:	4b7a      	ldr	r3, [pc, #488]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003736:	2b00      	cmp	r3, #0
 8003738:	d033      	beq.n	80037a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800373e:	2b00      	cmp	r3, #0
 8003740:	d12f      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003742:	4b72      	ldr	r3, [pc, #456]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800374a:	4a70      	ldr	r2, [pc, #448]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 800374c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003750:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e024      	b.n	80037a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d107      	bne.n	8003770 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003760:	4b6a      	ldr	r3, [pc, #424]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0c6      	b.n	80038fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003770:	4b66      	ldr	r3, [pc, #408]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0be      	b.n	80038fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003780:	f000 f8ce 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8003784:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4a61      	ldr	r2, [pc, #388]	@ (8003910 <HAL_RCC_ClockConfig+0x268>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d909      	bls.n	80037a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800378e:	4b5f      	ldr	r3, [pc, #380]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003796:	4a5d      	ldr	r2, [pc, #372]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800379c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	4b5a      	ldr	r3, [pc, #360]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 0203 	bic.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4957      	ldr	r1, [pc, #348]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b4:	f7fe fae2 	bl	8001d7c <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037bc:	f7fe fade 	bl	8001d7c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e095      	b.n	80038fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	4b4e      	ldr	r3, [pc, #312]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 020c 	and.w	r2, r3, #12
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1eb      	bne.n	80037bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d023      	beq.n	8003838 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037fc:	4b43      	ldr	r3, [pc, #268]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a42      	ldr	r2, [pc, #264]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003802:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003806:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003814:	4b3d      	ldr	r3, [pc, #244]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800381c:	4a3b      	ldr	r2, [pc, #236]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 800381e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003822:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b39      	ldr	r3, [pc, #228]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4936      	ldr	r1, [pc, #216]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
 8003836:	e008      	b.n	800384a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b80      	cmp	r3, #128	@ 0x80
 800383c:	d105      	bne.n	800384a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800383e:	4b33      	ldr	r3, [pc, #204]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	4a32      	ldr	r2, [pc, #200]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 8003844:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003848:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800384a:	4b2f      	ldr	r3, [pc, #188]	@ (8003908 <HAL_RCC_ClockConfig+0x260>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d21d      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003858:	4b2b      	ldr	r3, [pc, #172]	@ (8003908 <HAL_RCC_ClockConfig+0x260>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 020f 	bic.w	r2, r3, #15
 8003860:	4929      	ldr	r1, [pc, #164]	@ (8003908 <HAL_RCC_ClockConfig+0x260>)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003868:	f7fe fa88 	bl	8001d7c <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	e00a      	b.n	8003886 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003870:	f7fe fa84 	bl	8001d7c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e03b      	b.n	80038fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b20      	ldr	r3, [pc, #128]	@ (8003908 <HAL_RCC_ClockConfig+0x260>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d1ed      	bne.n	8003870 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a0:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4917      	ldr	r1, [pc, #92]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038be:	4b13      	ldr	r3, [pc, #76]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	490f      	ldr	r1, [pc, #60]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038d2:	f000 f825 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <HAL_RCC_ClockConfig+0x264>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	490c      	ldr	r1, [pc, #48]	@ (8003914 <HAL_RCC_ClockConfig+0x26c>)
 80038e4:	5ccb      	ldrb	r3, [r1, r3]
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	fa22 f303 	lsr.w	r3, r2, r3
 80038ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003918 <HAL_RCC_ClockConfig+0x270>)
 80038f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038f2:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <HAL_RCC_ClockConfig+0x274>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe f9f4 	bl	8001ce4 <HAL_InitTick>
 80038fc:	4603      	mov	r3, r0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40022000 	.word	0x40022000
 800390c:	40021000 	.word	0x40021000
 8003910:	04c4b400 	.word	0x04c4b400
 8003914:	0800b160 	.word	0x0800b160
 8003918:	20000000 	.word	0x20000000
 800391c:	20000004 	.word	0x20000004

08003920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003926:	4b2c      	ldr	r3, [pc, #176]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d102      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003932:	4b2a      	ldr	r3, [pc, #168]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	e047      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003938:	4b27      	ldr	r3, [pc, #156]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d102      	bne.n	800394a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003944:	4b26      	ldr	r3, [pc, #152]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	e03e      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800394a:	4b23      	ldr	r3, [pc, #140]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d136      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003956:	4b20      	ldr	r3, [pc, #128]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003960:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	3301      	adds	r3, #1
 800396c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d10c      	bne.n	800398e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003974:	4a1a      	ldr	r2, [pc, #104]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	4a16      	ldr	r2, [pc, #88]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800397e:	68d2      	ldr	r2, [r2, #12]
 8003980:	0a12      	lsrs	r2, r2, #8
 8003982:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	617b      	str	r3, [r7, #20]
      break;
 800398c:	e00c      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800398e:	4a13      	ldr	r2, [pc, #76]	@ (80039dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	fbb2 f3f3 	udiv	r3, r2, r3
 8003996:	4a10      	ldr	r2, [pc, #64]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	0a12      	lsrs	r2, r2, #8
 800399c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
      break;
 80039a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0e5b      	lsrs	r3, r3, #25
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	3301      	adds	r3, #1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e001      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039c8:	693b      	ldr	r3, [r7, #16]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	00f42400 	.word	0x00f42400
 80039e0:	007a1200 	.word	0x007a1200

080039e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039e8:	4b03      	ldr	r3, [pc, #12]	@ (80039f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000000 	.word	0x20000000

080039fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a00:	f7ff fff0 	bl	80039e4 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4904      	ldr	r1, [pc, #16]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	0800b170 	.word	0x0800b170

08003a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a2c:	f7ff ffda 	bl	80039e4 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0adb      	lsrs	r3, r3, #11
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4904      	ldr	r1, [pc, #16]	@ (8003a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	0800b170 	.word	0x0800b170

08003a54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	3301      	adds	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d10c      	bne.n	8003a92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a78:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a80:	4a14      	ldr	r2, [pc, #80]	@ (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a82:	68d2      	ldr	r2, [r2, #12]
 8003a84:	0a12      	lsrs	r2, r2, #8
 8003a86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	617b      	str	r3, [r7, #20]
    break;
 8003a90:	e00c      	b.n	8003aac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a92:	4a12      	ldr	r2, [pc, #72]	@ (8003adc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a9c:	68d2      	ldr	r2, [r2, #12]
 8003a9e:	0a12      	lsrs	r2, r2, #8
 8003aa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003aa4:	fb02 f303 	mul.w	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]
    break;
 8003aaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aac:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	0e5b      	lsrs	r3, r3, #25
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ac6:	687b      	ldr	r3, [r7, #4]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	007a1200 	.word	0x007a1200
 8003adc:	00f42400 	.word	0x00f42400

08003ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ae8:	2300      	movs	r3, #0
 8003aea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aec:	2300      	movs	r3, #0
 8003aee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8098 	beq.w	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4b43      	ldr	r3, [pc, #268]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10d      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	4b40      	ldr	r3, [pc, #256]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b12:	4a3f      	ldr	r2, [pc, #252]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b26:	2301      	movs	r3, #1
 8003b28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a39      	ldr	r2, [pc, #228]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b36:	f7fe f921 	bl	8001d7c <HAL_GetTick>
 8003b3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b3c:	e009      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fe f91d 	bl	8001d7c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d902      	bls.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	74fb      	strb	r3, [r7, #19]
        break;
 8003b50:	e005      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b52:	4b30      	ldr	r3, [pc, #192]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0ef      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d159      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b64:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01e      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d019      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b80:	4b23      	ldr	r3, [pc, #140]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b8c:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	4a1f      	ldr	r2, [pc, #124]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bac:	4a18      	ldr	r2, [pc, #96]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f8dd 	bl	8001d7c <HAL_GetTick>
 8003bc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc4:	e00b      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fe f8d9 	bl	8001d7c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d902      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	74fb      	strb	r3, [r7, #19]
            break;
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bde:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ec      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf2:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c00:	4903      	ldr	r1, [pc, #12]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c08:	e008      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	74bb      	strb	r3, [r7, #18]
 8003c0e:	e005      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c1c:	7c7b      	ldrb	r3, [r7, #17]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c22:	4ba6      	ldr	r3, [pc, #664]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c26:	4aa5      	ldr	r2, [pc, #660]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c3a:	4ba0      	ldr	r3, [pc, #640]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	f023 0203 	bic.w	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	499c      	ldr	r1, [pc, #624]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c5c:	4b97      	ldr	r3, [pc, #604]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c62:	f023 020c 	bic.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	4994      	ldr	r1, [pc, #592]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	498b      	ldr	r1, [pc, #556]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ca0:	4b86      	ldr	r3, [pc, #536]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	4983      	ldr	r1, [pc, #524]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cc2:	4b7e      	ldr	r3, [pc, #504]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	497a      	ldr	r1, [pc, #488]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ce4:	4b75      	ldr	r3, [pc, #468]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	4972      	ldr	r1, [pc, #456]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d06:	4b6d      	ldr	r3, [pc, #436]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	4969      	ldr	r1, [pc, #420]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d28:	4b64      	ldr	r3, [pc, #400]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4961      	ldr	r1, [pc, #388]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	4958      	ldr	r1, [pc, #352]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d015      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d6c:	4b53      	ldr	r3, [pc, #332]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7a:	4950      	ldr	r1, [pc, #320]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4a4a      	ldr	r2, [pc, #296]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d015      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003da4:	4b45      	ldr	r3, [pc, #276]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003daa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	4942      	ldr	r1, [pc, #264]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d015      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ddc:	4b37      	ldr	r3, [pc, #220]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	4934      	ldr	r1, [pc, #208]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dfa:	d105      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4a2e      	ldr	r2, [pc, #184]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d015      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e14:	4b29      	ldr	r3, [pc, #164]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e22:	4926      	ldr	r1, [pc, #152]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e32:	d105      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e34:	4b21      	ldr	r3, [pc, #132]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a20      	ldr	r2, [pc, #128]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d015      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5a:	4918      	ldr	r1, [pc, #96]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e6c:	4b13      	ldr	r3, [pc, #76]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d015      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e84:	4b0d      	ldr	r3, [pc, #52]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	490a      	ldr	r1, [pc, #40]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ea4:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a04      	ldr	r2, [pc, #16]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003eb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e09d      	b.n	800400e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d108      	bne.n	8003eec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee2:	d009      	beq.n	8003ef8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	61da      	str	r2, [r3, #28]
 8003eea:	e005      	b.n	8003ef8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd fbe0 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f38:	d902      	bls.n	8003f40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e002      	b.n	8003f46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003f4e:	d007      	beq.n	8003f60 <HAL_SPI_Init+0xa0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa2:	ea42 0103 	orr.w	r1, r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	0c1b      	lsrs	r3, r3, #16
 8003fbc:	f003 0204 	and.w	r2, r3, #4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003fdc:	ea42 0103 	orr.w	r1, r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ffc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b088      	sub	sp, #32
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4613      	mov	r3, r2
 8004024:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_SPI_Transmit+0x22>
 8004034:	2302      	movs	r3, #2
 8004036:	e15f      	b.n	80042f8 <HAL_SPI_Transmit+0x2e2>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004040:	f7fd fe9c 	bl	8001d7c <HAL_GetTick>
 8004044:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d002      	beq.n	800405c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	77fb      	strb	r3, [r7, #31]
    goto error;
 800405a:	e148      	b.n	80042ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Transmit+0x52>
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800406c:	e13f      	b.n	80042ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2203      	movs	r2, #3
 8004072:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b8:	d10f      	bne.n	80040da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b40      	cmp	r3, #64	@ 0x40
 80040e6:	d007      	beq.n	80040f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004100:	d94f      	bls.n	80041a2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_SPI_Transmit+0xfa>
 800410a:	8afb      	ldrh	r3, [r7, #22]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d142      	bne.n	8004196 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004114:	881a      	ldrh	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004134:	e02f      	b.n	8004196 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b02      	cmp	r3, #2
 8004142:	d112      	bne.n	800416a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004148:	881a      	ldrh	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	1c9a      	adds	r2, r3, #2
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004168:	e015      	b.n	8004196 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800416a:	f7fd fe07 	bl	8001d7c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d803      	bhi.n	8004182 <HAL_SPI_Transmit+0x16c>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d102      	bne.n	8004188 <HAL_SPI_Transmit+0x172>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d106      	bne.n	8004196 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004194:	e0ab      	b.n	80042ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ca      	bne.n	8004136 <HAL_SPI_Transmit+0x120>
 80041a0:	e080      	b.n	80042a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_SPI_Transmit+0x19a>
 80041aa:	8afb      	ldrh	r3, [r7, #22]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d174      	bne.n	800429a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d912      	bls.n	80041e0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041be:	881a      	ldrh	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ca:	1c9a      	adds	r2, r3, #2
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b02      	subs	r3, #2
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041de:	e05c      	b.n	800429a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	7812      	ldrb	r2, [r2, #0]
 80041ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004206:	e048      	b.n	800429a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	d12b      	bne.n	800426e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d912      	bls.n	8004246 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004224:	881a      	ldrh	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	1c9a      	adds	r2, r3, #2
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b02      	subs	r3, #2
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004244:	e029      	b.n	800429a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800426c:	e015      	b.n	800429a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800426e:	f7fd fd85 	bl	8001d7c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d803      	bhi.n	8004286 <HAL_SPI_Transmit+0x270>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d102      	bne.n	800428c <HAL_SPI_Transmit+0x276>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d106      	bne.n	800429a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004298:	e029      	b.n	80042ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1b1      	bne.n	8004208 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	6839      	ldr	r1, [r7, #0]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f947 	bl	800453c <SPI_EndRxTxTransaction>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e003      	b.n	80042ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80042f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004310:	f7fd fd34 	bl	8001d7c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	4413      	add	r3, r2
 800431e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004320:	f7fd fd2c 	bl	8001d7c <HAL_GetTick>
 8004324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004326:	4b39      	ldr	r3, [pc, #228]	@ (800440c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	015b      	lsls	r3, r3, #5
 800432c:	0d1b      	lsrs	r3, r3, #20
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	fb02 f303 	mul.w	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004336:	e054      	b.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d050      	beq.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004340:	f7fd fd1c 	bl	8001d7c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	429a      	cmp	r2, r3
 800434e:	d902      	bls.n	8004356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d13d      	bne.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800436e:	d111      	bne.n	8004394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004378:	d004      	beq.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004382:	d107      	bne.n	8004394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439c:	d10f      	bne.n	80043be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e017      	b.n	8004402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3b01      	subs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4013      	ands	r3, r2
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	bf0c      	ite	eq
 80043f2:	2301      	moveq	r3, #1
 80043f4:	2300      	movne	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	461a      	mov	r2, r3
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d19b      	bne.n	8004338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000000 	.word	0x20000000

08004410 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	@ 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004422:	f7fd fcab 	bl	8001d7c <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	4413      	add	r3, r2
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004432:	f7fd fca3 	bl	8001d7c <HAL_GetTick>
 8004436:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004440:	4b3d      	ldr	r3, [pc, #244]	@ (8004538 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00da      	lsls	r2, r3, #3
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	0d1b      	lsrs	r3, r3, #20
 8004450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004458:	e060      	b.n	800451c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004460:	d107      	bne.n	8004472 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004470:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d050      	beq.n	800451c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800447a:	f7fd fc7f 	bl	8001d7c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004486:	429a      	cmp	r2, r3
 8004488:	d902      	bls.n	8004490 <SPI_WaitFifoStateUntilTimeout+0x80>
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	2b00      	cmp	r3, #0
 800448e:	d13d      	bne.n	800450c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800449e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044a8:	d111      	bne.n	80044ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b2:	d004      	beq.n	80044be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044bc:	d107      	bne.n	80044ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d6:	d10f      	bne.n	80044f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e010      	b.n	800452e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	3b01      	subs	r3, #1
 800451a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	d196      	bne.n	800445a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3728      	adds	r7, #40	@ 0x28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000000 	.word	0x20000000

0800453c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2200      	movs	r2, #0
 8004550:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff ff5b 	bl	8004410 <SPI_WaitFifoStateUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e027      	b.n	80045c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2200      	movs	r2, #0
 8004578:	2180      	movs	r1, #128	@ 0x80
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fec0 	bl	8004300 <SPI_WaitFlagStateUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e014      	b.n	80045c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff ff34 	bl	8004410 <SPI_WaitFifoStateUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e000      	b.n	80045c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e049      	b.n	800466e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fd fa3a 	bl	8001a68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	4619      	mov	r1, r3
 8004606:	4610      	mov	r0, r2
 8004608:	f000 f94a 	bl	80048a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004692:	2302      	movs	r3, #2
 8004694:	e0ff      	b.n	8004896 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b14      	cmp	r3, #20
 80046a2:	f200 80f0 	bhi.w	8004886 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046a6:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	08004701 	.word	0x08004701
 80046b0:	08004887 	.word	0x08004887
 80046b4:	08004887 	.word	0x08004887
 80046b8:	08004887 	.word	0x08004887
 80046bc:	08004741 	.word	0x08004741
 80046c0:	08004887 	.word	0x08004887
 80046c4:	08004887 	.word	0x08004887
 80046c8:	08004887 	.word	0x08004887
 80046cc:	08004783 	.word	0x08004783
 80046d0:	08004887 	.word	0x08004887
 80046d4:	08004887 	.word	0x08004887
 80046d8:	08004887 	.word	0x08004887
 80046dc:	080047c3 	.word	0x080047c3
 80046e0:	08004887 	.word	0x08004887
 80046e4:	08004887 	.word	0x08004887
 80046e8:	08004887 	.word	0x08004887
 80046ec:	08004805 	.word	0x08004805
 80046f0:	08004887 	.word	0x08004887
 80046f4:	08004887 	.word	0x08004887
 80046f8:	08004887 	.word	0x08004887
 80046fc:	08004845 	.word	0x08004845
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f966 	bl	80049d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0208 	orr.w	r2, r2, #8
 800471a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6999      	ldr	r1, [r3, #24]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	619a      	str	r2, [r3, #24]
      break;
 800473e:	e0a5      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f9d6 	bl	8004af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800475a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6999      	ldr	r1, [r3, #24]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	619a      	str	r2, [r3, #24]
      break;
 8004780:	e084      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fa3f 	bl	8004c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0208 	orr.w	r2, r2, #8
 800479c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0204 	bic.w	r2, r2, #4
 80047ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69d9      	ldr	r1, [r3, #28]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	61da      	str	r2, [r3, #28]
      break;
 80047c0:	e064      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 faa7 	bl	8004d1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69d9      	ldr	r1, [r3, #28]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	021a      	lsls	r2, r3, #8
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	61da      	str	r2, [r3, #28]
      break;
 8004802:	e043      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fb10 	bl	8004e30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0208 	orr.w	r2, r2, #8
 800481e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0204 	bic.w	r2, r2, #4
 800482e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004842:	e023      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fb54 	bl	8004ef8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800485e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800486e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	021a      	lsls	r2, r3, #8
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004884:	e002      	b.n	800488c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]
      break;
 800488a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004894:	7dfb      	ldrb	r3, [r7, #23]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop

080048a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a42      	ldr	r2, [pc, #264]	@ (80049bc <TIM_Base_SetConfig+0x11c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00f      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048be:	d00b      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3f      	ldr	r2, [pc, #252]	@ (80049c0 <TIM_Base_SetConfig+0x120>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3e      	ldr	r2, [pc, #248]	@ (80049c4 <TIM_Base_SetConfig+0x124>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0x38>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a3d      	ldr	r2, [pc, #244]	@ (80049c8 <TIM_Base_SetConfig+0x128>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d108      	bne.n	80048ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a33      	ldr	r2, [pc, #204]	@ (80049bc <TIM_Base_SetConfig+0x11c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01b      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f8:	d017      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a30      	ldr	r2, [pc, #192]	@ (80049c0 <TIM_Base_SetConfig+0x120>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2f      	ldr	r2, [pc, #188]	@ (80049c4 <TIM_Base_SetConfig+0x124>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00f      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2e      	ldr	r2, [pc, #184]	@ (80049c8 <TIM_Base_SetConfig+0x128>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00b      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2d      	ldr	r2, [pc, #180]	@ (80049cc <TIM_Base_SetConfig+0x12c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2c      	ldr	r2, [pc, #176]	@ (80049d0 <TIM_Base_SetConfig+0x130>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a2b      	ldr	r2, [pc, #172]	@ (80049d4 <TIM_Base_SetConfig+0x134>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d108      	bne.n	800493c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a16      	ldr	r2, [pc, #88]	@ (80049bc <TIM_Base_SetConfig+0x11c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00f      	beq.n	8004988 <TIM_Base_SetConfig+0xe8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <TIM_Base_SetConfig+0x128>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00b      	beq.n	8004988 <TIM_Base_SetConfig+0xe8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <TIM_Base_SetConfig+0x12c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <TIM_Base_SetConfig+0xe8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a15      	ldr	r2, [pc, #84]	@ (80049d0 <TIM_Base_SetConfig+0x130>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_Base_SetConfig+0xe8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <TIM_Base_SetConfig+0x134>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d103      	bne.n	8004990 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d105      	bne.n	80049ae <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f023 0201 	bic.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	611a      	str	r2, [r3, #16]
  }
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40013400 	.word	0x40013400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800

080049d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f023 0201 	bic.w	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 0302 	bic.w	r3, r3, #2
 8004a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a2c      	ldr	r2, [pc, #176]	@ (8004ae4 <TIM_OC1_SetConfig+0x10c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00f      	beq.n	8004a58 <TIM_OC1_SetConfig+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae8 <TIM_OC1_SetConfig+0x110>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00b      	beq.n	8004a58 <TIM_OC1_SetConfig+0x80>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <TIM_OC1_SetConfig+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_OC1_SetConfig+0x80>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a29      	ldr	r2, [pc, #164]	@ (8004af0 <TIM_OC1_SetConfig+0x118>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_OC1_SetConfig+0x80>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a28      	ldr	r2, [pc, #160]	@ (8004af4 <TIM_OC1_SetConfig+0x11c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10c      	bne.n	8004a72 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0308 	bic.w	r3, r3, #8
 8004a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0304 	bic.w	r3, r3, #4
 8004a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <TIM_OC1_SetConfig+0x10c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00f      	beq.n	8004a9a <TIM_OC1_SetConfig+0xc2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <TIM_OC1_SetConfig+0x110>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <TIM_OC1_SetConfig+0xc2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <TIM_OC1_SetConfig+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_OC1_SetConfig+0xc2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a18      	ldr	r2, [pc, #96]	@ (8004af0 <TIM_OC1_SetConfig+0x118>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_OC1_SetConfig+0xc2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a17      	ldr	r2, [pc, #92]	@ (8004af4 <TIM_OC1_SetConfig+0x11c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d111      	bne.n	8004abe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	621a      	str	r2, [r3, #32]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40013400 	.word	0x40013400
 8004aec:	40014000 	.word	0x40014000
 8004af0:	40014400 	.word	0x40014400
 8004af4:	40014800 	.word	0x40014800

08004af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	f023 0210 	bic.w	r2, r3, #16
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0320 	bic.w	r3, r3, #32
 8004b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a28      	ldr	r2, [pc, #160]	@ (8004bf8 <TIM_OC2_SetConfig+0x100>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_OC2_SetConfig+0x6c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a27      	ldr	r2, [pc, #156]	@ (8004bfc <TIM_OC2_SetConfig+0x104>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d10d      	bne.n	8004b80 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <TIM_OC2_SetConfig+0x100>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00f      	beq.n	8004ba8 <TIM_OC2_SetConfig+0xb0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <TIM_OC2_SetConfig+0x104>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_OC2_SetConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	@ (8004c00 <TIM_OC2_SetConfig+0x108>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_OC2_SetConfig+0xb0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c04 <TIM_OC2_SetConfig+0x10c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_OC2_SetConfig+0xb0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a19      	ldr	r2, [pc, #100]	@ (8004c08 <TIM_OC2_SetConfig+0x110>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d113      	bne.n	8004bd0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40013400 	.word	0x40013400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800

08004c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0303 	bic.w	r3, r3, #3
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a27      	ldr	r2, [pc, #156]	@ (8004d08 <TIM_OC3_SetConfig+0xfc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d003      	beq.n	8004c76 <TIM_OC3_SetConfig+0x6a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a26      	ldr	r2, [pc, #152]	@ (8004d0c <TIM_OC3_SetConfig+0x100>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d10d      	bne.n	8004c92 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <TIM_OC3_SetConfig+0xfc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00f      	beq.n	8004cba <TIM_OC3_SetConfig+0xae>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004d0c <TIM_OC3_SetConfig+0x100>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_OC3_SetConfig+0xae>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d10 <TIM_OC3_SetConfig+0x104>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_OC3_SetConfig+0xae>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a19      	ldr	r2, [pc, #100]	@ (8004d14 <TIM_OC3_SetConfig+0x108>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_OC3_SetConfig+0xae>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a18      	ldr	r2, [pc, #96]	@ (8004d18 <TIM_OC3_SetConfig+0x10c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d113      	bne.n	8004ce2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40013400 	.word	0x40013400
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800

08004d1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	031b      	lsls	r3, r3, #12
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a28      	ldr	r2, [pc, #160]	@ (8004e1c <TIM_OC4_SetConfig+0x100>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_OC4_SetConfig+0x6c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <TIM_OC4_SetConfig+0x104>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d10d      	bne.n	8004da4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004da2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e1c <TIM_OC4_SetConfig+0x100>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_OC4_SetConfig+0xb0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a1c      	ldr	r2, [pc, #112]	@ (8004e20 <TIM_OC4_SetConfig+0x104>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC4_SetConfig+0xb0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e24 <TIM_OC4_SetConfig+0x108>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC4_SetConfig+0xb0>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8004e28 <TIM_OC4_SetConfig+0x10c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC4_SetConfig+0xb0>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a19      	ldr	r2, [pc, #100]	@ (8004e2c <TIM_OC4_SetConfig+0x110>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d113      	bne.n	8004df4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dd2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004dda:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	019b      	lsls	r3, r3, #6
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	019b      	lsls	r3, r3, #6
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40013400 	.word	0x40013400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800

08004e30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a17      	ldr	r2, [pc, #92]	@ (8004ee4 <TIM_OC5_SetConfig+0xb4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00f      	beq.n	8004eaa <TIM_OC5_SetConfig+0x7a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a16      	ldr	r2, [pc, #88]	@ (8004ee8 <TIM_OC5_SetConfig+0xb8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_OC5_SetConfig+0x7a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a15      	ldr	r2, [pc, #84]	@ (8004eec <TIM_OC5_SetConfig+0xbc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_OC5_SetConfig+0x7a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ef0 <TIM_OC5_SetConfig+0xc0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_OC5_SetConfig+0x7a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a13      	ldr	r2, [pc, #76]	@ (8004ef4 <TIM_OC5_SetConfig+0xc4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d109      	bne.n	8004ebe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	621a      	str	r2, [r3, #32]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40013400 	.word	0x40013400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800

08004ef8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	051b      	lsls	r3, r3, #20
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a18      	ldr	r2, [pc, #96]	@ (8004fb0 <TIM_OC6_SetConfig+0xb8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00f      	beq.n	8004f74 <TIM_OC6_SetConfig+0x7c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a17      	ldr	r2, [pc, #92]	@ (8004fb4 <TIM_OC6_SetConfig+0xbc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00b      	beq.n	8004f74 <TIM_OC6_SetConfig+0x7c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a16      	ldr	r2, [pc, #88]	@ (8004fb8 <TIM_OC6_SetConfig+0xc0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <TIM_OC6_SetConfig+0x7c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a15      	ldr	r2, [pc, #84]	@ (8004fbc <TIM_OC6_SetConfig+0xc4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_OC6_SetConfig+0x7c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a14      	ldr	r2, [pc, #80]	@ (8004fc0 <TIM_OC6_SetConfig+0xc8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d109      	bne.n	8004f88 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	029b      	lsls	r3, r3, #10
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40013400 	.word	0x40013400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800

08004fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e065      	b.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a2c      	ldr	r2, [pc, #176]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2b      	ldr	r2, [pc, #172]	@ (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d108      	bne.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1b      	ldr	r2, [pc, #108]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d018      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005052:	d013      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a12      	ldr	r2, [pc, #72]	@ (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a13      	ldr	r2, [pc, #76]	@ (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d10c      	bne.n	8005096 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	4313      	orrs	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40014000 	.word	0x40014000

080050c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e042      	b.n	8005160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fc fd5f 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2224      	movs	r2, #36	@ 0x24
 80050f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 faf4 	bl	8005700 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f825 	bl	8005168 <UART_SetConfig>
 800511e:	4603      	mov	r3, r0
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e01b      	b.n	8005160 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb73 	bl	8005844 <UART_CheckIdleState>
 800515e:	4603      	mov	r3, r0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800516c:	b08c      	sub	sp, #48	@ 0x30
 800516e:	af00      	add	r7, sp, #0
 8005170:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4313      	orrs	r3, r2
 800518e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4bab      	ldr	r3, [pc, #684]	@ (8005444 <UART_SetConfig+0x2dc>)
 8005198:	4013      	ands	r3, r2
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4aa0      	ldr	r2, [pc, #640]	@ (8005448 <UART_SetConfig+0x2e0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051d0:	4313      	orrs	r3, r2
 80051d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80051de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	f023 010f 	bic.w	r1, r3, #15
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a91      	ldr	r2, [pc, #580]	@ (800544c <UART_SetConfig+0x2e4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d125      	bne.n	8005258 <UART_SetConfig+0xf0>
 800520c:	4b90      	ldr	r3, [pc, #576]	@ (8005450 <UART_SetConfig+0x2e8>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b03      	cmp	r3, #3
 8005218:	d81a      	bhi.n	8005250 <UART_SetConfig+0xe8>
 800521a:	a201      	add	r2, pc, #4	@ (adr r2, 8005220 <UART_SetConfig+0xb8>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005231 	.word	0x08005231
 8005224:	08005241 	.word	0x08005241
 8005228:	08005239 	.word	0x08005239
 800522c:	08005249 	.word	0x08005249
 8005230:	2301      	movs	r3, #1
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005236:	e0d6      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005238:	2302      	movs	r3, #2
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523e:	e0d2      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005240:	2304      	movs	r3, #4
 8005242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005246:	e0ce      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005248:	2308      	movs	r3, #8
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524e:	e0ca      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005250:	2310      	movs	r3, #16
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005256:	e0c6      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a7d      	ldr	r2, [pc, #500]	@ (8005454 <UART_SetConfig+0x2ec>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d138      	bne.n	80052d4 <UART_SetConfig+0x16c>
 8005262:	4b7b      	ldr	r3, [pc, #492]	@ (8005450 <UART_SetConfig+0x2e8>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b0c      	cmp	r3, #12
 800526e:	d82d      	bhi.n	80052cc <UART_SetConfig+0x164>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <UART_SetConfig+0x110>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	080052ad 	.word	0x080052ad
 800527c:	080052cd 	.word	0x080052cd
 8005280:	080052cd 	.word	0x080052cd
 8005284:	080052cd 	.word	0x080052cd
 8005288:	080052bd 	.word	0x080052bd
 800528c:	080052cd 	.word	0x080052cd
 8005290:	080052cd 	.word	0x080052cd
 8005294:	080052cd 	.word	0x080052cd
 8005298:	080052b5 	.word	0x080052b5
 800529c:	080052cd 	.word	0x080052cd
 80052a0:	080052cd 	.word	0x080052cd
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052c5 	.word	0x080052c5
 80052ac:	2300      	movs	r3, #0
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b2:	e098      	b.n	80053e6 <UART_SetConfig+0x27e>
 80052b4:	2302      	movs	r3, #2
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ba:	e094      	b.n	80053e6 <UART_SetConfig+0x27e>
 80052bc:	2304      	movs	r3, #4
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c2:	e090      	b.n	80053e6 <UART_SetConfig+0x27e>
 80052c4:	2308      	movs	r3, #8
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ca:	e08c      	b.n	80053e6 <UART_SetConfig+0x27e>
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e088      	b.n	80053e6 <UART_SetConfig+0x27e>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5f      	ldr	r2, [pc, #380]	@ (8005458 <UART_SetConfig+0x2f0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d125      	bne.n	800532a <UART_SetConfig+0x1c2>
 80052de:	4b5c      	ldr	r3, [pc, #368]	@ (8005450 <UART_SetConfig+0x2e8>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80052e8:	2b30      	cmp	r3, #48	@ 0x30
 80052ea:	d016      	beq.n	800531a <UART_SetConfig+0x1b2>
 80052ec:	2b30      	cmp	r3, #48	@ 0x30
 80052ee:	d818      	bhi.n	8005322 <UART_SetConfig+0x1ba>
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d00a      	beq.n	800530a <UART_SetConfig+0x1a2>
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d814      	bhi.n	8005322 <UART_SetConfig+0x1ba>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <UART_SetConfig+0x19a>
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d008      	beq.n	8005312 <UART_SetConfig+0x1aa>
 8005300:	e00f      	b.n	8005322 <UART_SetConfig+0x1ba>
 8005302:	2300      	movs	r3, #0
 8005304:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005308:	e06d      	b.n	80053e6 <UART_SetConfig+0x27e>
 800530a:	2302      	movs	r3, #2
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005310:	e069      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005312:	2304      	movs	r3, #4
 8005314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005318:	e065      	b.n	80053e6 <UART_SetConfig+0x27e>
 800531a:	2308      	movs	r3, #8
 800531c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005320:	e061      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005322:	2310      	movs	r3, #16
 8005324:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005328:	e05d      	b.n	80053e6 <UART_SetConfig+0x27e>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a4b      	ldr	r2, [pc, #300]	@ (800545c <UART_SetConfig+0x2f4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d125      	bne.n	8005380 <UART_SetConfig+0x218>
 8005334:	4b46      	ldr	r3, [pc, #280]	@ (8005450 <UART_SetConfig+0x2e8>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800533e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005340:	d016      	beq.n	8005370 <UART_SetConfig+0x208>
 8005342:	2bc0      	cmp	r3, #192	@ 0xc0
 8005344:	d818      	bhi.n	8005378 <UART_SetConfig+0x210>
 8005346:	2b80      	cmp	r3, #128	@ 0x80
 8005348:	d00a      	beq.n	8005360 <UART_SetConfig+0x1f8>
 800534a:	2b80      	cmp	r3, #128	@ 0x80
 800534c:	d814      	bhi.n	8005378 <UART_SetConfig+0x210>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <UART_SetConfig+0x1f0>
 8005352:	2b40      	cmp	r3, #64	@ 0x40
 8005354:	d008      	beq.n	8005368 <UART_SetConfig+0x200>
 8005356:	e00f      	b.n	8005378 <UART_SetConfig+0x210>
 8005358:	2300      	movs	r3, #0
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535e:	e042      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005360:	2302      	movs	r3, #2
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005366:	e03e      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005368:	2304      	movs	r3, #4
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536e:	e03a      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005370:	2308      	movs	r3, #8
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005376:	e036      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005378:	2310      	movs	r3, #16
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537e:	e032      	b.n	80053e6 <UART_SetConfig+0x27e>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a30      	ldr	r2, [pc, #192]	@ (8005448 <UART_SetConfig+0x2e0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d12a      	bne.n	80053e0 <UART_SetConfig+0x278>
 800538a:	4b31      	ldr	r3, [pc, #196]	@ (8005450 <UART_SetConfig+0x2e8>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005390:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005394:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005398:	d01a      	beq.n	80053d0 <UART_SetConfig+0x268>
 800539a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800539e:	d81b      	bhi.n	80053d8 <UART_SetConfig+0x270>
 80053a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053a4:	d00c      	beq.n	80053c0 <UART_SetConfig+0x258>
 80053a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053aa:	d815      	bhi.n	80053d8 <UART_SetConfig+0x270>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <UART_SetConfig+0x250>
 80053b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053b4:	d008      	beq.n	80053c8 <UART_SetConfig+0x260>
 80053b6:	e00f      	b.n	80053d8 <UART_SetConfig+0x270>
 80053b8:	2300      	movs	r3, #0
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053be:	e012      	b.n	80053e6 <UART_SetConfig+0x27e>
 80053c0:	2302      	movs	r3, #2
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c6:	e00e      	b.n	80053e6 <UART_SetConfig+0x27e>
 80053c8:	2304      	movs	r3, #4
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ce:	e00a      	b.n	80053e6 <UART_SetConfig+0x27e>
 80053d0:	2308      	movs	r3, #8
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d6:	e006      	b.n	80053e6 <UART_SetConfig+0x27e>
 80053d8:	2310      	movs	r3, #16
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053de:	e002      	b.n	80053e6 <UART_SetConfig+0x27e>
 80053e0:	2310      	movs	r3, #16
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <UART_SetConfig+0x2e0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	f040 80a8 	bne.w	8005542 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d834      	bhi.n	8005464 <UART_SetConfig+0x2fc>
 80053fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005400 <UART_SetConfig+0x298>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005425 	.word	0x08005425
 8005404:	08005465 	.word	0x08005465
 8005408:	0800542d 	.word	0x0800542d
 800540c:	08005465 	.word	0x08005465
 8005410:	08005433 	.word	0x08005433
 8005414:	08005465 	.word	0x08005465
 8005418:	08005465 	.word	0x08005465
 800541c:	08005465 	.word	0x08005465
 8005420:	0800543b 	.word	0x0800543b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005424:	f7fe faea 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800542a:	e021      	b.n	8005470 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800542c:	4b0c      	ldr	r3, [pc, #48]	@ (8005460 <UART_SetConfig+0x2f8>)
 800542e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005430:	e01e      	b.n	8005470 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005432:	f7fe fa75 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8005436:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005438:	e01a      	b.n	8005470 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800543e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005440:	e016      	b.n	8005470 <UART_SetConfig+0x308>
 8005442:	bf00      	nop
 8005444:	cfff69f3 	.word	0xcfff69f3
 8005448:	40008000 	.word	0x40008000
 800544c:	40013800 	.word	0x40013800
 8005450:	40021000 	.word	0x40021000
 8005454:	40004400 	.word	0x40004400
 8005458:	40004800 	.word	0x40004800
 800545c:	40004c00 	.word	0x40004c00
 8005460:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800546e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 812a 	beq.w	80056cc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	4a9e      	ldr	r2, [pc, #632]	@ (80056f8 <UART_SetConfig+0x590>)
 800547e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005482:	461a      	mov	r2, r3
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	fbb3 f3f2 	udiv	r3, r3, r2
 800548a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	4413      	add	r3, r2
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	429a      	cmp	r2, r3
 800549a:	d305      	bcc.n	80054a8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d903      	bls.n	80054b0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054ae:	e10d      	b.n	80056cc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	2200      	movs	r2, #0
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	60fa      	str	r2, [r7, #12]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	4a8e      	ldr	r2, [pc, #568]	@ (80056f8 <UART_SetConfig+0x590>)
 80054be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2200      	movs	r2, #0
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054d2:	f7fb fc01 	bl	8000cd8 <__aeabi_uldivmod>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	020b      	lsls	r3, r1, #8
 80054e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054ec:	0202      	lsls	r2, r0, #8
 80054ee:	6979      	ldr	r1, [r7, #20]
 80054f0:	6849      	ldr	r1, [r1, #4]
 80054f2:	0849      	lsrs	r1, r1, #1
 80054f4:	2000      	movs	r0, #0
 80054f6:	460c      	mov	r4, r1
 80054f8:	4605      	mov	r5, r0
 80054fa:	eb12 0804 	adds.w	r8, r2, r4
 80054fe:	eb43 0905 	adc.w	r9, r3, r5
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	469a      	mov	sl, r3
 800550a:	4693      	mov	fp, r2
 800550c:	4652      	mov	r2, sl
 800550e:	465b      	mov	r3, fp
 8005510:	4640      	mov	r0, r8
 8005512:	4649      	mov	r1, r9
 8005514:	f7fb fbe0 	bl	8000cd8 <__aeabi_uldivmod>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4613      	mov	r3, r2
 800551e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005526:	d308      	bcc.n	800553a <UART_SetConfig+0x3d2>
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800552e:	d204      	bcs.n	800553a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6a3a      	ldr	r2, [r7, #32]
 8005536:	60da      	str	r2, [r3, #12]
 8005538:	e0c8      	b.n	80056cc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005540:	e0c4      	b.n	80056cc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554a:	d167      	bne.n	800561c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800554c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005550:	2b08      	cmp	r3, #8
 8005552:	d828      	bhi.n	80055a6 <UART_SetConfig+0x43e>
 8005554:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <UART_SetConfig+0x3f4>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	080055a7 	.word	0x080055a7
 800556c:	08005597 	.word	0x08005597
 8005570:	080055a7 	.word	0x080055a7
 8005574:	080055a7 	.word	0x080055a7
 8005578:	080055a7 	.word	0x080055a7
 800557c:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fe fa3c 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005584:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005586:	e014      	b.n	80055b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fe fa4e 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 800558c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800558e:	e010      	b.n	80055b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b5a      	ldr	r3, [pc, #360]	@ (80056fc <UART_SetConfig+0x594>)
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005594:	e00d      	b.n	80055b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fe f9c3 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 800559a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800559c:	e009      	b.n	80055b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055a4:	e005      	b.n	80055b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8089 	beq.w	80056cc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	4a4e      	ldr	r2, [pc, #312]	@ (80056f8 <UART_SetConfig+0x590>)
 80055c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80055cc:	005a      	lsls	r2, r3, #1
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	441a      	add	r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	2b0f      	cmp	r3, #15
 80055e4:	d916      	bls.n	8005614 <UART_SetConfig+0x4ac>
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ec:	d212      	bcs.n	8005614 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f023 030f 	bic.w	r3, r3, #15
 80055f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	085b      	lsrs	r3, r3, #1
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	b29a      	uxth	r2, r3
 8005604:	8bfb      	ldrh	r3, [r7, #30]
 8005606:	4313      	orrs	r3, r2
 8005608:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	8bfa      	ldrh	r2, [r7, #30]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	e05b      	b.n	80056cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800561a:	e057      	b.n	80056cc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800561c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005620:	2b08      	cmp	r3, #8
 8005622:	d828      	bhi.n	8005676 <UART_SetConfig+0x50e>
 8005624:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <UART_SetConfig+0x4c4>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	08005651 	.word	0x08005651
 8005630:	08005659 	.word	0x08005659
 8005634:	08005661 	.word	0x08005661
 8005638:	08005677 	.word	0x08005677
 800563c:	08005667 	.word	0x08005667
 8005640:	08005677 	.word	0x08005677
 8005644:	08005677 	.word	0x08005677
 8005648:	08005677 	.word	0x08005677
 800564c:	0800566f 	.word	0x0800566f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005650:	f7fe f9d4 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8005654:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005656:	e014      	b.n	8005682 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005658:	f7fe f9e6 	bl	8003a28 <HAL_RCC_GetPCLK2Freq>
 800565c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800565e:	e010      	b.n	8005682 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005660:	4b26      	ldr	r3, [pc, #152]	@ (80056fc <UART_SetConfig+0x594>)
 8005662:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005664:	e00d      	b.n	8005682 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005666:	f7fe f95b 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 800566a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800566c:	e009      	b.n	8005682 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005674:	e005      	b.n	8005682 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005680:	bf00      	nop
    }

    if (pclk != 0U)
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	2b00      	cmp	r3, #0
 8005686:	d021      	beq.n	80056cc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	4a1a      	ldr	r2, [pc, #104]	@ (80056f8 <UART_SetConfig+0x590>)
 800568e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005692:	461a      	mov	r2, r3
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	fbb3 f2f2 	udiv	r2, r3, r2
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	441a      	add	r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2b0f      	cmp	r3, #15
 80056b0:	d909      	bls.n	80056c6 <UART_SetConfig+0x55e>
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b8:	d205      	bcs.n	80056c6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60da      	str	r2, [r3, #12]
 80056c4:	e002      	b.n	80056cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2200      	movs	r2, #0
 80056e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2200      	movs	r2, #0
 80056e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3730      	adds	r7, #48	@ 0x30
 80056f0:	46bd      	mov	sp, r7
 80056f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056f6:	bf00      	nop
 80056f8:	0800b178 	.word	0x0800b178
 80056fc:	00f42400 	.word	0x00f42400

08005700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01a      	beq.n	8005816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057fe:	d10a      	bne.n	8005816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b098      	sub	sp, #96	@ 0x60
 8005848:	af02      	add	r7, sp, #8
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005854:	f7fc fa92 	bl	8001d7c <HAL_GetTick>
 8005858:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b08      	cmp	r3, #8
 8005866:	d12f      	bne.n	80058c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005868:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005870:	2200      	movs	r2, #0
 8005872:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f88e 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d022      	beq.n	80058c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005892:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005896:	653b      	str	r3, [r7, #80]	@ 0x50
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e6      	bne.n	8005882 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e063      	b.n	8005990 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d149      	bne.n	800596a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058de:	2200      	movs	r2, #0
 80058e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f857 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d03c      	beq.n	800596a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	623b      	str	r3, [r7, #32]
   return(result);
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800590e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005910:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e6      	bne.n	80058f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	60fb      	str	r3, [r7, #12]
   return(result);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3308      	adds	r3, #8
 8005940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005942:	61fa      	str	r2, [r7, #28]
 8005944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	69b9      	ldr	r1, [r7, #24]
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	617b      	str	r3, [r7, #20]
   return(result);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e5      	bne.n	8005922 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e012      	b.n	8005990 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3758      	adds	r7, #88	@ 0x58
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a8:	e04f      	b.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d04b      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fc f9e3 	bl	8001d7c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e04e      	b.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d037      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b80      	cmp	r3, #128	@ 0x80
 80059de:	d034      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xb2>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b40      	cmp	r3, #64	@ 0x40
 80059e4:	d031      	beq.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d110      	bne.n	8005a16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2208      	movs	r2, #8
 80059fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f838 	bl	8005a72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2208      	movs	r2, #8
 8005a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e029      	b.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a24:	d111      	bne.n	8005a4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f81e 	bl	8005a72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e00f      	b.n	8005a6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4013      	ands	r3, r2
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	bf0c      	ite	eq
 8005a5a:	2301      	moveq	r3, #1
 8005a5c:	2300      	movne	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d0a0      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b095      	sub	sp, #84	@ 0x54
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e6      	bne.n	8005a7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3308      	adds	r3, #8
 8005ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e3      	bne.n	8005aac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d118      	bne.n	8005b1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f023 0310 	bic.w	r3, r3, #16
 8005b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6979      	ldr	r1, [r7, #20]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	613b      	str	r3, [r7, #16]
   return(result);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e6      	bne.n	8005aec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b32:	bf00      	nop
 8005b34:	3754      	adds	r7, #84	@ 0x54
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e027      	b.n	8005ba4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2224      	movs	r2, #36	@ 0x24
 8005b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e02d      	b.n	8005c24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	@ 0x24
 8005bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0201 	bic.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f84f 	bl	8005ca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e02d      	b.n	8005ca0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2224      	movs	r2, #36	@ 0x24
 8005c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f811 	bl	8005ca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d108      	bne.n	8005cca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cc8:	e031      	b.n	8005d2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cca:	2308      	movs	r3, #8
 8005ccc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cce:	2308      	movs	r3, #8
 8005cd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	0e5b      	lsrs	r3, r3, #25
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	0f5b      	lsrs	r3, r3, #29
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
 8005cf4:	7b3a      	ldrb	r2, [r7, #12]
 8005cf6:	4911      	ldr	r1, [pc, #68]	@ (8005d3c <UARTEx_SetNbDataToProcess+0x94>)
 8005cf8:	5c8a      	ldrb	r2, [r1, r2]
 8005cfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cfe:	7b3a      	ldrb	r2, [r7, #12]
 8005d00:	490f      	ldr	r1, [pc, #60]	@ (8005d40 <UARTEx_SetNbDataToProcess+0x98>)
 8005d02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d04:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	7b7a      	ldrb	r2, [r7, #13]
 8005d14:	4909      	ldr	r1, [pc, #36]	@ (8005d3c <UARTEx_SetNbDataToProcess+0x94>)
 8005d16:	5c8a      	ldrb	r2, [r1, r2]
 8005d18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d1c:	7b7a      	ldrb	r2, [r7, #13]
 8005d1e:	4908      	ldr	r1, [pc, #32]	@ (8005d40 <UARTEx_SetNbDataToProcess+0x98>)
 8005d20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d22:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d2e:	bf00      	nop
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	0800b190 	.word	0x0800b190
 8005d40:	0800b198 	.word	0x0800b198

08005d44 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8005d4e:	1df9      	adds	r1, r7, #7
 8005d50:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005d54:	2201      	movs	r2, #1
 8005d56:	4803      	ldr	r0, [pc, #12]	@ (8005d64 <DEV_SPI_WRite+0x20>)
 8005d58:	f7fe f95d 	bl	8004016 <HAL_SPI_Transmit>
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20000254 	.word	0x20000254

08005d68 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4608      	mov	r0, r1
 8005d72:	4611      	mov	r1, r2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4623      	mov	r3, r4
 8005d78:	80fb      	strh	r3, [r7, #6]
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	80bb      	strh	r3, [r7, #4]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	807b      	strh	r3, [r7, #2]
 8005d82:	4613      	mov	r3, r2
 8005d84:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8005d86:	4a1c      	ldr	r2, [pc, #112]	@ (8005df8 <Paint_NewImage+0x90>)
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8005d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8005df8 <Paint_NewImage+0x90>)
 8005d8e:	88bb      	ldrh	r3, [r7, #4]
 8005d90:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8005d92:	4a19      	ldr	r2, [pc, #100]	@ (8005df8 <Paint_NewImage+0x90>)
 8005d94:	883b      	ldrh	r3, [r7, #0]
 8005d96:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8005d98:	4a17      	ldr	r2, [pc, #92]	@ (8005df8 <Paint_NewImage+0x90>)
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8005d9e:	4a16      	ldr	r2, [pc, #88]	@ (8005df8 <Paint_NewImage+0x90>)
 8005da0:	88bb      	ldrh	r3, [r7, #4]
 8005da2:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8005da4:	4b14      	ldr	r3, [pc, #80]	@ (8005df8 <Paint_NewImage+0x90>)
 8005da6:	8a5b      	ldrh	r3, [r3, #18]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	4619      	mov	r1, r3
 8005dac:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <Paint_NewImage+0x90>)
 8005dae:	8a9b      	ldrh	r3, [r3, #20]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	4811      	ldr	r0, [pc, #68]	@ (8005dfc <Paint_NewImage+0x94>)
 8005db6:	f001 fc43 	bl	8007640 <iprintf>
   
    Paint.Rotate = Rotate;
 8005dba:	4a0f      	ldr	r2, [pc, #60]	@ (8005df8 <Paint_NewImage+0x90>)
 8005dbc:	887b      	ldrh	r3, [r7, #2]
 8005dbe:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <Paint_NewImage+0x90>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8005dc6:	887b      	ldrh	r3, [r7, #2]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <Paint_NewImage+0x6a>
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	2bb4      	cmp	r3, #180	@ 0xb4
 8005dd0:	d106      	bne.n	8005de0 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8005dd2:	4a09      	ldr	r2, [pc, #36]	@ (8005df8 <Paint_NewImage+0x90>)
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8005dd8:	4a07      	ldr	r2, [pc, #28]	@ (8005df8 <Paint_NewImage+0x90>)
 8005dda:	88bb      	ldrh	r3, [r7, #4]
 8005ddc:	80d3      	strh	r3, [r2, #6]
 8005dde:	e006      	b.n	8005dee <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8005de0:	4a05      	ldr	r2, [pc, #20]	@ (8005df8 <Paint_NewImage+0x90>)
 8005de2:	88bb      	ldrh	r3, [r7, #4]
 8005de4:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8005de6:	4a04      	ldr	r2, [pc, #16]	@ (8005df8 <Paint_NewImage+0x90>)
 8005de8:	88fb      	ldrh	r3, [r7, #6]
 8005dea:	80d3      	strh	r3, [r2, #6]
    }
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd90      	pop	{r4, r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200003a0 	.word	0x200003a0
 8005dfc:	0800ae6c 	.word	0x0800ae6c

08005e00 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8005e08:	4a04      	ldr	r2, [pc, #16]	@ (8005e1c <Paint_SetClearFuntion+0x1c>)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6013      	str	r3, [r2, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	200003bc 	.word	0x200003bc

08005e20 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8005e28:	4a04      	ldr	r2, [pc, #16]	@ (8005e3c <Paint_SetDisplayFuntion+0x1c>)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6013      	str	r3, [r2, #0]
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	200003b8 	.word	0x200003b8

08005e40 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	80fb      	strh	r3, [r7, #6]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	80bb      	strh	r3, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8005e52:	4b50      	ldr	r3, [pc, #320]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005e54:	889b      	ldrh	r3, [r3, #4]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d805      	bhi.n	8005e6a <Paint_SetPixel+0x2a>
 8005e5e:	4b4d      	ldr	r3, [pc, #308]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005e60:	88db      	ldrh	r3, [r3, #6]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	88ba      	ldrh	r2, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d903      	bls.n	8005e72 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 8005e6a:	484b      	ldr	r0, [pc, #300]	@ (8005f98 <Paint_SetPixel+0x158>)
 8005e6c:	f001 fc50 	bl	8007710 <puts>
        return;
 8005e70:	e08c      	b.n	8005f8c <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8005e72:	4b48      	ldr	r3, [pc, #288]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005e74:	89db      	ldrh	r3, [r3, #14]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8005e7c:	d02d      	beq.n	8005eda <Paint_SetPixel+0x9a>
 8005e7e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8005e82:	f300 8080 	bgt.w	8005f86 <Paint_SetPixel+0x146>
 8005e86:	2bb4      	cmp	r3, #180	@ 0xb4
 8005e88:	d016      	beq.n	8005eb8 <Paint_SetPixel+0x78>
 8005e8a:	2bb4      	cmp	r3, #180	@ 0xb4
 8005e8c:	dc7b      	bgt.n	8005f86 <Paint_SetPixel+0x146>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <Paint_SetPixel+0x58>
 8005e92:	2b5a      	cmp	r3, #90	@ 0x5a
 8005e94:	d005      	beq.n	8005ea2 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8005e96:	e076      	b.n	8005f86 <Paint_SetPixel+0x146>
        X = Xpoint;
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8005e9c:	88bb      	ldrh	r3, [r7, #4]
 8005e9e:	81bb      	strh	r3, [r7, #12]
        break;
 8005ea0:	e026      	b.n	8005ef0 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8005ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005ea4:	891b      	ldrh	r3, [r3, #8]
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	88bb      	ldrh	r3, [r7, #4]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	81bb      	strh	r3, [r7, #12]
        break;
 8005eb6:	e01b      	b.n	8005ef0 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 8005eb8:	4b36      	ldr	r3, [pc, #216]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005eba:	891b      	ldrh	r3, [r3, #8]
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8005ec8:	4b32      	ldr	r3, [pc, #200]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005eca:	895b      	ldrh	r3, [r3, #10]
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	88bb      	ldrh	r3, [r7, #4]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	81bb      	strh	r3, [r7, #12]
        break;
 8005ed8:	e00a      	b.n	8005ef0 <Paint_SetPixel+0xb0>
        X = Ypoint;
 8005eda:	88bb      	ldrh	r3, [r7, #4]
 8005edc:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8005ede:	4b2d      	ldr	r3, [pc, #180]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005ee0:	895b      	ldrh	r3, [r3, #10]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	88fb      	ldrh	r3, [r7, #6]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	81bb      	strh	r3, [r7, #12]
        break;
 8005eee:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8005ef0:	4b28      	ldr	r3, [pc, #160]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005ef2:	8a1b      	ldrh	r3, [r3, #16]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d847      	bhi.n	8005f8a <Paint_SetPixel+0x14a>
 8005efa:	a201      	add	r2, pc, #4	@ (adr r2, 8005f00 <Paint_SetPixel+0xc0>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f57 	.word	0x08005f57
 8005f04:	08005f11 	.word	0x08005f11
 8005f08:	08005f23 	.word	0x08005f23
 8005f0c:	08005f35 	.word	0x08005f35
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8005f10:	4b20      	ldr	r3, [pc, #128]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005f12:	891b      	ldrh	r3, [r3, #8]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	89fb      	ldrh	r3, [r7, #14]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	81fb      	strh	r3, [r7, #14]
        break;
 8005f20:	e01a      	b.n	8005f58 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8005f22:	4b1c      	ldr	r3, [pc, #112]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005f24:	895b      	ldrh	r3, [r3, #10]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	89bb      	ldrh	r3, [r7, #12]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	81bb      	strh	r3, [r7, #12]
        break;
 8005f32:	e011      	b.n	8005f58 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8005f34:	4b17      	ldr	r3, [pc, #92]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005f36:	891b      	ldrh	r3, [r3, #8]
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	89fb      	ldrh	r3, [r7, #14]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8005f44:	4b13      	ldr	r3, [pc, #76]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005f46:	895b      	ldrh	r3, [r3, #10]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	89bb      	ldrh	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	81bb      	strh	r3, [r7, #12]
        break;
 8005f54:	e000      	b.n	8005f58 <Paint_SetPixel+0x118>
        break;
 8005f56:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8005f58:	4b0e      	ldr	r3, [pc, #56]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005f5a:	891b      	ldrh	r3, [r3, #8]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	89fa      	ldrh	r2, [r7, #14]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d805      	bhi.n	8005f70 <Paint_SetPixel+0x130>
 8005f64:	4b0b      	ldr	r3, [pc, #44]	@ (8005f94 <Paint_SetPixel+0x154>)
 8005f66:	895b      	ldrh	r3, [r3, #10]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	89ba      	ldrh	r2, [r7, #12]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d903      	bls.n	8005f78 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8005f70:	4809      	ldr	r0, [pc, #36]	@ (8005f98 <Paint_SetPixel+0x158>)
 8005f72:	f001 fbcd 	bl	8007710 <puts>
        return;
 8005f76:	e009      	b.n	8005f8c <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8005f78:	4b08      	ldr	r3, [pc, #32]	@ (8005f9c <Paint_SetPixel+0x15c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	887a      	ldrh	r2, [r7, #2]
 8005f7e:	89b9      	ldrh	r1, [r7, #12]
 8005f80:	89f8      	ldrh	r0, [r7, #14]
 8005f82:	4798      	blx	r3
 8005f84:	e002      	b.n	8005f8c <Paint_SetPixel+0x14c>
        return;
 8005f86:	bf00      	nop
 8005f88:	e000      	b.n	8005f8c <Paint_SetPixel+0x14c>
        return;
 8005f8a:	bf00      	nop
}
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	200003a0 	.word	0x200003a0
 8005f98:	0800af6c 	.word	0x0800af6c
 8005f9c:	200003b8 	.word	0x200003b8

08005fa0 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	4603      	mov	r3, r0
 8005faa:	81fb      	strh	r3, [r7, #14]
 8005fac:	460b      	mov	r3, r1
 8005fae:	81bb      	strh	r3, [r7, #12]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8005fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80060f0 <Paint_DrawChar+0x150>)
 8005fb6:	889b      	ldrh	r3, [r3, #4]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	89fa      	ldrh	r2, [r7, #14]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d805      	bhi.n	8005fcc <Paint_DrawChar+0x2c>
 8005fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80060f0 <Paint_DrawChar+0x150>)
 8005fc2:	88db      	ldrh	r3, [r3, #6]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	89ba      	ldrh	r2, [r7, #12]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d903      	bls.n	8005fd4 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8005fcc:	4849      	ldr	r0, [pc, #292]	@ (80060f4 <Paint_DrawChar+0x154>)
 8005fce:	f001 fb9f 	bl	8007710 <puts>
        return;
 8005fd2:	e089      	b.n	80060e8 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
 8005fd6:	3b20      	subs	r3, #32
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	88d2      	ldrh	r2, [r2, #6]
 8005fdc:	fb02 f303 	mul.w	r3, r2, r3
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	8892      	ldrh	r2, [r2, #4]
 8005fe4:	08d2      	lsrs	r2, r2, #3
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	4611      	mov	r1, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	8892      	ldrh	r2, [r2, #4]
 8005fee:	f002 0207 	and.w	r2, r2, #7
 8005ff2:	b292      	uxth	r2, r2
 8005ff4:	2a00      	cmp	r2, #0
 8005ff6:	bf14      	ite	ne
 8005ff8:	2201      	movne	r2, #1
 8005ffa:	2200      	moveq	r2, #0
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	440a      	add	r2, r1
 8006000:	fb02 f303 	mul.w	r3, r2, r3
 8006004:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8006010:	2300      	movs	r3, #0
 8006012:	83fb      	strh	r3, [r7, #30]
 8006014:	e063      	b.n	80060de <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8006016:	2300      	movs	r3, #0
 8006018:	83bb      	strh	r3, [r7, #28]
 800601a:	e04e      	b.n	80060ba <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800601c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800601e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006022:	4293      	cmp	r3, r2
 8006024:	d118      	bne.n	8006058 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	8bbb      	ldrh	r3, [r7, #28]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2280      	movs	r2, #128	@ 0x80
 8006034:	fa42 f303 	asr.w	r3, r2, r3
 8006038:	400b      	ands	r3, r1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d031      	beq.n	80060a2 <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800603e:	89fa      	ldrh	r2, [r7, #14]
 8006040:	8bbb      	ldrh	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	b298      	uxth	r0, r3
 8006046:	89ba      	ldrh	r2, [r7, #12]
 8006048:	8bfb      	ldrh	r3, [r7, #30]
 800604a:	4413      	add	r3, r2
 800604c:	b29b      	uxth	r3, r3
 800604e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006050:	4619      	mov	r1, r3
 8006052:	f7ff fef5 	bl	8005e40 <Paint_SetPixel>
 8006056:	e024      	b.n	80060a2 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	4619      	mov	r1, r3
 800605e:	8bbb      	ldrh	r3, [r7, #28]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	2280      	movs	r2, #128	@ 0x80
 8006066:	fa42 f303 	asr.w	r3, r2, r3
 800606a:	400b      	ands	r3, r1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8006070:	89fa      	ldrh	r2, [r7, #14]
 8006072:	8bbb      	ldrh	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	b298      	uxth	r0, r3
 8006078:	89ba      	ldrh	r2, [r7, #12]
 800607a:	8bfb      	ldrh	r3, [r7, #30]
 800607c:	4413      	add	r3, r2
 800607e:	b29b      	uxth	r3, r3
 8006080:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006082:	4619      	mov	r1, r3
 8006084:	f7ff fedc 	bl	8005e40 <Paint_SetPixel>
 8006088:	e00b      	b.n	80060a2 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800608a:	89fa      	ldrh	r2, [r7, #14]
 800608c:	8bbb      	ldrh	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	b298      	uxth	r0, r3
 8006092:	89ba      	ldrh	r2, [r7, #12]
 8006094:	8bfb      	ldrh	r3, [r7, #30]
 8006096:	4413      	add	r3, r2
 8006098:	b29b      	uxth	r3, r3
 800609a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800609c:	4619      	mov	r1, r3
 800609e:	f7ff fecf 	bl	8005e40 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80060a2:	8bbb      	ldrh	r3, [r7, #28]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b07      	cmp	r3, #7
 80060ac:	d102      	bne.n	80060b4 <Paint_DrawChar+0x114>
                ptr++;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	3301      	adds	r3, #1
 80060b2:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80060b4:	8bbb      	ldrh	r3, [r7, #28]
 80060b6:	3301      	adds	r3, #1
 80060b8:	83bb      	strh	r3, [r7, #28]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	889b      	ldrh	r3, [r3, #4]
 80060be:	8bba      	ldrh	r2, [r7, #28]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d3ab      	bcc.n	800601c <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	889b      	ldrh	r3, [r3, #4]
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <Paint_DrawChar+0x138>
            ptr++;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	3301      	adds	r3, #1
 80060d6:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80060d8:	8bfb      	ldrh	r3, [r7, #30]
 80060da:	3301      	adds	r3, #1
 80060dc:	83fb      	strh	r3, [r7, #30]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	88db      	ldrh	r3, [r3, #6]
 80060e2:	8bfa      	ldrh	r2, [r7, #30]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d396      	bcc.n	8006016 <Paint_DrawChar+0x76>
    }// Write all
}
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	200003a0 	.word	0x200003a0
 80060f4:	0800b088 	.word	0x0800b088

080060f8 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	60ba      	str	r2, [r7, #8]
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	4603      	mov	r3, r0
 8006104:	81fb      	strh	r3, [r7, #14]
 8006106:	460b      	mov	r3, r1
 8006108:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800610a:	89fb      	ldrh	r3, [r7, #14]
 800610c:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800610e:	89bb      	ldrh	r3, [r7, #12]
 8006110:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8006112:	4b23      	ldr	r3, [pc, #140]	@ (80061a0 <Paint_DrawString_EN+0xa8>)
 8006114:	889b      	ldrh	r3, [r3, #4]
 8006116:	b29b      	uxth	r3, r3
 8006118:	89fa      	ldrh	r2, [r7, #14]
 800611a:	429a      	cmp	r2, r3
 800611c:	d805      	bhi.n	800612a <Paint_DrawString_EN+0x32>
 800611e:	4b20      	ldr	r3, [pc, #128]	@ (80061a0 <Paint_DrawString_EN+0xa8>)
 8006120:	88db      	ldrh	r3, [r3, #6]
 8006122:	b29b      	uxth	r3, r3
 8006124:	89ba      	ldrh	r2, [r7, #12]
 8006126:	429a      	cmp	r2, r3
 8006128:	d933      	bls.n	8006192 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800612a:	481e      	ldr	r0, [pc, #120]	@ (80061a4 <Paint_DrawString_EN+0xac>)
 800612c:	f001 faf0 	bl	8007710 <puts>
        return;
 8006130:	e033      	b.n	800619a <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8006132:	8afb      	ldrh	r3, [r7, #22]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	8892      	ldrh	r2, [r2, #4]
 8006138:	4413      	add	r3, r2
 800613a:	4a19      	ldr	r2, [pc, #100]	@ (80061a0 <Paint_DrawString_EN+0xa8>)
 800613c:	8892      	ldrh	r2, [r2, #4]
 800613e:	b292      	uxth	r2, r2
 8006140:	4293      	cmp	r3, r2
 8006142:	dd06      	ble.n	8006152 <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8006144:	89fb      	ldrh	r3, [r7, #14]
 8006146:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	88da      	ldrh	r2, [r3, #6]
 800614c:	8abb      	ldrh	r3, [r7, #20]
 800614e:	4413      	add	r3, r2
 8006150:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8006152:	8abb      	ldrh	r3, [r7, #20]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	88d2      	ldrh	r2, [r2, #6]
 8006158:	4413      	add	r3, r2
 800615a:	4a11      	ldr	r2, [pc, #68]	@ (80061a0 <Paint_DrawString_EN+0xa8>)
 800615c:	88d2      	ldrh	r2, [r2, #6]
 800615e:	b292      	uxth	r2, r2
 8006160:	4293      	cmp	r3, r2
 8006162:	dd03      	ble.n	800616c <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8006164:	89fb      	ldrh	r3, [r7, #14]
 8006166:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8006168:	89bb      	ldrh	r3, [r7, #12]
 800616a:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	8ab9      	ldrh	r1, [r7, #20]
 8006172:	8af8      	ldrh	r0, [r7, #22]
 8006174:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	8c3b      	ldrh	r3, [r7, #32]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f7ff ff0f 	bl	8005fa0 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	3301      	adds	r3, #1
 8006186:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	889a      	ldrh	r2, [r3, #4]
 800618c:	8afb      	ldrh	r3, [r7, #22]
 800618e:	4413      	add	r3, r2
 8006190:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1cb      	bne.n	8006132 <Paint_DrawString_EN+0x3a>
    }
}
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	200003a0 	.word	0x200003a0
 80061a4:	0800b0c8 	.word	0x0800b0c8

080061a8 <LCD_1IN47_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN47_Reset(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
	LCD_1IN47_RST_1;
 80061ac:	2201      	movs	r2, #1
 80061ae:	2101      	movs	r1, #1
 80061b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061b4:	f7fc f876 	bl	80022a4 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80061b8:	2064      	movs	r0, #100	@ 0x64
 80061ba:	f7fb fdeb 	bl	8001d94 <HAL_Delay>
	LCD_1IN47_RST_0;
 80061be:	2200      	movs	r2, #0
 80061c0:	2101      	movs	r1, #1
 80061c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061c6:	f7fc f86d 	bl	80022a4 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80061ca:	2064      	movs	r0, #100	@ 0x64
 80061cc:	f7fb fde2 	bl	8001d94 <HAL_Delay>
	LCD_1IN47_RST_1;
 80061d0:	2201      	movs	r2, #1
 80061d2:	2101      	movs	r1, #1
 80061d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061d8:	f7fc f864 	bl	80022a4 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 80061dc:	2064      	movs	r0, #100	@ 0x64
 80061de:	f7fb fdd9 	bl	8001d94 <HAL_Delay>
}
 80061e2:	bf00      	nop
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <LCD_1IN47_SendCommand>:
function :	send command
parameter:
	 Reg : Command register
******************************************************************************/
static void LCD_1IN47_SendCommand(UBYTE Reg)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
	LCD_1IN47_DC_0;
 80061f2:	2200      	movs	r2, #0
 80061f4:	2102      	movs	r1, #2
 80061f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061fa:	f7fc f853 	bl	80022a4 <HAL_GPIO_WritePin>
	LCD_1IN47_CS_0;
 80061fe:	2200      	movs	r2, #0
 8006200:	2140      	movs	r1, #64	@ 0x40
 8006202:	4805      	ldr	r0, [pc, #20]	@ (8006218 <LCD_1IN47_SendCommand+0x30>)
 8006204:	f7fc f84e 	bl	80022a4 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(Reg);
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fd9a 	bl	8005d44 <DEV_SPI_WRite>
	//LCD_1IN47_CS_1;
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	48000400 	.word	0x48000400

0800621c <LCD_1IN47_SendData_8Bit>:
function :	send data
parameter:
	Data : Write data
******************************************************************************/
static void LCD_1IN47_SendData_8Bit(UBYTE Data)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
	LCD_1IN47_DC_1;
 8006226:	2201      	movs	r2, #1
 8006228:	2102      	movs	r1, #2
 800622a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800622e:	f7fc f839 	bl	80022a4 <HAL_GPIO_WritePin>
	//LCD_1IN47_CS_0;
	DEV_SPI_WRITE(Data);
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fd85 	bl	8005d44 <DEV_SPI_WRite>
	//LCD_1IN47_CS_1;
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <LCD_1IN47_SendData_16Bit>:
function :	send data
parameter:
	Data : Write data
******************************************************************************/
static void LCD_1IN47_SendData_16Bit(UWORD Data)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	80fb      	strh	r3, [r7, #6]
	LCD_1IN47_DC_1;
 800624e:	2201      	movs	r2, #1
 8006250:	2102      	movs	r1, #2
 8006252:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006256:	f7fc f825 	bl	80022a4 <HAL_GPIO_WritePin>
	LCD_1IN47_CS_0;
 800625a:	2200      	movs	r2, #0
 800625c:	2140      	movs	r1, #64	@ 0x40
 800625e:	480c      	ldr	r0, [pc, #48]	@ (8006290 <LCD_1IN47_SendData_16Bit+0x4c>)
 8006260:	f7fc f820 	bl	80022a4 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((Data >> 8) & 0xFF);
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	b29b      	uxth	r3, r3
 800626a:	b2db      	uxtb	r3, r3
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fd69 	bl	8005d44 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data & 0xFF);
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fd64 	bl	8005d44 <DEV_SPI_WRite>
	LCD_1IN47_CS_1;
 800627c:	2201      	movs	r2, #1
 800627e:	2140      	movs	r1, #64	@ 0x40
 8006280:	4803      	ldr	r0, [pc, #12]	@ (8006290 <LCD_1IN47_SendData_16Bit+0x4c>)
 8006282:	f7fc f80f 	bl	80022a4 <HAL_GPIO_WritePin>
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	48000400 	.word	0x48000400

08006294 <LCD_1IN47_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN47_InitReg(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
	LCD_1IN47_SendCommand(0x11);
 8006298:	2011      	movs	r0, #17
 800629a:	f7ff ffa5 	bl	80061e8 <LCD_1IN47_SendCommand>
	DEV_Delay_ms(120);
 800629e:	2078      	movs	r0, #120	@ 0x78
 80062a0:	f7fb fd78 	bl	8001d94 <HAL_Delay>

	LCD_1IN47_SendCommand(0x3A);
 80062a4:	203a      	movs	r0, #58	@ 0x3a
 80062a6:	f7ff ff9f 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x05);
 80062aa:	2005      	movs	r0, #5
 80062ac:	f7ff ffb6 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xB2);
 80062b0:	20b2      	movs	r0, #178	@ 0xb2
 80062b2:	f7ff ff99 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x0C);
 80062b6:	200c      	movs	r0, #12
 80062b8:	f7ff ffb0 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x0C);
 80062bc:	200c      	movs	r0, #12
 80062be:	f7ff ffad 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x00);
 80062c2:	2000      	movs	r0, #0
 80062c4:	f7ff ffaa 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x33);
 80062c8:	2033      	movs	r0, #51	@ 0x33
 80062ca:	f7ff ffa7 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x33);
 80062ce:	2033      	movs	r0, #51	@ 0x33
 80062d0:	f7ff ffa4 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xB7);
 80062d4:	20b7      	movs	r0, #183	@ 0xb7
 80062d6:	f7ff ff87 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x35);
 80062da:	2035      	movs	r0, #53	@ 0x35
 80062dc:	f7ff ff9e 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xBB);
 80062e0:	20bb      	movs	r0, #187	@ 0xbb
 80062e2:	f7ff ff81 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x35);
 80062e6:	2035      	movs	r0, #53	@ 0x35
 80062e8:	f7ff ff98 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC0);
 80062ec:	20c0      	movs	r0, #192	@ 0xc0
 80062ee:	f7ff ff7b 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x2C);
 80062f2:	202c      	movs	r0, #44	@ 0x2c
 80062f4:	f7ff ff92 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC2);
 80062f8:	20c2      	movs	r0, #194	@ 0xc2
 80062fa:	f7ff ff75 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x01);
 80062fe:	2001      	movs	r0, #1
 8006300:	f7ff ff8c 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC3);
 8006304:	20c3      	movs	r0, #195	@ 0xc3
 8006306:	f7ff ff6f 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x13);
 800630a:	2013      	movs	r0, #19
 800630c:	f7ff ff86 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC4);
 8006310:	20c4      	movs	r0, #196	@ 0xc4
 8006312:	f7ff ff69 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x20);
 8006316:	2020      	movs	r0, #32
 8006318:	f7ff ff80 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC6);
 800631c:	20c6      	movs	r0, #198	@ 0xc6
 800631e:	f7ff ff63 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x0F);
 8006322:	200f      	movs	r0, #15
 8006324:	f7ff ff7a 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xD0);
 8006328:	20d0      	movs	r0, #208	@ 0xd0
 800632a:	f7ff ff5d 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0xA4);
 800632e:	20a4      	movs	r0, #164	@ 0xa4
 8006330:	f7ff ff74 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0xA1);
 8006334:	20a1      	movs	r0, #161	@ 0xa1
 8006336:	f7ff ff71 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xD6);
 800633a:	20d6      	movs	r0, #214	@ 0xd6
 800633c:	f7ff ff54 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0xA1);
 8006340:	20a1      	movs	r0, #161	@ 0xa1
 8006342:	f7ff ff6b 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xE0);
 8006346:	20e0      	movs	r0, #224	@ 0xe0
 8006348:	f7ff ff4e 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0xF0);
 800634c:	20f0      	movs	r0, #240	@ 0xf0
 800634e:	f7ff ff65 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x00);
 8006352:	2000      	movs	r0, #0
 8006354:	f7ff ff62 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x04);
 8006358:	2004      	movs	r0, #4
 800635a:	f7ff ff5f 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x04);
 800635e:	2004      	movs	r0, #4
 8006360:	f7ff ff5c 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x04);
 8006364:	2004      	movs	r0, #4
 8006366:	f7ff ff59 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x05);
 800636a:	2005      	movs	r0, #5
 800636c:	f7ff ff56 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x29);
 8006370:	2029      	movs	r0, #41	@ 0x29
 8006372:	f7ff ff53 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x33);
 8006376:	2033      	movs	r0, #51	@ 0x33
 8006378:	f7ff ff50 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x3E);
 800637c:	203e      	movs	r0, #62	@ 0x3e
 800637e:	f7ff ff4d 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x38);
 8006382:	2038      	movs	r0, #56	@ 0x38
 8006384:	f7ff ff4a 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x12);
 8006388:	2012      	movs	r0, #18
 800638a:	f7ff ff47 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x12);
 800638e:	2012      	movs	r0, #18
 8006390:	f7ff ff44 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x28);
 8006394:	2028      	movs	r0, #40	@ 0x28
 8006396:	f7ff ff41 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x30);
 800639a:	2030      	movs	r0, #48	@ 0x30
 800639c:	f7ff ff3e 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xE1);
 80063a0:	20e1      	movs	r0, #225	@ 0xe1
 80063a2:	f7ff ff21 	bl	80061e8 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0xF0);
 80063a6:	20f0      	movs	r0, #240	@ 0xf0
 80063a8:	f7ff ff38 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x07);
 80063ac:	2007      	movs	r0, #7
 80063ae:	f7ff ff35 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x0A);
 80063b2:	200a      	movs	r0, #10
 80063b4:	f7ff ff32 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x0D);
 80063b8:	200d      	movs	r0, #13
 80063ba:	f7ff ff2f 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x0B);
 80063be:	200b      	movs	r0, #11
 80063c0:	f7ff ff2c 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x07);
 80063c4:	2007      	movs	r0, #7
 80063c6:	f7ff ff29 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x28);
 80063ca:	2028      	movs	r0, #40	@ 0x28
 80063cc:	f7ff ff26 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x33);
 80063d0:	2033      	movs	r0, #51	@ 0x33
 80063d2:	f7ff ff23 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x3E);
 80063d6:	203e      	movs	r0, #62	@ 0x3e
 80063d8:	f7ff ff20 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x36);
 80063dc:	2036      	movs	r0, #54	@ 0x36
 80063de:	f7ff ff1d 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x14);
 80063e2:	2014      	movs	r0, #20
 80063e4:	f7ff ff1a 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x14);
 80063e8:	2014      	movs	r0, #20
 80063ea:	f7ff ff17 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x29);
 80063ee:	2029      	movs	r0, #41	@ 0x29
 80063f0:	f7ff ff14 	bl	800621c <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x32);
 80063f4:	2032      	movs	r0, #50	@ 0x32
 80063f6:	f7ff ff11 	bl	800621c <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0x21);
 80063fa:	2021      	movs	r0, #33	@ 0x21
 80063fc:	f7ff fef4 	bl	80061e8 <LCD_1IN47_SendCommand>

	LCD_1IN47_SendCommand(0x11);
 8006400:	2011      	movs	r0, #17
 8006402:	f7ff fef1 	bl	80061e8 <LCD_1IN47_SendCommand>
	DEV_Delay_ms(120);
 8006406:	2078      	movs	r0, #120	@ 0x78
 8006408:	f7fb fcc4 	bl	8001d94 <HAL_Delay>
	LCD_1IN47_SendCommand(0x29);
 800640c:	2029      	movs	r0, #41	@ 0x29
 800640e:	f7ff feeb 	bl	80061e8 <LCD_1IN47_SendCommand>
}
 8006412:	bf00      	nop
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <LCD_1IN47_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN47_SetAttributes(UBYTE Scan_dir)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	71fb      	strb	r3, [r7, #7]
	// Get the screen scan direction
	LCD_1IN47.SCAN_DIR = Scan_dir;
 8006422:	4a13      	ldr	r2, [pc, #76]	@ (8006470 <LCD_1IN47_SetAttributes+0x58>)
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	7113      	strb	r3, [r2, #4]
	UBYTE MemoryAccessReg = 0x00;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]

	// Get GRAM and LCD width and height
	if (Scan_dir == HORIZONTAL)
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <LCD_1IN47_SetAttributes+0x2e>
	{
		LCD_1IN47.HEIGHT = LCD_1IN47_WIDTH;
 8006432:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <LCD_1IN47_SetAttributes+0x58>)
 8006434:	22ac      	movs	r2, #172	@ 0xac
 8006436:	805a      	strh	r2, [r3, #2]
		LCD_1IN47.WIDTH = LCD_1IN47_HEIGHT;
 8006438:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <LCD_1IN47_SetAttributes+0x58>)
 800643a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800643e:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0X00;
 8006440:	2300      	movs	r3, #0
 8006442:	73fb      	strb	r3, [r7, #15]
 8006444:	e008      	b.n	8006458 <LCD_1IN47_SetAttributes+0x40>
	}
	else
	{
		LCD_1IN47.HEIGHT = LCD_1IN47_HEIGHT;
 8006446:	4b0a      	ldr	r3, [pc, #40]	@ (8006470 <LCD_1IN47_SetAttributes+0x58>)
 8006448:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800644c:	805a      	strh	r2, [r3, #2]
		LCD_1IN47.WIDTH = LCD_1IN47_WIDTH;		
 800644e:	4b08      	ldr	r3, [pc, #32]	@ (8006470 <LCD_1IN47_SetAttributes+0x58>)
 8006450:	22ac      	movs	r2, #172	@ 0xac
 8006452:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0X70;
 8006454:	2370      	movs	r3, #112	@ 0x70
 8006456:	73fb      	strb	r3, [r7, #15]
	}

	// Set the read / write scan direction of the frame memory
	LCD_1IN47_SendCommand(0x36); // MX, MY, RGB mode
 8006458:	2036      	movs	r0, #54	@ 0x36
 800645a:	f7ff fec5 	bl	80061e8 <LCD_1IN47_SendCommand>
	// LCD_1IN47_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
	LCD_1IN47_SendData_8Bit(MemoryAccessReg); // 0x08 set RGB
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff fedb 	bl	800621c <LCD_1IN47_SendData_8Bit>
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	200003c0 	.word	0x200003c0

08006474 <LCD_1IN47_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN47_Init(UBYTE Scan_dir)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	71fb      	strb	r3, [r7, #7]
	// Hardware reset
	LCD_1IN47_Reset();
 800647e:	f7ff fe93 	bl	80061a8 <LCD_1IN47_Reset>

	// Set the resolution and scanning method of the screen
	LCD_1IN47_SetAttributes(Scan_dir);
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff ffc7 	bl	8006418 <LCD_1IN47_SetAttributes>

	// Set the initialization register
	LCD_1IN47_InitReg();
 800648a:	f7ff ff03 	bl	8006294 <LCD_1IN47_InitReg>
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <LCD_1IN47_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN47_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8006498:	b590      	push	{r4, r7, lr}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	4623      	mov	r3, r4
 80064a8:	80fb      	strh	r3, [r7, #6]
 80064aa:	4603      	mov	r3, r0
 80064ac:	80bb      	strh	r3, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	807b      	strh	r3, [r7, #2]
 80064b2:	4613      	mov	r3, r2
 80064b4:	803b      	strh	r3, [r7, #0]
	if (LCD_1IN47.SCAN_DIR == HORIZONTAL)
 80064b6:	4b3e      	ldr	r3, [pc, #248]	@ (80065b0 <LCD_1IN47_SetWindows+0x118>)
 80064b8:	791b      	ldrb	r3, [r3, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d134      	bne.n	8006528 <LCD_1IN47_SetWindows+0x90>
	{ 
		
		// set the X coordinates
		LCD_1IN47_SendCommand(0x2A);
 80064be:	202a      	movs	r0, #42	@ 0x2a
 80064c0:	f7ff fe92 	bl	80061e8 <LCD_1IN47_SendCommand>
		LCD_1IN47_SendData_8Bit(0x00);
 80064c4:	2000      	movs	r0, #0
 80064c6:	f7ff fea9 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Xstart + 0x22);
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	3322      	adds	r3, #34	@ 0x22
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fea2 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(((Xend + 0x22) - 1) >> 8);
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	3321      	adds	r3, #33	@ 0x21
 80064dc:	121b      	asrs	r3, r3, #8
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fe9b 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit((Xend + 0x22) - 1);
 80064e6:	887b      	ldrh	r3, [r7, #2]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	3321      	adds	r3, #33	@ 0x21
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fe94 	bl	800621c <LCD_1IN47_SendData_8Bit>

		// set the Y coordinates
		LCD_1IN47_SendCommand(0x2B);
 80064f4:	202b      	movs	r0, #43	@ 0x2b
 80064f6:	f7ff fe77 	bl	80061e8 <LCD_1IN47_SendCommand>
		LCD_1IN47_SendData_8Bit(0x00);
 80064fa:	2000      	movs	r0, #0
 80064fc:	f7ff fe8e 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Ystart);
 8006500:	88bb      	ldrh	r3, [r7, #4]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff fe89 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit((Yend - 1) >> 8);
 800650a:	883b      	ldrh	r3, [r7, #0]
 800650c:	3b01      	subs	r3, #1
 800650e:	121b      	asrs	r3, r3, #8
 8006510:	b2db      	uxtb	r3, r3
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fe82 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Yend - 1);
 8006518:	883b      	ldrh	r3, [r7, #0]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fe7b 	bl	800621c <LCD_1IN47_SendData_8Bit>
 8006526:	e03b      	b.n	80065a0 <LCD_1IN47_SetWindows+0x108>
	}
	else
	{ 
		// set the X coordinates
		LCD_1IN47_SendCommand(0x2A);
 8006528:	202a      	movs	r0, #42	@ 0x2a
 800652a:	f7ff fe5d 	bl	80061e8 <LCD_1IN47_SendCommand>
		LCD_1IN47_SendData_8Bit(Xstart >> 8);
 800652e:	88fb      	ldrh	r3, [r7, #6]
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	b29b      	uxth	r3, r3
 8006534:	b2db      	uxtb	r3, r3
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fe70 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Xstart);
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fe6b 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit((Xend - 1) >> 8);
 8006546:	887b      	ldrh	r3, [r7, #2]
 8006548:	3b01      	subs	r3, #1
 800654a:	121b      	asrs	r3, r3, #8
 800654c:	b2db      	uxtb	r3, r3
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fe64 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Xend - 1);
 8006554:	887b      	ldrh	r3, [r7, #2]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff fe5d 	bl	800621c <LCD_1IN47_SendData_8Bit>

		// set the Y coordinates
		LCD_1IN47_SendCommand(0x2B);
 8006562:	202b      	movs	r0, #43	@ 0x2b
 8006564:	f7ff fe40 	bl	80061e8 <LCD_1IN47_SendCommand>
		LCD_1IN47_SendData_8Bit(Ystart >> 8);
 8006568:	88bb      	ldrh	r3, [r7, #4]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	b29b      	uxth	r3, r3
 800656e:	b2db      	uxtb	r3, r3
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fe53 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Ystart + 0x22);
 8006576:	88bb      	ldrh	r3, [r7, #4]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	3322      	adds	r3, #34	@ 0x22
 800657c:	b2db      	uxtb	r3, r3
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fe4c 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit((Yend - 1 + 0x22) >> 8);
 8006584:	883b      	ldrh	r3, [r7, #0]
 8006586:	3321      	adds	r3, #33	@ 0x21
 8006588:	121b      	asrs	r3, r3, #8
 800658a:	b2db      	uxtb	r3, r3
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fe45 	bl	800621c <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Yend - 1 + 0x22);
 8006592:	883b      	ldrh	r3, [r7, #0]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	3321      	adds	r3, #33	@ 0x21
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fe3e 	bl	800621c <LCD_1IN47_SendData_8Bit>
	}

	LCD_1IN47_SendCommand(0X2C);
 80065a0:	202c      	movs	r0, #44	@ 0x2c
 80065a2:	f7ff fe21 	bl	80061e8 <LCD_1IN47_SendCommand>
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd90      	pop	{r4, r7, pc}
 80065ae:	bf00      	nop
 80065b0:	200003c0 	.word	0x200003c0

080065b4 <LCD_1IN47_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN47_Clear(UWORD Color)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	80fb      	strh	r3, [r7, #6]
	UWORD i,j;
//	  LCD_1IN47_SetWindows(0, 0, LCD_1IN47.WIDTH, LCD_1IN47.HEIGHT);
  LCD_1IN47_SetWindows(0, 0, LCD_1IN47.HEIGHT, LCD_1IN47.WIDTH);
 80065be:	4b19      	ldr	r3, [pc, #100]	@ (8006624 <LCD_1IN47_Clear+0x70>)
 80065c0:	885a      	ldrh	r2, [r3, #2]
 80065c2:	4b18      	ldr	r3, [pc, #96]	@ (8006624 <LCD_1IN47_Clear+0x70>)
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	2100      	movs	r1, #0
 80065c8:	2000      	movs	r0, #0
 80065ca:	f7ff ff65 	bl	8006498 <LCD_1IN47_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 80065ce:	2201      	movs	r2, #1
 80065d0:	2102      	movs	r1, #2
 80065d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80065d6:	f7fb fe65 	bl	80022a4 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN47_WIDTH; i++){
 80065da:	2300      	movs	r3, #0
 80065dc:	81fb      	strh	r3, [r7, #14]
 80065de:	e018      	b.n	8006612 <LCD_1IN47_Clear+0x5e>
		for(j = 0; j < LCD_1IN47_HEIGHT; j++){
 80065e0:	2300      	movs	r3, #0
 80065e2:	81bb      	strh	r3, [r7, #12]
 80065e4:	e00e      	b.n	8006604 <LCD_1IN47_Clear+0x50>
			DEV_SPI_WRITE((Color>>8)&0xff);
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	0a1b      	lsrs	r3, r3, #8
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fba8 	bl	8005d44 <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fba3 	bl	8005d44 <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN47_HEIGHT; j++){
 80065fe:	89bb      	ldrh	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	81bb      	strh	r3, [r7, #12]
 8006604:	89bb      	ldrh	r3, [r7, #12]
 8006606:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800660a:	d3ec      	bcc.n	80065e6 <LCD_1IN47_Clear+0x32>
	for(i = 0; i < LCD_1IN47_WIDTH; i++){
 800660c:	89fb      	ldrh	r3, [r7, #14]
 800660e:	3301      	adds	r3, #1
 8006610:	81fb      	strh	r3, [r7, #14]
 8006612:	89fb      	ldrh	r3, [r7, #14]
 8006614:	2bab      	cmp	r3, #171	@ 0xab
 8006616:	d9e3      	bls.n	80065e0 <LCD_1IN47_Clear+0x2c>
		}
	 }
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	200003c0 	.word	0x200003c0

08006628 <LCD_1IN47_DrawPoint>:
				}  
		}
}

void LCD_1IN47_DrawPoint(UWORD X, UWORD Y, UWORD Color)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	80fb      	strh	r3, [r7, #6]
 8006632:	460b      	mov	r3, r1
 8006634:	80bb      	strh	r3, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	807b      	strh	r3, [r7, #2]
	LCD_1IN47_SetWindows(X, Y, X, Y);
 800663a:	88bb      	ldrh	r3, [r7, #4]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	88b9      	ldrh	r1, [r7, #4]
 8006640:	88f8      	ldrh	r0, [r7, #6]
 8006642:	f7ff ff29 	bl	8006498 <LCD_1IN47_SetWindows>
	LCD_1IN47_SendData_16Bit(Color);
 8006646:	887b      	ldrh	r3, [r7, #2]
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff fdfb 	bl	8006244 <LCD_1IN47_SendData_16Bit>
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <LCD_1IN47_SetBackLight>:

void LCD_1IN47_SetBackLight(UWORD Value)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8006662:	4a04      	ldr	r2, [pc, #16]	@ (8006674 <LCD_1IN47_SetBackLight+0x1c>)
 8006664:	88fb      	ldrh	r3, [r7, #6]
 8006666:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40000400 	.word	0x40000400

08006678 <malloc>:
 8006678:	4b02      	ldr	r3, [pc, #8]	@ (8006684 <malloc+0xc>)
 800667a:	4601      	mov	r1, r0
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f000 b825 	b.w	80066cc <_malloc_r>
 8006682:	bf00      	nop
 8006684:	20000020 	.word	0x20000020

08006688 <sbrk_aligned>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4e0f      	ldr	r6, [pc, #60]	@ (80066c8 <sbrk_aligned+0x40>)
 800668c:	460c      	mov	r4, r1
 800668e:	6831      	ldr	r1, [r6, #0]
 8006690:	4605      	mov	r5, r0
 8006692:	b911      	cbnz	r1, 800669a <sbrk_aligned+0x12>
 8006694:	f001 f97c 	bl	8007990 <_sbrk_r>
 8006698:	6030      	str	r0, [r6, #0]
 800669a:	4621      	mov	r1, r4
 800669c:	4628      	mov	r0, r5
 800669e:	f001 f977 	bl	8007990 <_sbrk_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d103      	bne.n	80066ae <sbrk_aligned+0x26>
 80066a6:	f04f 34ff 	mov.w	r4, #4294967295
 80066aa:	4620      	mov	r0, r4
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
 80066ae:	1cc4      	adds	r4, r0, #3
 80066b0:	f024 0403 	bic.w	r4, r4, #3
 80066b4:	42a0      	cmp	r0, r4
 80066b6:	d0f8      	beq.n	80066aa <sbrk_aligned+0x22>
 80066b8:	1a21      	subs	r1, r4, r0
 80066ba:	4628      	mov	r0, r5
 80066bc:	f001 f968 	bl	8007990 <_sbrk_r>
 80066c0:	3001      	adds	r0, #1
 80066c2:	d1f2      	bne.n	80066aa <sbrk_aligned+0x22>
 80066c4:	e7ef      	b.n	80066a6 <sbrk_aligned+0x1e>
 80066c6:	bf00      	nop
 80066c8:	200003c8 	.word	0x200003c8

080066cc <_malloc_r>:
 80066cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d0:	1ccd      	adds	r5, r1, #3
 80066d2:	f025 0503 	bic.w	r5, r5, #3
 80066d6:	3508      	adds	r5, #8
 80066d8:	2d0c      	cmp	r5, #12
 80066da:	bf38      	it	cc
 80066dc:	250c      	movcc	r5, #12
 80066de:	2d00      	cmp	r5, #0
 80066e0:	4606      	mov	r6, r0
 80066e2:	db01      	blt.n	80066e8 <_malloc_r+0x1c>
 80066e4:	42a9      	cmp	r1, r5
 80066e6:	d904      	bls.n	80066f2 <_malloc_r+0x26>
 80066e8:	230c      	movs	r3, #12
 80066ea:	6033      	str	r3, [r6, #0]
 80066ec:	2000      	movs	r0, #0
 80066ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067c8 <_malloc_r+0xfc>
 80066f6:	f000 f869 	bl	80067cc <__malloc_lock>
 80066fa:	f8d8 3000 	ldr.w	r3, [r8]
 80066fe:	461c      	mov	r4, r3
 8006700:	bb44      	cbnz	r4, 8006754 <_malloc_r+0x88>
 8006702:	4629      	mov	r1, r5
 8006704:	4630      	mov	r0, r6
 8006706:	f7ff ffbf 	bl	8006688 <sbrk_aligned>
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	4604      	mov	r4, r0
 800670e:	d158      	bne.n	80067c2 <_malloc_r+0xf6>
 8006710:	f8d8 4000 	ldr.w	r4, [r8]
 8006714:	4627      	mov	r7, r4
 8006716:	2f00      	cmp	r7, #0
 8006718:	d143      	bne.n	80067a2 <_malloc_r+0xd6>
 800671a:	2c00      	cmp	r4, #0
 800671c:	d04b      	beq.n	80067b6 <_malloc_r+0xea>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	4639      	mov	r1, r7
 8006722:	4630      	mov	r0, r6
 8006724:	eb04 0903 	add.w	r9, r4, r3
 8006728:	f001 f932 	bl	8007990 <_sbrk_r>
 800672c:	4581      	cmp	r9, r0
 800672e:	d142      	bne.n	80067b6 <_malloc_r+0xea>
 8006730:	6821      	ldr	r1, [r4, #0]
 8006732:	1a6d      	subs	r5, r5, r1
 8006734:	4629      	mov	r1, r5
 8006736:	4630      	mov	r0, r6
 8006738:	f7ff ffa6 	bl	8006688 <sbrk_aligned>
 800673c:	3001      	adds	r0, #1
 800673e:	d03a      	beq.n	80067b6 <_malloc_r+0xea>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	442b      	add	r3, r5
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	f8d8 3000 	ldr.w	r3, [r8]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	bb62      	cbnz	r2, 80067a8 <_malloc_r+0xdc>
 800674e:	f8c8 7000 	str.w	r7, [r8]
 8006752:	e00f      	b.n	8006774 <_malloc_r+0xa8>
 8006754:	6822      	ldr	r2, [r4, #0]
 8006756:	1b52      	subs	r2, r2, r5
 8006758:	d420      	bmi.n	800679c <_malloc_r+0xd0>
 800675a:	2a0b      	cmp	r2, #11
 800675c:	d917      	bls.n	800678e <_malloc_r+0xc2>
 800675e:	1961      	adds	r1, r4, r5
 8006760:	42a3      	cmp	r3, r4
 8006762:	6025      	str	r5, [r4, #0]
 8006764:	bf18      	it	ne
 8006766:	6059      	strne	r1, [r3, #4]
 8006768:	6863      	ldr	r3, [r4, #4]
 800676a:	bf08      	it	eq
 800676c:	f8c8 1000 	streq.w	r1, [r8]
 8006770:	5162      	str	r2, [r4, r5]
 8006772:	604b      	str	r3, [r1, #4]
 8006774:	4630      	mov	r0, r6
 8006776:	f000 f82f 	bl	80067d8 <__malloc_unlock>
 800677a:	f104 000b 	add.w	r0, r4, #11
 800677e:	1d23      	adds	r3, r4, #4
 8006780:	f020 0007 	bic.w	r0, r0, #7
 8006784:	1ac2      	subs	r2, r0, r3
 8006786:	bf1c      	itt	ne
 8006788:	1a1b      	subne	r3, r3, r0
 800678a:	50a3      	strne	r3, [r4, r2]
 800678c:	e7af      	b.n	80066ee <_malloc_r+0x22>
 800678e:	6862      	ldr	r2, [r4, #4]
 8006790:	42a3      	cmp	r3, r4
 8006792:	bf0c      	ite	eq
 8006794:	f8c8 2000 	streq.w	r2, [r8]
 8006798:	605a      	strne	r2, [r3, #4]
 800679a:	e7eb      	b.n	8006774 <_malloc_r+0xa8>
 800679c:	4623      	mov	r3, r4
 800679e:	6864      	ldr	r4, [r4, #4]
 80067a0:	e7ae      	b.n	8006700 <_malloc_r+0x34>
 80067a2:	463c      	mov	r4, r7
 80067a4:	687f      	ldr	r7, [r7, #4]
 80067a6:	e7b6      	b.n	8006716 <_malloc_r+0x4a>
 80067a8:	461a      	mov	r2, r3
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	d1fb      	bne.n	80067a8 <_malloc_r+0xdc>
 80067b0:	2300      	movs	r3, #0
 80067b2:	6053      	str	r3, [r2, #4]
 80067b4:	e7de      	b.n	8006774 <_malloc_r+0xa8>
 80067b6:	230c      	movs	r3, #12
 80067b8:	6033      	str	r3, [r6, #0]
 80067ba:	4630      	mov	r0, r6
 80067bc:	f000 f80c 	bl	80067d8 <__malloc_unlock>
 80067c0:	e794      	b.n	80066ec <_malloc_r+0x20>
 80067c2:	6005      	str	r5, [r0, #0]
 80067c4:	e7d6      	b.n	8006774 <_malloc_r+0xa8>
 80067c6:	bf00      	nop
 80067c8:	200003cc 	.word	0x200003cc

080067cc <__malloc_lock>:
 80067cc:	4801      	ldr	r0, [pc, #4]	@ (80067d4 <__malloc_lock+0x8>)
 80067ce:	f001 b92c 	b.w	8007a2a <__retarget_lock_acquire_recursive>
 80067d2:	bf00      	nop
 80067d4:	20000510 	.word	0x20000510

080067d8 <__malloc_unlock>:
 80067d8:	4801      	ldr	r0, [pc, #4]	@ (80067e0 <__malloc_unlock+0x8>)
 80067da:	f001 b927 	b.w	8007a2c <__retarget_lock_release_recursive>
 80067de:	bf00      	nop
 80067e0:	20000510 	.word	0x20000510

080067e4 <__cvt>:
 80067e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e8:	ec57 6b10 	vmov	r6, r7, d0
 80067ec:	2f00      	cmp	r7, #0
 80067ee:	460c      	mov	r4, r1
 80067f0:	4619      	mov	r1, r3
 80067f2:	463b      	mov	r3, r7
 80067f4:	bfbb      	ittet	lt
 80067f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067fa:	461f      	movlt	r7, r3
 80067fc:	2300      	movge	r3, #0
 80067fe:	232d      	movlt	r3, #45	@ 0x2d
 8006800:	700b      	strb	r3, [r1, #0]
 8006802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006804:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006808:	4691      	mov	r9, r2
 800680a:	f023 0820 	bic.w	r8, r3, #32
 800680e:	bfbc      	itt	lt
 8006810:	4632      	movlt	r2, r6
 8006812:	4616      	movlt	r6, r2
 8006814:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006818:	d005      	beq.n	8006826 <__cvt+0x42>
 800681a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800681e:	d100      	bne.n	8006822 <__cvt+0x3e>
 8006820:	3401      	adds	r4, #1
 8006822:	2102      	movs	r1, #2
 8006824:	e000      	b.n	8006828 <__cvt+0x44>
 8006826:	2103      	movs	r1, #3
 8006828:	ab03      	add	r3, sp, #12
 800682a:	9301      	str	r3, [sp, #4]
 800682c:	ab02      	add	r3, sp, #8
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	ec47 6b10 	vmov	d0, r6, r7
 8006834:	4653      	mov	r3, sl
 8006836:	4622      	mov	r2, r4
 8006838:	f001 f996 	bl	8007b68 <_dtoa_r>
 800683c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006840:	4605      	mov	r5, r0
 8006842:	d119      	bne.n	8006878 <__cvt+0x94>
 8006844:	f019 0f01 	tst.w	r9, #1
 8006848:	d00e      	beq.n	8006868 <__cvt+0x84>
 800684a:	eb00 0904 	add.w	r9, r0, r4
 800684e:	2200      	movs	r2, #0
 8006850:	2300      	movs	r3, #0
 8006852:	4630      	mov	r0, r6
 8006854:	4639      	mov	r1, r7
 8006856:	f7fa f95f 	bl	8000b18 <__aeabi_dcmpeq>
 800685a:	b108      	cbz	r0, 8006860 <__cvt+0x7c>
 800685c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006860:	2230      	movs	r2, #48	@ 0x30
 8006862:	9b03      	ldr	r3, [sp, #12]
 8006864:	454b      	cmp	r3, r9
 8006866:	d31e      	bcc.n	80068a6 <__cvt+0xc2>
 8006868:	9b03      	ldr	r3, [sp, #12]
 800686a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800686c:	1b5b      	subs	r3, r3, r5
 800686e:	4628      	mov	r0, r5
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	b004      	add	sp, #16
 8006874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800687c:	eb00 0904 	add.w	r9, r0, r4
 8006880:	d1e5      	bne.n	800684e <__cvt+0x6a>
 8006882:	7803      	ldrb	r3, [r0, #0]
 8006884:	2b30      	cmp	r3, #48	@ 0x30
 8006886:	d10a      	bne.n	800689e <__cvt+0xba>
 8006888:	2200      	movs	r2, #0
 800688a:	2300      	movs	r3, #0
 800688c:	4630      	mov	r0, r6
 800688e:	4639      	mov	r1, r7
 8006890:	f7fa f942 	bl	8000b18 <__aeabi_dcmpeq>
 8006894:	b918      	cbnz	r0, 800689e <__cvt+0xba>
 8006896:	f1c4 0401 	rsb	r4, r4, #1
 800689a:	f8ca 4000 	str.w	r4, [sl]
 800689e:	f8da 3000 	ldr.w	r3, [sl]
 80068a2:	4499      	add	r9, r3
 80068a4:	e7d3      	b.n	800684e <__cvt+0x6a>
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	9103      	str	r1, [sp, #12]
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	e7d9      	b.n	8006862 <__cvt+0x7e>

080068ae <__exponent>:
 80068ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068b0:	2900      	cmp	r1, #0
 80068b2:	bfba      	itte	lt
 80068b4:	4249      	neglt	r1, r1
 80068b6:	232d      	movlt	r3, #45	@ 0x2d
 80068b8:	232b      	movge	r3, #43	@ 0x2b
 80068ba:	2909      	cmp	r1, #9
 80068bc:	7002      	strb	r2, [r0, #0]
 80068be:	7043      	strb	r3, [r0, #1]
 80068c0:	dd29      	ble.n	8006916 <__exponent+0x68>
 80068c2:	f10d 0307 	add.w	r3, sp, #7
 80068c6:	461d      	mov	r5, r3
 80068c8:	270a      	movs	r7, #10
 80068ca:	461a      	mov	r2, r3
 80068cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80068d0:	fb07 1416 	mls	r4, r7, r6, r1
 80068d4:	3430      	adds	r4, #48	@ 0x30
 80068d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068da:	460c      	mov	r4, r1
 80068dc:	2c63      	cmp	r4, #99	@ 0x63
 80068de:	f103 33ff 	add.w	r3, r3, #4294967295
 80068e2:	4631      	mov	r1, r6
 80068e4:	dcf1      	bgt.n	80068ca <__exponent+0x1c>
 80068e6:	3130      	adds	r1, #48	@ 0x30
 80068e8:	1e94      	subs	r4, r2, #2
 80068ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068ee:	1c41      	adds	r1, r0, #1
 80068f0:	4623      	mov	r3, r4
 80068f2:	42ab      	cmp	r3, r5
 80068f4:	d30a      	bcc.n	800690c <__exponent+0x5e>
 80068f6:	f10d 0309 	add.w	r3, sp, #9
 80068fa:	1a9b      	subs	r3, r3, r2
 80068fc:	42ac      	cmp	r4, r5
 80068fe:	bf88      	it	hi
 8006900:	2300      	movhi	r3, #0
 8006902:	3302      	adds	r3, #2
 8006904:	4403      	add	r3, r0
 8006906:	1a18      	subs	r0, r3, r0
 8006908:	b003      	add	sp, #12
 800690a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800690c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006910:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006914:	e7ed      	b.n	80068f2 <__exponent+0x44>
 8006916:	2330      	movs	r3, #48	@ 0x30
 8006918:	3130      	adds	r1, #48	@ 0x30
 800691a:	7083      	strb	r3, [r0, #2]
 800691c:	70c1      	strb	r1, [r0, #3]
 800691e:	1d03      	adds	r3, r0, #4
 8006920:	e7f1      	b.n	8006906 <__exponent+0x58>
	...

08006924 <_printf_float>:
 8006924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006928:	b08d      	sub	sp, #52	@ 0x34
 800692a:	460c      	mov	r4, r1
 800692c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006930:	4616      	mov	r6, r2
 8006932:	461f      	mov	r7, r3
 8006934:	4605      	mov	r5, r0
 8006936:	f000 fff3 	bl	8007920 <_localeconv_r>
 800693a:	6803      	ldr	r3, [r0, #0]
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	4618      	mov	r0, r3
 8006940:	f7f9 fcbe 	bl	80002c0 <strlen>
 8006944:	2300      	movs	r3, #0
 8006946:	930a      	str	r3, [sp, #40]	@ 0x28
 8006948:	f8d8 3000 	ldr.w	r3, [r8]
 800694c:	9005      	str	r0, [sp, #20]
 800694e:	3307      	adds	r3, #7
 8006950:	f023 0307 	bic.w	r3, r3, #7
 8006954:	f103 0208 	add.w	r2, r3, #8
 8006958:	f894 a018 	ldrb.w	sl, [r4, #24]
 800695c:	f8d4 b000 	ldr.w	fp, [r4]
 8006960:	f8c8 2000 	str.w	r2, [r8]
 8006964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006968:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800696c:	9307      	str	r3, [sp, #28]
 800696e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006972:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800697a:	4b9c      	ldr	r3, [pc, #624]	@ (8006bec <_printf_float+0x2c8>)
 800697c:	f04f 32ff 	mov.w	r2, #4294967295
 8006980:	f7fa f8fc 	bl	8000b7c <__aeabi_dcmpun>
 8006984:	bb70      	cbnz	r0, 80069e4 <_printf_float+0xc0>
 8006986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800698a:	4b98      	ldr	r3, [pc, #608]	@ (8006bec <_printf_float+0x2c8>)
 800698c:	f04f 32ff 	mov.w	r2, #4294967295
 8006990:	f7fa f8d6 	bl	8000b40 <__aeabi_dcmple>
 8006994:	bb30      	cbnz	r0, 80069e4 <_printf_float+0xc0>
 8006996:	2200      	movs	r2, #0
 8006998:	2300      	movs	r3, #0
 800699a:	4640      	mov	r0, r8
 800699c:	4649      	mov	r1, r9
 800699e:	f7fa f8c5 	bl	8000b2c <__aeabi_dcmplt>
 80069a2:	b110      	cbz	r0, 80069aa <_printf_float+0x86>
 80069a4:	232d      	movs	r3, #45	@ 0x2d
 80069a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069aa:	4a91      	ldr	r2, [pc, #580]	@ (8006bf0 <_printf_float+0x2cc>)
 80069ac:	4b91      	ldr	r3, [pc, #580]	@ (8006bf4 <_printf_float+0x2d0>)
 80069ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069b2:	bf94      	ite	ls
 80069b4:	4690      	movls	r8, r2
 80069b6:	4698      	movhi	r8, r3
 80069b8:	2303      	movs	r3, #3
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	f02b 0304 	bic.w	r3, fp, #4
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	f04f 0900 	mov.w	r9, #0
 80069c6:	9700      	str	r7, [sp, #0]
 80069c8:	4633      	mov	r3, r6
 80069ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80069cc:	4621      	mov	r1, r4
 80069ce:	4628      	mov	r0, r5
 80069d0:	f000 f9d2 	bl	8006d78 <_printf_common>
 80069d4:	3001      	adds	r0, #1
 80069d6:	f040 808d 	bne.w	8006af4 <_printf_float+0x1d0>
 80069da:	f04f 30ff 	mov.w	r0, #4294967295
 80069de:	b00d      	add	sp, #52	@ 0x34
 80069e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e4:	4642      	mov	r2, r8
 80069e6:	464b      	mov	r3, r9
 80069e8:	4640      	mov	r0, r8
 80069ea:	4649      	mov	r1, r9
 80069ec:	f7fa f8c6 	bl	8000b7c <__aeabi_dcmpun>
 80069f0:	b140      	cbz	r0, 8006a04 <_printf_float+0xe0>
 80069f2:	464b      	mov	r3, r9
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	bfbc      	itt	lt
 80069f8:	232d      	movlt	r3, #45	@ 0x2d
 80069fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069fe:	4a7e      	ldr	r2, [pc, #504]	@ (8006bf8 <_printf_float+0x2d4>)
 8006a00:	4b7e      	ldr	r3, [pc, #504]	@ (8006bfc <_printf_float+0x2d8>)
 8006a02:	e7d4      	b.n	80069ae <_printf_float+0x8a>
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a0a:	9206      	str	r2, [sp, #24]
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	d13b      	bne.n	8006a88 <_printf_float+0x164>
 8006a10:	2306      	movs	r3, #6
 8006a12:	6063      	str	r3, [r4, #4]
 8006a14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a18:	2300      	movs	r3, #0
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	9303      	str	r3, [sp, #12]
 8006a1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a24:	ab09      	add	r3, sp, #36	@ 0x24
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	6861      	ldr	r1, [r4, #4]
 8006a2a:	ec49 8b10 	vmov	d0, r8, r9
 8006a2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a32:	4628      	mov	r0, r5
 8006a34:	f7ff fed6 	bl	80067e4 <__cvt>
 8006a38:	9b06      	ldr	r3, [sp, #24]
 8006a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a3c:	2b47      	cmp	r3, #71	@ 0x47
 8006a3e:	4680      	mov	r8, r0
 8006a40:	d129      	bne.n	8006a96 <_printf_float+0x172>
 8006a42:	1cc8      	adds	r0, r1, #3
 8006a44:	db02      	blt.n	8006a4c <_printf_float+0x128>
 8006a46:	6863      	ldr	r3, [r4, #4]
 8006a48:	4299      	cmp	r1, r3
 8006a4a:	dd41      	ble.n	8006ad0 <_printf_float+0x1ac>
 8006a4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a50:	fa5f fa8a 	uxtb.w	sl, sl
 8006a54:	3901      	subs	r1, #1
 8006a56:	4652      	mov	r2, sl
 8006a58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a5e:	f7ff ff26 	bl	80068ae <__exponent>
 8006a62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a64:	1813      	adds	r3, r2, r0
 8006a66:	2a01      	cmp	r2, #1
 8006a68:	4681      	mov	r9, r0
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	dc02      	bgt.n	8006a74 <_printf_float+0x150>
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	07d2      	lsls	r2, r2, #31
 8006a72:	d501      	bpl.n	8006a78 <_printf_float+0x154>
 8006a74:	3301      	adds	r3, #1
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0a2      	beq.n	80069c6 <_printf_float+0xa2>
 8006a80:	232d      	movs	r3, #45	@ 0x2d
 8006a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a86:	e79e      	b.n	80069c6 <_printf_float+0xa2>
 8006a88:	9a06      	ldr	r2, [sp, #24]
 8006a8a:	2a47      	cmp	r2, #71	@ 0x47
 8006a8c:	d1c2      	bne.n	8006a14 <_printf_float+0xf0>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1c0      	bne.n	8006a14 <_printf_float+0xf0>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e7bd      	b.n	8006a12 <_printf_float+0xee>
 8006a96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a9a:	d9db      	bls.n	8006a54 <_printf_float+0x130>
 8006a9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006aa0:	d118      	bne.n	8006ad4 <_printf_float+0x1b0>
 8006aa2:	2900      	cmp	r1, #0
 8006aa4:	6863      	ldr	r3, [r4, #4]
 8006aa6:	dd0b      	ble.n	8006ac0 <_printf_float+0x19c>
 8006aa8:	6121      	str	r1, [r4, #16]
 8006aaa:	b913      	cbnz	r3, 8006ab2 <_printf_float+0x18e>
 8006aac:	6822      	ldr	r2, [r4, #0]
 8006aae:	07d0      	lsls	r0, r2, #31
 8006ab0:	d502      	bpl.n	8006ab8 <_printf_float+0x194>
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	440b      	add	r3, r1
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006aba:	f04f 0900 	mov.w	r9, #0
 8006abe:	e7db      	b.n	8006a78 <_printf_float+0x154>
 8006ac0:	b913      	cbnz	r3, 8006ac8 <_printf_float+0x1a4>
 8006ac2:	6822      	ldr	r2, [r4, #0]
 8006ac4:	07d2      	lsls	r2, r2, #31
 8006ac6:	d501      	bpl.n	8006acc <_printf_float+0x1a8>
 8006ac8:	3302      	adds	r3, #2
 8006aca:	e7f4      	b.n	8006ab6 <_printf_float+0x192>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e7f2      	b.n	8006ab6 <_printf_float+0x192>
 8006ad0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	db05      	blt.n	8006ae6 <_printf_float+0x1c2>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	6121      	str	r1, [r4, #16]
 8006ade:	07d8      	lsls	r0, r3, #31
 8006ae0:	d5ea      	bpl.n	8006ab8 <_printf_float+0x194>
 8006ae2:	1c4b      	adds	r3, r1, #1
 8006ae4:	e7e7      	b.n	8006ab6 <_printf_float+0x192>
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	bfd4      	ite	le
 8006aea:	f1c1 0202 	rsble	r2, r1, #2
 8006aee:	2201      	movgt	r2, #1
 8006af0:	4413      	add	r3, r2
 8006af2:	e7e0      	b.n	8006ab6 <_printf_float+0x192>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	055a      	lsls	r2, r3, #21
 8006af8:	d407      	bmi.n	8006b0a <_printf_float+0x1e6>
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	4642      	mov	r2, r8
 8006afe:	4631      	mov	r1, r6
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b8      	blx	r7
 8006b04:	3001      	adds	r0, #1
 8006b06:	d12b      	bne.n	8006b60 <_printf_float+0x23c>
 8006b08:	e767      	b.n	80069da <_printf_float+0xb6>
 8006b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b0e:	f240 80dd 	bls.w	8006ccc <_printf_float+0x3a8>
 8006b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b16:	2200      	movs	r2, #0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f7f9 fffd 	bl	8000b18 <__aeabi_dcmpeq>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d033      	beq.n	8006b8a <_printf_float+0x266>
 8006b22:	4a37      	ldr	r2, [pc, #220]	@ (8006c00 <_printf_float+0x2dc>)
 8006b24:	2301      	movs	r3, #1
 8006b26:	4631      	mov	r1, r6
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b8      	blx	r7
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f43f af54 	beq.w	80069da <_printf_float+0xb6>
 8006b32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b36:	4543      	cmp	r3, r8
 8006b38:	db02      	blt.n	8006b40 <_printf_float+0x21c>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	07d8      	lsls	r0, r3, #31
 8006b3e:	d50f      	bpl.n	8006b60 <_printf_float+0x23c>
 8006b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b44:	4631      	mov	r1, r6
 8006b46:	4628      	mov	r0, r5
 8006b48:	47b8      	blx	r7
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	f43f af45 	beq.w	80069da <_printf_float+0xb6>
 8006b50:	f04f 0900 	mov.w	r9, #0
 8006b54:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b58:	f104 0a1a 	add.w	sl, r4, #26
 8006b5c:	45c8      	cmp	r8, r9
 8006b5e:	dc09      	bgt.n	8006b74 <_printf_float+0x250>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	079b      	lsls	r3, r3, #30
 8006b64:	f100 8103 	bmi.w	8006d6e <_printf_float+0x44a>
 8006b68:	68e0      	ldr	r0, [r4, #12]
 8006b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b6c:	4298      	cmp	r0, r3
 8006b6e:	bfb8      	it	lt
 8006b70:	4618      	movlt	r0, r3
 8006b72:	e734      	b.n	80069de <_printf_float+0xba>
 8006b74:	2301      	movs	r3, #1
 8006b76:	4652      	mov	r2, sl
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	47b8      	blx	r7
 8006b7e:	3001      	adds	r0, #1
 8006b80:	f43f af2b 	beq.w	80069da <_printf_float+0xb6>
 8006b84:	f109 0901 	add.w	r9, r9, #1
 8006b88:	e7e8      	b.n	8006b5c <_printf_float+0x238>
 8006b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dc39      	bgt.n	8006c04 <_printf_float+0x2e0>
 8006b90:	4a1b      	ldr	r2, [pc, #108]	@ (8006c00 <_printf_float+0x2dc>)
 8006b92:	2301      	movs	r3, #1
 8006b94:	4631      	mov	r1, r6
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	f43f af1d 	beq.w	80069da <_printf_float+0xb6>
 8006ba0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ba4:	ea59 0303 	orrs.w	r3, r9, r3
 8006ba8:	d102      	bne.n	8006bb0 <_printf_float+0x28c>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	07d9      	lsls	r1, r3, #31
 8006bae:	d5d7      	bpl.n	8006b60 <_printf_float+0x23c>
 8006bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f43f af0d 	beq.w	80069da <_printf_float+0xb6>
 8006bc0:	f04f 0a00 	mov.w	sl, #0
 8006bc4:	f104 0b1a 	add.w	fp, r4, #26
 8006bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bca:	425b      	negs	r3, r3
 8006bcc:	4553      	cmp	r3, sl
 8006bce:	dc01      	bgt.n	8006bd4 <_printf_float+0x2b0>
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	e793      	b.n	8006afc <_printf_float+0x1d8>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	465a      	mov	r2, fp
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4628      	mov	r0, r5
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	f43f aefb 	beq.w	80069da <_printf_float+0xb6>
 8006be4:	f10a 0a01 	add.w	sl, sl, #1
 8006be8:	e7ee      	b.n	8006bc8 <_printf_float+0x2a4>
 8006bea:	bf00      	nop
 8006bec:	7fefffff 	.word	0x7fefffff
 8006bf0:	0800bd80 	.word	0x0800bd80
 8006bf4:	0800bd84 	.word	0x0800bd84
 8006bf8:	0800bd88 	.word	0x0800bd88
 8006bfc:	0800bd8c 	.word	0x0800bd8c
 8006c00:	0800bd90 	.word	0x0800bd90
 8006c04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c0a:	4553      	cmp	r3, sl
 8006c0c:	bfa8      	it	ge
 8006c0e:	4653      	movge	r3, sl
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	4699      	mov	r9, r3
 8006c14:	dc36      	bgt.n	8006c84 <_printf_float+0x360>
 8006c16:	f04f 0b00 	mov.w	fp, #0
 8006c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c1e:	f104 021a 	add.w	r2, r4, #26
 8006c22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c24:	9306      	str	r3, [sp, #24]
 8006c26:	eba3 0309 	sub.w	r3, r3, r9
 8006c2a:	455b      	cmp	r3, fp
 8006c2c:	dc31      	bgt.n	8006c92 <_printf_float+0x36e>
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	459a      	cmp	sl, r3
 8006c32:	dc3a      	bgt.n	8006caa <_printf_float+0x386>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	07da      	lsls	r2, r3, #31
 8006c38:	d437      	bmi.n	8006caa <_printf_float+0x386>
 8006c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c3c:	ebaa 0903 	sub.w	r9, sl, r3
 8006c40:	9b06      	ldr	r3, [sp, #24]
 8006c42:	ebaa 0303 	sub.w	r3, sl, r3
 8006c46:	4599      	cmp	r9, r3
 8006c48:	bfa8      	it	ge
 8006c4a:	4699      	movge	r9, r3
 8006c4c:	f1b9 0f00 	cmp.w	r9, #0
 8006c50:	dc33      	bgt.n	8006cba <_printf_float+0x396>
 8006c52:	f04f 0800 	mov.w	r8, #0
 8006c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c5a:	f104 0b1a 	add.w	fp, r4, #26
 8006c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c60:	ebaa 0303 	sub.w	r3, sl, r3
 8006c64:	eba3 0309 	sub.w	r3, r3, r9
 8006c68:	4543      	cmp	r3, r8
 8006c6a:	f77f af79 	ble.w	8006b60 <_printf_float+0x23c>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	465a      	mov	r2, fp
 8006c72:	4631      	mov	r1, r6
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b8      	blx	r7
 8006c78:	3001      	adds	r0, #1
 8006c7a:	f43f aeae 	beq.w	80069da <_printf_float+0xb6>
 8006c7e:	f108 0801 	add.w	r8, r8, #1
 8006c82:	e7ec      	b.n	8006c5e <_printf_float+0x33a>
 8006c84:	4642      	mov	r2, r8
 8006c86:	4631      	mov	r1, r6
 8006c88:	4628      	mov	r0, r5
 8006c8a:	47b8      	blx	r7
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d1c2      	bne.n	8006c16 <_printf_float+0x2f2>
 8006c90:	e6a3      	b.n	80069da <_printf_float+0xb6>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4631      	mov	r1, r6
 8006c96:	4628      	mov	r0, r5
 8006c98:	9206      	str	r2, [sp, #24]
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	f43f ae9c 	beq.w	80069da <_printf_float+0xb6>
 8006ca2:	9a06      	ldr	r2, [sp, #24]
 8006ca4:	f10b 0b01 	add.w	fp, fp, #1
 8006ca8:	e7bb      	b.n	8006c22 <_printf_float+0x2fe>
 8006caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d1c0      	bne.n	8006c3a <_printf_float+0x316>
 8006cb8:	e68f      	b.n	80069da <_printf_float+0xb6>
 8006cba:	9a06      	ldr	r2, [sp, #24]
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	4442      	add	r2, r8
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b8      	blx	r7
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d1c3      	bne.n	8006c52 <_printf_float+0x32e>
 8006cca:	e686      	b.n	80069da <_printf_float+0xb6>
 8006ccc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cd0:	f1ba 0f01 	cmp.w	sl, #1
 8006cd4:	dc01      	bgt.n	8006cda <_printf_float+0x3b6>
 8006cd6:	07db      	lsls	r3, r3, #31
 8006cd8:	d536      	bpl.n	8006d48 <_printf_float+0x424>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4642      	mov	r2, r8
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	f43f ae78 	beq.w	80069da <_printf_float+0xb6>
 8006cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b8      	blx	r7
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f43f ae70 	beq.w	80069da <_printf_float+0xb6>
 8006cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2300      	movs	r3, #0
 8006d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d06:	f7f9 ff07 	bl	8000b18 <__aeabi_dcmpeq>
 8006d0a:	b9c0      	cbnz	r0, 8006d3e <_printf_float+0x41a>
 8006d0c:	4653      	mov	r3, sl
 8006d0e:	f108 0201 	add.w	r2, r8, #1
 8006d12:	4631      	mov	r1, r6
 8006d14:	4628      	mov	r0, r5
 8006d16:	47b8      	blx	r7
 8006d18:	3001      	adds	r0, #1
 8006d1a:	d10c      	bne.n	8006d36 <_printf_float+0x412>
 8006d1c:	e65d      	b.n	80069da <_printf_float+0xb6>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	465a      	mov	r2, fp
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f43f ae56 	beq.w	80069da <_printf_float+0xb6>
 8006d2e:	f108 0801 	add.w	r8, r8, #1
 8006d32:	45d0      	cmp	r8, sl
 8006d34:	dbf3      	blt.n	8006d1e <_printf_float+0x3fa>
 8006d36:	464b      	mov	r3, r9
 8006d38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d3c:	e6df      	b.n	8006afe <_printf_float+0x1da>
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	f104 0b1a 	add.w	fp, r4, #26
 8006d46:	e7f4      	b.n	8006d32 <_printf_float+0x40e>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4642      	mov	r2, r8
 8006d4c:	e7e1      	b.n	8006d12 <_printf_float+0x3ee>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	464a      	mov	r2, r9
 8006d52:	4631      	mov	r1, r6
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b8      	blx	r7
 8006d58:	3001      	adds	r0, #1
 8006d5a:	f43f ae3e 	beq.w	80069da <_printf_float+0xb6>
 8006d5e:	f108 0801 	add.w	r8, r8, #1
 8006d62:	68e3      	ldr	r3, [r4, #12]
 8006d64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d66:	1a5b      	subs	r3, r3, r1
 8006d68:	4543      	cmp	r3, r8
 8006d6a:	dcf0      	bgt.n	8006d4e <_printf_float+0x42a>
 8006d6c:	e6fc      	b.n	8006b68 <_printf_float+0x244>
 8006d6e:	f04f 0800 	mov.w	r8, #0
 8006d72:	f104 0919 	add.w	r9, r4, #25
 8006d76:	e7f4      	b.n	8006d62 <_printf_float+0x43e>

08006d78 <_printf_common>:
 8006d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7c:	4616      	mov	r6, r2
 8006d7e:	4698      	mov	r8, r3
 8006d80:	688a      	ldr	r2, [r1, #8]
 8006d82:	690b      	ldr	r3, [r1, #16]
 8006d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	bfb8      	it	lt
 8006d8c:	4613      	movlt	r3, r2
 8006d8e:	6033      	str	r3, [r6, #0]
 8006d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d94:	4607      	mov	r7, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	b10a      	cbz	r2, 8006d9e <_printf_common+0x26>
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	6033      	str	r3, [r6, #0]
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	0699      	lsls	r1, r3, #26
 8006da2:	bf42      	ittt	mi
 8006da4:	6833      	ldrmi	r3, [r6, #0]
 8006da6:	3302      	addmi	r3, #2
 8006da8:	6033      	strmi	r3, [r6, #0]
 8006daa:	6825      	ldr	r5, [r4, #0]
 8006dac:	f015 0506 	ands.w	r5, r5, #6
 8006db0:	d106      	bne.n	8006dc0 <_printf_common+0x48>
 8006db2:	f104 0a19 	add.w	sl, r4, #25
 8006db6:	68e3      	ldr	r3, [r4, #12]
 8006db8:	6832      	ldr	r2, [r6, #0]
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	42ab      	cmp	r3, r5
 8006dbe:	dc26      	bgt.n	8006e0e <_printf_common+0x96>
 8006dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006dc4:	6822      	ldr	r2, [r4, #0]
 8006dc6:	3b00      	subs	r3, #0
 8006dc8:	bf18      	it	ne
 8006dca:	2301      	movne	r3, #1
 8006dcc:	0692      	lsls	r2, r2, #26
 8006dce:	d42b      	bmi.n	8006e28 <_printf_common+0xb0>
 8006dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006dd4:	4641      	mov	r1, r8
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	47c8      	blx	r9
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d01e      	beq.n	8006e1c <_printf_common+0xa4>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	6922      	ldr	r2, [r4, #16]
 8006de2:	f003 0306 	and.w	r3, r3, #6
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	bf02      	ittt	eq
 8006dea:	68e5      	ldreq	r5, [r4, #12]
 8006dec:	6833      	ldreq	r3, [r6, #0]
 8006dee:	1aed      	subeq	r5, r5, r3
 8006df0:	68a3      	ldr	r3, [r4, #8]
 8006df2:	bf0c      	ite	eq
 8006df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006df8:	2500      	movne	r5, #0
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	bfc4      	itt	gt
 8006dfe:	1a9b      	subgt	r3, r3, r2
 8006e00:	18ed      	addgt	r5, r5, r3
 8006e02:	2600      	movs	r6, #0
 8006e04:	341a      	adds	r4, #26
 8006e06:	42b5      	cmp	r5, r6
 8006e08:	d11a      	bne.n	8006e40 <_printf_common+0xc8>
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e008      	b.n	8006e20 <_printf_common+0xa8>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4652      	mov	r2, sl
 8006e12:	4641      	mov	r1, r8
 8006e14:	4638      	mov	r0, r7
 8006e16:	47c8      	blx	r9
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d103      	bne.n	8006e24 <_printf_common+0xac>
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e24:	3501      	adds	r5, #1
 8006e26:	e7c6      	b.n	8006db6 <_printf_common+0x3e>
 8006e28:	18e1      	adds	r1, r4, r3
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	2030      	movs	r0, #48	@ 0x30
 8006e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e32:	4422      	add	r2, r4
 8006e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	e7c7      	b.n	8006dd0 <_printf_common+0x58>
 8006e40:	2301      	movs	r3, #1
 8006e42:	4622      	mov	r2, r4
 8006e44:	4641      	mov	r1, r8
 8006e46:	4638      	mov	r0, r7
 8006e48:	47c8      	blx	r9
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d0e6      	beq.n	8006e1c <_printf_common+0xa4>
 8006e4e:	3601      	adds	r6, #1
 8006e50:	e7d9      	b.n	8006e06 <_printf_common+0x8e>
	...

08006e54 <_printf_i>:
 8006e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e58:	7e0f      	ldrb	r7, [r1, #24]
 8006e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e5c:	2f78      	cmp	r7, #120	@ 0x78
 8006e5e:	4691      	mov	r9, r2
 8006e60:	4680      	mov	r8, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	469a      	mov	sl, r3
 8006e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e6a:	d807      	bhi.n	8006e7c <_printf_i+0x28>
 8006e6c:	2f62      	cmp	r7, #98	@ 0x62
 8006e6e:	d80a      	bhi.n	8006e86 <_printf_i+0x32>
 8006e70:	2f00      	cmp	r7, #0
 8006e72:	f000 80d2 	beq.w	800701a <_printf_i+0x1c6>
 8006e76:	2f58      	cmp	r7, #88	@ 0x58
 8006e78:	f000 80b9 	beq.w	8006fee <_printf_i+0x19a>
 8006e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e84:	e03a      	b.n	8006efc <_printf_i+0xa8>
 8006e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e8a:	2b15      	cmp	r3, #21
 8006e8c:	d8f6      	bhi.n	8006e7c <_printf_i+0x28>
 8006e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e94 <_printf_i+0x40>)
 8006e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e94:	08006eed 	.word	0x08006eed
 8006e98:	08006f01 	.word	0x08006f01
 8006e9c:	08006e7d 	.word	0x08006e7d
 8006ea0:	08006e7d 	.word	0x08006e7d
 8006ea4:	08006e7d 	.word	0x08006e7d
 8006ea8:	08006e7d 	.word	0x08006e7d
 8006eac:	08006f01 	.word	0x08006f01
 8006eb0:	08006e7d 	.word	0x08006e7d
 8006eb4:	08006e7d 	.word	0x08006e7d
 8006eb8:	08006e7d 	.word	0x08006e7d
 8006ebc:	08006e7d 	.word	0x08006e7d
 8006ec0:	08007001 	.word	0x08007001
 8006ec4:	08006f2b 	.word	0x08006f2b
 8006ec8:	08006fbb 	.word	0x08006fbb
 8006ecc:	08006e7d 	.word	0x08006e7d
 8006ed0:	08006e7d 	.word	0x08006e7d
 8006ed4:	08007023 	.word	0x08007023
 8006ed8:	08006e7d 	.word	0x08006e7d
 8006edc:	08006f2b 	.word	0x08006f2b
 8006ee0:	08006e7d 	.word	0x08006e7d
 8006ee4:	08006e7d 	.word	0x08006e7d
 8006ee8:	08006fc3 	.word	0x08006fc3
 8006eec:	6833      	ldr	r3, [r6, #0]
 8006eee:	1d1a      	adds	r2, r3, #4
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6032      	str	r2, [r6, #0]
 8006ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006efc:	2301      	movs	r3, #1
 8006efe:	e09d      	b.n	800703c <_printf_i+0x1e8>
 8006f00:	6833      	ldr	r3, [r6, #0]
 8006f02:	6820      	ldr	r0, [r4, #0]
 8006f04:	1d19      	adds	r1, r3, #4
 8006f06:	6031      	str	r1, [r6, #0]
 8006f08:	0606      	lsls	r6, r0, #24
 8006f0a:	d501      	bpl.n	8006f10 <_printf_i+0xbc>
 8006f0c:	681d      	ldr	r5, [r3, #0]
 8006f0e:	e003      	b.n	8006f18 <_printf_i+0xc4>
 8006f10:	0645      	lsls	r5, r0, #25
 8006f12:	d5fb      	bpl.n	8006f0c <_printf_i+0xb8>
 8006f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	da03      	bge.n	8006f24 <_printf_i+0xd0>
 8006f1c:	232d      	movs	r3, #45	@ 0x2d
 8006f1e:	426d      	negs	r5, r5
 8006f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f24:	4859      	ldr	r0, [pc, #356]	@ (800708c <_printf_i+0x238>)
 8006f26:	230a      	movs	r3, #10
 8006f28:	e011      	b.n	8006f4e <_printf_i+0xfa>
 8006f2a:	6821      	ldr	r1, [r4, #0]
 8006f2c:	6833      	ldr	r3, [r6, #0]
 8006f2e:	0608      	lsls	r0, r1, #24
 8006f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f34:	d402      	bmi.n	8006f3c <_printf_i+0xe8>
 8006f36:	0649      	lsls	r1, r1, #25
 8006f38:	bf48      	it	mi
 8006f3a:	b2ad      	uxthmi	r5, r5
 8006f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f3e:	4853      	ldr	r0, [pc, #332]	@ (800708c <_printf_i+0x238>)
 8006f40:	6033      	str	r3, [r6, #0]
 8006f42:	bf14      	ite	ne
 8006f44:	230a      	movne	r3, #10
 8006f46:	2308      	moveq	r3, #8
 8006f48:	2100      	movs	r1, #0
 8006f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f4e:	6866      	ldr	r6, [r4, #4]
 8006f50:	60a6      	str	r6, [r4, #8]
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	bfa2      	ittt	ge
 8006f56:	6821      	ldrge	r1, [r4, #0]
 8006f58:	f021 0104 	bicge.w	r1, r1, #4
 8006f5c:	6021      	strge	r1, [r4, #0]
 8006f5e:	b90d      	cbnz	r5, 8006f64 <_printf_i+0x110>
 8006f60:	2e00      	cmp	r6, #0
 8006f62:	d04b      	beq.n	8006ffc <_printf_i+0x1a8>
 8006f64:	4616      	mov	r6, r2
 8006f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f6e:	5dc7      	ldrb	r7, [r0, r7]
 8006f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f74:	462f      	mov	r7, r5
 8006f76:	42bb      	cmp	r3, r7
 8006f78:	460d      	mov	r5, r1
 8006f7a:	d9f4      	bls.n	8006f66 <_printf_i+0x112>
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d10b      	bne.n	8006f98 <_printf_i+0x144>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	07df      	lsls	r7, r3, #31
 8006f84:	d508      	bpl.n	8006f98 <_printf_i+0x144>
 8006f86:	6923      	ldr	r3, [r4, #16]
 8006f88:	6861      	ldr	r1, [r4, #4]
 8006f8a:	4299      	cmp	r1, r3
 8006f8c:	bfde      	ittt	le
 8006f8e:	2330      	movle	r3, #48	@ 0x30
 8006f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f98:	1b92      	subs	r2, r2, r6
 8006f9a:	6122      	str	r2, [r4, #16]
 8006f9c:	f8cd a000 	str.w	sl, [sp]
 8006fa0:	464b      	mov	r3, r9
 8006fa2:	aa03      	add	r2, sp, #12
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	f7ff fee6 	bl	8006d78 <_printf_common>
 8006fac:	3001      	adds	r0, #1
 8006fae:	d14a      	bne.n	8007046 <_printf_i+0x1f2>
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	b004      	add	sp, #16
 8006fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	f043 0320 	orr.w	r3, r3, #32
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	4833      	ldr	r0, [pc, #204]	@ (8007090 <_printf_i+0x23c>)
 8006fc4:	2778      	movs	r7, #120	@ 0x78
 8006fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	6831      	ldr	r1, [r6, #0]
 8006fce:	061f      	lsls	r7, r3, #24
 8006fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fd4:	d402      	bmi.n	8006fdc <_printf_i+0x188>
 8006fd6:	065f      	lsls	r7, r3, #25
 8006fd8:	bf48      	it	mi
 8006fda:	b2ad      	uxthmi	r5, r5
 8006fdc:	6031      	str	r1, [r6, #0]
 8006fde:	07d9      	lsls	r1, r3, #31
 8006fe0:	bf44      	itt	mi
 8006fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8006fe6:	6023      	strmi	r3, [r4, #0]
 8006fe8:	b11d      	cbz	r5, 8006ff2 <_printf_i+0x19e>
 8006fea:	2310      	movs	r3, #16
 8006fec:	e7ac      	b.n	8006f48 <_printf_i+0xf4>
 8006fee:	4827      	ldr	r0, [pc, #156]	@ (800708c <_printf_i+0x238>)
 8006ff0:	e7e9      	b.n	8006fc6 <_printf_i+0x172>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	f023 0320 	bic.w	r3, r3, #32
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	e7f6      	b.n	8006fea <_printf_i+0x196>
 8006ffc:	4616      	mov	r6, r2
 8006ffe:	e7bd      	b.n	8006f7c <_printf_i+0x128>
 8007000:	6833      	ldr	r3, [r6, #0]
 8007002:	6825      	ldr	r5, [r4, #0]
 8007004:	6961      	ldr	r1, [r4, #20]
 8007006:	1d18      	adds	r0, r3, #4
 8007008:	6030      	str	r0, [r6, #0]
 800700a:	062e      	lsls	r6, r5, #24
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	d501      	bpl.n	8007014 <_printf_i+0x1c0>
 8007010:	6019      	str	r1, [r3, #0]
 8007012:	e002      	b.n	800701a <_printf_i+0x1c6>
 8007014:	0668      	lsls	r0, r5, #25
 8007016:	d5fb      	bpl.n	8007010 <_printf_i+0x1bc>
 8007018:	8019      	strh	r1, [r3, #0]
 800701a:	2300      	movs	r3, #0
 800701c:	6123      	str	r3, [r4, #16]
 800701e:	4616      	mov	r6, r2
 8007020:	e7bc      	b.n	8006f9c <_printf_i+0x148>
 8007022:	6833      	ldr	r3, [r6, #0]
 8007024:	1d1a      	adds	r2, r3, #4
 8007026:	6032      	str	r2, [r6, #0]
 8007028:	681e      	ldr	r6, [r3, #0]
 800702a:	6862      	ldr	r2, [r4, #4]
 800702c:	2100      	movs	r1, #0
 800702e:	4630      	mov	r0, r6
 8007030:	f7f9 f8f6 	bl	8000220 <memchr>
 8007034:	b108      	cbz	r0, 800703a <_printf_i+0x1e6>
 8007036:	1b80      	subs	r0, r0, r6
 8007038:	6060      	str	r0, [r4, #4]
 800703a:	6863      	ldr	r3, [r4, #4]
 800703c:	6123      	str	r3, [r4, #16]
 800703e:	2300      	movs	r3, #0
 8007040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007044:	e7aa      	b.n	8006f9c <_printf_i+0x148>
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	4632      	mov	r2, r6
 800704a:	4649      	mov	r1, r9
 800704c:	4640      	mov	r0, r8
 800704e:	47d0      	blx	sl
 8007050:	3001      	adds	r0, #1
 8007052:	d0ad      	beq.n	8006fb0 <_printf_i+0x15c>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	079b      	lsls	r3, r3, #30
 8007058:	d413      	bmi.n	8007082 <_printf_i+0x22e>
 800705a:	68e0      	ldr	r0, [r4, #12]
 800705c:	9b03      	ldr	r3, [sp, #12]
 800705e:	4298      	cmp	r0, r3
 8007060:	bfb8      	it	lt
 8007062:	4618      	movlt	r0, r3
 8007064:	e7a6      	b.n	8006fb4 <_printf_i+0x160>
 8007066:	2301      	movs	r3, #1
 8007068:	4632      	mov	r2, r6
 800706a:	4649      	mov	r1, r9
 800706c:	4640      	mov	r0, r8
 800706e:	47d0      	blx	sl
 8007070:	3001      	adds	r0, #1
 8007072:	d09d      	beq.n	8006fb0 <_printf_i+0x15c>
 8007074:	3501      	adds	r5, #1
 8007076:	68e3      	ldr	r3, [r4, #12]
 8007078:	9903      	ldr	r1, [sp, #12]
 800707a:	1a5b      	subs	r3, r3, r1
 800707c:	42ab      	cmp	r3, r5
 800707e:	dcf2      	bgt.n	8007066 <_printf_i+0x212>
 8007080:	e7eb      	b.n	800705a <_printf_i+0x206>
 8007082:	2500      	movs	r5, #0
 8007084:	f104 0619 	add.w	r6, r4, #25
 8007088:	e7f5      	b.n	8007076 <_printf_i+0x222>
 800708a:	bf00      	nop
 800708c:	0800bd92 	.word	0x0800bd92
 8007090:	0800bda3 	.word	0x0800bda3

08007094 <_scanf_float>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	b087      	sub	sp, #28
 800709a:	4617      	mov	r7, r2
 800709c:	9303      	str	r3, [sp, #12]
 800709e:	688b      	ldr	r3, [r1, #8]
 80070a0:	1e5a      	subs	r2, r3, #1
 80070a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80070a6:	bf81      	itttt	hi
 80070a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80070ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80070b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80070b4:	608b      	strhi	r3, [r1, #8]
 80070b6:	680b      	ldr	r3, [r1, #0]
 80070b8:	460a      	mov	r2, r1
 80070ba:	f04f 0500 	mov.w	r5, #0
 80070be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80070c2:	f842 3b1c 	str.w	r3, [r2], #28
 80070c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070ca:	4680      	mov	r8, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	bf98      	it	ls
 80070d0:	f04f 0b00 	movls.w	fp, #0
 80070d4:	9201      	str	r2, [sp, #4]
 80070d6:	4616      	mov	r6, r2
 80070d8:	46aa      	mov	sl, r5
 80070da:	46a9      	mov	r9, r5
 80070dc:	9502      	str	r5, [sp, #8]
 80070de:	68a2      	ldr	r2, [r4, #8]
 80070e0:	b152      	cbz	r2, 80070f8 <_scanf_float+0x64>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80070e8:	d864      	bhi.n	80071b4 <_scanf_float+0x120>
 80070ea:	2b40      	cmp	r3, #64	@ 0x40
 80070ec:	d83c      	bhi.n	8007168 <_scanf_float+0xd4>
 80070ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80070f2:	b2c8      	uxtb	r0, r1
 80070f4:	280e      	cmp	r0, #14
 80070f6:	d93a      	bls.n	800716e <_scanf_float+0xda>
 80070f8:	f1b9 0f00 	cmp.w	r9, #0
 80070fc:	d003      	beq.n	8007106 <_scanf_float+0x72>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800710a:	f1ba 0f01 	cmp.w	sl, #1
 800710e:	f200 8117 	bhi.w	8007340 <_scanf_float+0x2ac>
 8007112:	9b01      	ldr	r3, [sp, #4]
 8007114:	429e      	cmp	r6, r3
 8007116:	f200 8108 	bhi.w	800732a <_scanf_float+0x296>
 800711a:	2001      	movs	r0, #1
 800711c:	b007      	add	sp, #28
 800711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007122:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007126:	2a0d      	cmp	r2, #13
 8007128:	d8e6      	bhi.n	80070f8 <_scanf_float+0x64>
 800712a:	a101      	add	r1, pc, #4	@ (adr r1, 8007130 <_scanf_float+0x9c>)
 800712c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007130:	08007277 	.word	0x08007277
 8007134:	080070f9 	.word	0x080070f9
 8007138:	080070f9 	.word	0x080070f9
 800713c:	080070f9 	.word	0x080070f9
 8007140:	080072d7 	.word	0x080072d7
 8007144:	080072af 	.word	0x080072af
 8007148:	080070f9 	.word	0x080070f9
 800714c:	080070f9 	.word	0x080070f9
 8007150:	08007285 	.word	0x08007285
 8007154:	080070f9 	.word	0x080070f9
 8007158:	080070f9 	.word	0x080070f9
 800715c:	080070f9 	.word	0x080070f9
 8007160:	080070f9 	.word	0x080070f9
 8007164:	0800723d 	.word	0x0800723d
 8007168:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800716c:	e7db      	b.n	8007126 <_scanf_float+0x92>
 800716e:	290e      	cmp	r1, #14
 8007170:	d8c2      	bhi.n	80070f8 <_scanf_float+0x64>
 8007172:	a001      	add	r0, pc, #4	@ (adr r0, 8007178 <_scanf_float+0xe4>)
 8007174:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007178:	0800722d 	.word	0x0800722d
 800717c:	080070f9 	.word	0x080070f9
 8007180:	0800722d 	.word	0x0800722d
 8007184:	080072c3 	.word	0x080072c3
 8007188:	080070f9 	.word	0x080070f9
 800718c:	080071d5 	.word	0x080071d5
 8007190:	08007213 	.word	0x08007213
 8007194:	08007213 	.word	0x08007213
 8007198:	08007213 	.word	0x08007213
 800719c:	08007213 	.word	0x08007213
 80071a0:	08007213 	.word	0x08007213
 80071a4:	08007213 	.word	0x08007213
 80071a8:	08007213 	.word	0x08007213
 80071ac:	08007213 	.word	0x08007213
 80071b0:	08007213 	.word	0x08007213
 80071b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80071b6:	d809      	bhi.n	80071cc <_scanf_float+0x138>
 80071b8:	2b60      	cmp	r3, #96	@ 0x60
 80071ba:	d8b2      	bhi.n	8007122 <_scanf_float+0x8e>
 80071bc:	2b54      	cmp	r3, #84	@ 0x54
 80071be:	d07b      	beq.n	80072b8 <_scanf_float+0x224>
 80071c0:	2b59      	cmp	r3, #89	@ 0x59
 80071c2:	d199      	bne.n	80070f8 <_scanf_float+0x64>
 80071c4:	2d07      	cmp	r5, #7
 80071c6:	d197      	bne.n	80070f8 <_scanf_float+0x64>
 80071c8:	2508      	movs	r5, #8
 80071ca:	e02c      	b.n	8007226 <_scanf_float+0x192>
 80071cc:	2b74      	cmp	r3, #116	@ 0x74
 80071ce:	d073      	beq.n	80072b8 <_scanf_float+0x224>
 80071d0:	2b79      	cmp	r3, #121	@ 0x79
 80071d2:	e7f6      	b.n	80071c2 <_scanf_float+0x12e>
 80071d4:	6821      	ldr	r1, [r4, #0]
 80071d6:	05c8      	lsls	r0, r1, #23
 80071d8:	d51b      	bpl.n	8007212 <_scanf_float+0x17e>
 80071da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80071de:	6021      	str	r1, [r4, #0]
 80071e0:	f109 0901 	add.w	r9, r9, #1
 80071e4:	f1bb 0f00 	cmp.w	fp, #0
 80071e8:	d003      	beq.n	80071f2 <_scanf_float+0x15e>
 80071ea:	3201      	adds	r2, #1
 80071ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071f0:	60a2      	str	r2, [r4, #8]
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	60a3      	str	r3, [r4, #8]
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	3301      	adds	r3, #1
 80071fc:	6123      	str	r3, [r4, #16]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3b01      	subs	r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	f340 8087 	ble.w	8007318 <_scanf_float+0x284>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	3301      	adds	r3, #1
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	e765      	b.n	80070de <_scanf_float+0x4a>
 8007212:	eb1a 0105 	adds.w	r1, sl, r5
 8007216:	f47f af6f 	bne.w	80070f8 <_scanf_float+0x64>
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007220:	6022      	str	r2, [r4, #0]
 8007222:	460d      	mov	r5, r1
 8007224:	468a      	mov	sl, r1
 8007226:	f806 3b01 	strb.w	r3, [r6], #1
 800722a:	e7e2      	b.n	80071f2 <_scanf_float+0x15e>
 800722c:	6822      	ldr	r2, [r4, #0]
 800722e:	0610      	lsls	r0, r2, #24
 8007230:	f57f af62 	bpl.w	80070f8 <_scanf_float+0x64>
 8007234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007238:	6022      	str	r2, [r4, #0]
 800723a:	e7f4      	b.n	8007226 <_scanf_float+0x192>
 800723c:	f1ba 0f00 	cmp.w	sl, #0
 8007240:	d10e      	bne.n	8007260 <_scanf_float+0x1cc>
 8007242:	f1b9 0f00 	cmp.w	r9, #0
 8007246:	d10e      	bne.n	8007266 <_scanf_float+0x1d2>
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800724e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007252:	d108      	bne.n	8007266 <_scanf_float+0x1d2>
 8007254:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007258:	6022      	str	r2, [r4, #0]
 800725a:	f04f 0a01 	mov.w	sl, #1
 800725e:	e7e2      	b.n	8007226 <_scanf_float+0x192>
 8007260:	f1ba 0f02 	cmp.w	sl, #2
 8007264:	d055      	beq.n	8007312 <_scanf_float+0x27e>
 8007266:	2d01      	cmp	r5, #1
 8007268:	d002      	beq.n	8007270 <_scanf_float+0x1dc>
 800726a:	2d04      	cmp	r5, #4
 800726c:	f47f af44 	bne.w	80070f8 <_scanf_float+0x64>
 8007270:	3501      	adds	r5, #1
 8007272:	b2ed      	uxtb	r5, r5
 8007274:	e7d7      	b.n	8007226 <_scanf_float+0x192>
 8007276:	f1ba 0f01 	cmp.w	sl, #1
 800727a:	f47f af3d 	bne.w	80070f8 <_scanf_float+0x64>
 800727e:	f04f 0a02 	mov.w	sl, #2
 8007282:	e7d0      	b.n	8007226 <_scanf_float+0x192>
 8007284:	b97d      	cbnz	r5, 80072a6 <_scanf_float+0x212>
 8007286:	f1b9 0f00 	cmp.w	r9, #0
 800728a:	f47f af38 	bne.w	80070fe <_scanf_float+0x6a>
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007294:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007298:	f040 8108 	bne.w	80074ac <_scanf_float+0x418>
 800729c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072a0:	6022      	str	r2, [r4, #0]
 80072a2:	2501      	movs	r5, #1
 80072a4:	e7bf      	b.n	8007226 <_scanf_float+0x192>
 80072a6:	2d03      	cmp	r5, #3
 80072a8:	d0e2      	beq.n	8007270 <_scanf_float+0x1dc>
 80072aa:	2d05      	cmp	r5, #5
 80072ac:	e7de      	b.n	800726c <_scanf_float+0x1d8>
 80072ae:	2d02      	cmp	r5, #2
 80072b0:	f47f af22 	bne.w	80070f8 <_scanf_float+0x64>
 80072b4:	2503      	movs	r5, #3
 80072b6:	e7b6      	b.n	8007226 <_scanf_float+0x192>
 80072b8:	2d06      	cmp	r5, #6
 80072ba:	f47f af1d 	bne.w	80070f8 <_scanf_float+0x64>
 80072be:	2507      	movs	r5, #7
 80072c0:	e7b1      	b.n	8007226 <_scanf_float+0x192>
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	0591      	lsls	r1, r2, #22
 80072c6:	f57f af17 	bpl.w	80070f8 <_scanf_float+0x64>
 80072ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80072ce:	6022      	str	r2, [r4, #0]
 80072d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80072d4:	e7a7      	b.n	8007226 <_scanf_float+0x192>
 80072d6:	6822      	ldr	r2, [r4, #0]
 80072d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80072dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80072e0:	d006      	beq.n	80072f0 <_scanf_float+0x25c>
 80072e2:	0550      	lsls	r0, r2, #21
 80072e4:	f57f af08 	bpl.w	80070f8 <_scanf_float+0x64>
 80072e8:	f1b9 0f00 	cmp.w	r9, #0
 80072ec:	f000 80de 	beq.w	80074ac <_scanf_float+0x418>
 80072f0:	0591      	lsls	r1, r2, #22
 80072f2:	bf58      	it	pl
 80072f4:	9902      	ldrpl	r1, [sp, #8]
 80072f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072fa:	bf58      	it	pl
 80072fc:	eba9 0101 	subpl.w	r1, r9, r1
 8007300:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007304:	bf58      	it	pl
 8007306:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800730a:	6022      	str	r2, [r4, #0]
 800730c:	f04f 0900 	mov.w	r9, #0
 8007310:	e789      	b.n	8007226 <_scanf_float+0x192>
 8007312:	f04f 0a03 	mov.w	sl, #3
 8007316:	e786      	b.n	8007226 <_scanf_float+0x192>
 8007318:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800731c:	4639      	mov	r1, r7
 800731e:	4640      	mov	r0, r8
 8007320:	4798      	blx	r3
 8007322:	2800      	cmp	r0, #0
 8007324:	f43f aedb 	beq.w	80070de <_scanf_float+0x4a>
 8007328:	e6e6      	b.n	80070f8 <_scanf_float+0x64>
 800732a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800732e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007332:	463a      	mov	r2, r7
 8007334:	4640      	mov	r0, r8
 8007336:	4798      	blx	r3
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	3b01      	subs	r3, #1
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	e6e8      	b.n	8007112 <_scanf_float+0x7e>
 8007340:	1e6b      	subs	r3, r5, #1
 8007342:	2b06      	cmp	r3, #6
 8007344:	d824      	bhi.n	8007390 <_scanf_float+0x2fc>
 8007346:	2d02      	cmp	r5, #2
 8007348:	d836      	bhi.n	80073b8 <_scanf_float+0x324>
 800734a:	9b01      	ldr	r3, [sp, #4]
 800734c:	429e      	cmp	r6, r3
 800734e:	f67f aee4 	bls.w	800711a <_scanf_float+0x86>
 8007352:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007356:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800735a:	463a      	mov	r2, r7
 800735c:	4640      	mov	r0, r8
 800735e:	4798      	blx	r3
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	3b01      	subs	r3, #1
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	e7f0      	b.n	800734a <_scanf_float+0x2b6>
 8007368:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800736c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007370:	463a      	mov	r2, r7
 8007372:	4640      	mov	r0, r8
 8007374:	4798      	blx	r3
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	3b01      	subs	r3, #1
 800737a:	6123      	str	r3, [r4, #16]
 800737c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007380:	fa5f fa8a 	uxtb.w	sl, sl
 8007384:	f1ba 0f02 	cmp.w	sl, #2
 8007388:	d1ee      	bne.n	8007368 <_scanf_float+0x2d4>
 800738a:	3d03      	subs	r5, #3
 800738c:	b2ed      	uxtb	r5, r5
 800738e:	1b76      	subs	r6, r6, r5
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	05da      	lsls	r2, r3, #23
 8007394:	d530      	bpl.n	80073f8 <_scanf_float+0x364>
 8007396:	055b      	lsls	r3, r3, #21
 8007398:	d511      	bpl.n	80073be <_scanf_float+0x32a>
 800739a:	9b01      	ldr	r3, [sp, #4]
 800739c:	429e      	cmp	r6, r3
 800739e:	f67f aebc 	bls.w	800711a <_scanf_float+0x86>
 80073a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073aa:	463a      	mov	r2, r7
 80073ac:	4640      	mov	r0, r8
 80073ae:	4798      	blx	r3
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	e7f0      	b.n	800739a <_scanf_float+0x306>
 80073b8:	46aa      	mov	sl, r5
 80073ba:	46b3      	mov	fp, r6
 80073bc:	e7de      	b.n	800737c <_scanf_float+0x2e8>
 80073be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	2965      	cmp	r1, #101	@ 0x65
 80073c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80073ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80073ce:	6123      	str	r3, [r4, #16]
 80073d0:	d00c      	beq.n	80073ec <_scanf_float+0x358>
 80073d2:	2945      	cmp	r1, #69	@ 0x45
 80073d4:	d00a      	beq.n	80073ec <_scanf_float+0x358>
 80073d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073da:	463a      	mov	r2, r7
 80073dc:	4640      	mov	r0, r8
 80073de:	4798      	blx	r3
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	1eb5      	subs	r5, r6, #2
 80073ea:	6123      	str	r3, [r4, #16]
 80073ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073f0:	463a      	mov	r2, r7
 80073f2:	4640      	mov	r0, r8
 80073f4:	4798      	blx	r3
 80073f6:	462e      	mov	r6, r5
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	f012 0210 	ands.w	r2, r2, #16
 80073fe:	d001      	beq.n	8007404 <_scanf_float+0x370>
 8007400:	2000      	movs	r0, #0
 8007402:	e68b      	b.n	800711c <_scanf_float+0x88>
 8007404:	7032      	strb	r2, [r6, #0]
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800740c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007410:	d11c      	bne.n	800744c <_scanf_float+0x3b8>
 8007412:	9b02      	ldr	r3, [sp, #8]
 8007414:	454b      	cmp	r3, r9
 8007416:	eba3 0209 	sub.w	r2, r3, r9
 800741a:	d123      	bne.n	8007464 <_scanf_float+0x3d0>
 800741c:	9901      	ldr	r1, [sp, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	4640      	mov	r0, r8
 8007422:	f002 fc65 	bl	8009cf0 <_strtod_r>
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	6821      	ldr	r1, [r4, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f011 0f02 	tst.w	r1, #2
 8007430:	ec57 6b10 	vmov	r6, r7, d0
 8007434:	f103 0204 	add.w	r2, r3, #4
 8007438:	d01f      	beq.n	800747a <_scanf_float+0x3e6>
 800743a:	9903      	ldr	r1, [sp, #12]
 800743c:	600a      	str	r2, [r1, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	e9c3 6700 	strd	r6, r7, [r3]
 8007444:	68e3      	ldr	r3, [r4, #12]
 8007446:	3301      	adds	r3, #1
 8007448:	60e3      	str	r3, [r4, #12]
 800744a:	e7d9      	b.n	8007400 <_scanf_float+0x36c>
 800744c:	9b04      	ldr	r3, [sp, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0e4      	beq.n	800741c <_scanf_float+0x388>
 8007452:	9905      	ldr	r1, [sp, #20]
 8007454:	230a      	movs	r3, #10
 8007456:	3101      	adds	r1, #1
 8007458:	4640      	mov	r0, r8
 800745a:	f002 fcc9 	bl	8009df0 <_strtol_r>
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	9e05      	ldr	r6, [sp, #20]
 8007462:	1ac2      	subs	r2, r0, r3
 8007464:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007468:	429e      	cmp	r6, r3
 800746a:	bf28      	it	cs
 800746c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007470:	4910      	ldr	r1, [pc, #64]	@ (80074b4 <_scanf_float+0x420>)
 8007472:	4630      	mov	r0, r6
 8007474:	f000 f954 	bl	8007720 <siprintf>
 8007478:	e7d0      	b.n	800741c <_scanf_float+0x388>
 800747a:	f011 0f04 	tst.w	r1, #4
 800747e:	9903      	ldr	r1, [sp, #12]
 8007480:	600a      	str	r2, [r1, #0]
 8007482:	d1dc      	bne.n	800743e <_scanf_float+0x3aa>
 8007484:	681d      	ldr	r5, [r3, #0]
 8007486:	4632      	mov	r2, r6
 8007488:	463b      	mov	r3, r7
 800748a:	4630      	mov	r0, r6
 800748c:	4639      	mov	r1, r7
 800748e:	f7f9 fb75 	bl	8000b7c <__aeabi_dcmpun>
 8007492:	b128      	cbz	r0, 80074a0 <_scanf_float+0x40c>
 8007494:	4808      	ldr	r0, [pc, #32]	@ (80074b8 <_scanf_float+0x424>)
 8007496:	f000 fad9 	bl	8007a4c <nanf>
 800749a:	ed85 0a00 	vstr	s0, [r5]
 800749e:	e7d1      	b.n	8007444 <_scanf_float+0x3b0>
 80074a0:	4630      	mov	r0, r6
 80074a2:	4639      	mov	r1, r7
 80074a4:	f7f9 fbc8 	bl	8000c38 <__aeabi_d2f>
 80074a8:	6028      	str	r0, [r5, #0]
 80074aa:	e7cb      	b.n	8007444 <_scanf_float+0x3b0>
 80074ac:	f04f 0900 	mov.w	r9, #0
 80074b0:	e629      	b.n	8007106 <_scanf_float+0x72>
 80074b2:	bf00      	nop
 80074b4:	0800bdb4 	.word	0x0800bdb4
 80074b8:	0800c14d 	.word	0x0800c14d

080074bc <std>:
 80074bc:	2300      	movs	r3, #0
 80074be:	b510      	push	{r4, lr}
 80074c0:	4604      	mov	r4, r0
 80074c2:	e9c0 3300 	strd	r3, r3, [r0]
 80074c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074ca:	6083      	str	r3, [r0, #8]
 80074cc:	8181      	strh	r1, [r0, #12]
 80074ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80074d0:	81c2      	strh	r2, [r0, #14]
 80074d2:	6183      	str	r3, [r0, #24]
 80074d4:	4619      	mov	r1, r3
 80074d6:	2208      	movs	r2, #8
 80074d8:	305c      	adds	r0, #92	@ 0x5c
 80074da:	f000 fa19 	bl	8007910 <memset>
 80074de:	4b0d      	ldr	r3, [pc, #52]	@ (8007514 <std+0x58>)
 80074e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80074e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <std+0x5c>)
 80074e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074e6:	4b0d      	ldr	r3, [pc, #52]	@ (800751c <std+0x60>)
 80074e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007520 <std+0x64>)
 80074ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <std+0x68>)
 80074f0:	6224      	str	r4, [r4, #32]
 80074f2:	429c      	cmp	r4, r3
 80074f4:	d006      	beq.n	8007504 <std+0x48>
 80074f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074fa:	4294      	cmp	r4, r2
 80074fc:	d002      	beq.n	8007504 <std+0x48>
 80074fe:	33d0      	adds	r3, #208	@ 0xd0
 8007500:	429c      	cmp	r4, r3
 8007502:	d105      	bne.n	8007510 <std+0x54>
 8007504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800750c:	f000 ba8c 	b.w	8007a28 <__retarget_lock_init_recursive>
 8007510:	bd10      	pop	{r4, pc}
 8007512:	bf00      	nop
 8007514:	08007761 	.word	0x08007761
 8007518:	08007783 	.word	0x08007783
 800751c:	080077bb 	.word	0x080077bb
 8007520:	080077df 	.word	0x080077df
 8007524:	200003d0 	.word	0x200003d0

08007528 <stdio_exit_handler>:
 8007528:	4a02      	ldr	r2, [pc, #8]	@ (8007534 <stdio_exit_handler+0xc>)
 800752a:	4903      	ldr	r1, [pc, #12]	@ (8007538 <stdio_exit_handler+0x10>)
 800752c:	4803      	ldr	r0, [pc, #12]	@ (800753c <stdio_exit_handler+0x14>)
 800752e:	f000 b869 	b.w	8007604 <_fwalk_sglue>
 8007532:	bf00      	nop
 8007534:	20000014 	.word	0x20000014
 8007538:	0800a431 	.word	0x0800a431
 800753c:	20000024 	.word	0x20000024

08007540 <cleanup_stdio>:
 8007540:	6841      	ldr	r1, [r0, #4]
 8007542:	4b0c      	ldr	r3, [pc, #48]	@ (8007574 <cleanup_stdio+0x34>)
 8007544:	4299      	cmp	r1, r3
 8007546:	b510      	push	{r4, lr}
 8007548:	4604      	mov	r4, r0
 800754a:	d001      	beq.n	8007550 <cleanup_stdio+0x10>
 800754c:	f002 ff70 	bl	800a430 <_fflush_r>
 8007550:	68a1      	ldr	r1, [r4, #8]
 8007552:	4b09      	ldr	r3, [pc, #36]	@ (8007578 <cleanup_stdio+0x38>)
 8007554:	4299      	cmp	r1, r3
 8007556:	d002      	beq.n	800755e <cleanup_stdio+0x1e>
 8007558:	4620      	mov	r0, r4
 800755a:	f002 ff69 	bl	800a430 <_fflush_r>
 800755e:	68e1      	ldr	r1, [r4, #12]
 8007560:	4b06      	ldr	r3, [pc, #24]	@ (800757c <cleanup_stdio+0x3c>)
 8007562:	4299      	cmp	r1, r3
 8007564:	d004      	beq.n	8007570 <cleanup_stdio+0x30>
 8007566:	4620      	mov	r0, r4
 8007568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756c:	f002 bf60 	b.w	800a430 <_fflush_r>
 8007570:	bd10      	pop	{r4, pc}
 8007572:	bf00      	nop
 8007574:	200003d0 	.word	0x200003d0
 8007578:	20000438 	.word	0x20000438
 800757c:	200004a0 	.word	0x200004a0

08007580 <global_stdio_init.part.0>:
 8007580:	b510      	push	{r4, lr}
 8007582:	4b0b      	ldr	r3, [pc, #44]	@ (80075b0 <global_stdio_init.part.0+0x30>)
 8007584:	4c0b      	ldr	r4, [pc, #44]	@ (80075b4 <global_stdio_init.part.0+0x34>)
 8007586:	4a0c      	ldr	r2, [pc, #48]	@ (80075b8 <global_stdio_init.part.0+0x38>)
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	4620      	mov	r0, r4
 800758c:	2200      	movs	r2, #0
 800758e:	2104      	movs	r1, #4
 8007590:	f7ff ff94 	bl	80074bc <std>
 8007594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007598:	2201      	movs	r2, #1
 800759a:	2109      	movs	r1, #9
 800759c:	f7ff ff8e 	bl	80074bc <std>
 80075a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075a4:	2202      	movs	r2, #2
 80075a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075aa:	2112      	movs	r1, #18
 80075ac:	f7ff bf86 	b.w	80074bc <std>
 80075b0:	20000508 	.word	0x20000508
 80075b4:	200003d0 	.word	0x200003d0
 80075b8:	08007529 	.word	0x08007529

080075bc <__sfp_lock_acquire>:
 80075bc:	4801      	ldr	r0, [pc, #4]	@ (80075c4 <__sfp_lock_acquire+0x8>)
 80075be:	f000 ba34 	b.w	8007a2a <__retarget_lock_acquire_recursive>
 80075c2:	bf00      	nop
 80075c4:	20000511 	.word	0x20000511

080075c8 <__sfp_lock_release>:
 80075c8:	4801      	ldr	r0, [pc, #4]	@ (80075d0 <__sfp_lock_release+0x8>)
 80075ca:	f000 ba2f 	b.w	8007a2c <__retarget_lock_release_recursive>
 80075ce:	bf00      	nop
 80075d0:	20000511 	.word	0x20000511

080075d4 <__sinit>:
 80075d4:	b510      	push	{r4, lr}
 80075d6:	4604      	mov	r4, r0
 80075d8:	f7ff fff0 	bl	80075bc <__sfp_lock_acquire>
 80075dc:	6a23      	ldr	r3, [r4, #32]
 80075de:	b11b      	cbz	r3, 80075e8 <__sinit+0x14>
 80075e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e4:	f7ff bff0 	b.w	80075c8 <__sfp_lock_release>
 80075e8:	4b04      	ldr	r3, [pc, #16]	@ (80075fc <__sinit+0x28>)
 80075ea:	6223      	str	r3, [r4, #32]
 80075ec:	4b04      	ldr	r3, [pc, #16]	@ (8007600 <__sinit+0x2c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f5      	bne.n	80075e0 <__sinit+0xc>
 80075f4:	f7ff ffc4 	bl	8007580 <global_stdio_init.part.0>
 80075f8:	e7f2      	b.n	80075e0 <__sinit+0xc>
 80075fa:	bf00      	nop
 80075fc:	08007541 	.word	0x08007541
 8007600:	20000508 	.word	0x20000508

08007604 <_fwalk_sglue>:
 8007604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007608:	4607      	mov	r7, r0
 800760a:	4688      	mov	r8, r1
 800760c:	4614      	mov	r4, r2
 800760e:	2600      	movs	r6, #0
 8007610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007614:	f1b9 0901 	subs.w	r9, r9, #1
 8007618:	d505      	bpl.n	8007626 <_fwalk_sglue+0x22>
 800761a:	6824      	ldr	r4, [r4, #0]
 800761c:	2c00      	cmp	r4, #0
 800761e:	d1f7      	bne.n	8007610 <_fwalk_sglue+0xc>
 8007620:	4630      	mov	r0, r6
 8007622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007626:	89ab      	ldrh	r3, [r5, #12]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d907      	bls.n	800763c <_fwalk_sglue+0x38>
 800762c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007630:	3301      	adds	r3, #1
 8007632:	d003      	beq.n	800763c <_fwalk_sglue+0x38>
 8007634:	4629      	mov	r1, r5
 8007636:	4638      	mov	r0, r7
 8007638:	47c0      	blx	r8
 800763a:	4306      	orrs	r6, r0
 800763c:	3568      	adds	r5, #104	@ 0x68
 800763e:	e7e9      	b.n	8007614 <_fwalk_sglue+0x10>

08007640 <iprintf>:
 8007640:	b40f      	push	{r0, r1, r2, r3}
 8007642:	b507      	push	{r0, r1, r2, lr}
 8007644:	4906      	ldr	r1, [pc, #24]	@ (8007660 <iprintf+0x20>)
 8007646:	ab04      	add	r3, sp, #16
 8007648:	6808      	ldr	r0, [r1, #0]
 800764a:	f853 2b04 	ldr.w	r2, [r3], #4
 800764e:	6881      	ldr	r1, [r0, #8]
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	f002 fd51 	bl	800a0f8 <_vfiprintf_r>
 8007656:	b003      	add	sp, #12
 8007658:	f85d eb04 	ldr.w	lr, [sp], #4
 800765c:	b004      	add	sp, #16
 800765e:	4770      	bx	lr
 8007660:	20000020 	.word	0x20000020

08007664 <_puts_r>:
 8007664:	6a03      	ldr	r3, [r0, #32]
 8007666:	b570      	push	{r4, r5, r6, lr}
 8007668:	6884      	ldr	r4, [r0, #8]
 800766a:	4605      	mov	r5, r0
 800766c:	460e      	mov	r6, r1
 800766e:	b90b      	cbnz	r3, 8007674 <_puts_r+0x10>
 8007670:	f7ff ffb0 	bl	80075d4 <__sinit>
 8007674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007676:	07db      	lsls	r3, r3, #31
 8007678:	d405      	bmi.n	8007686 <_puts_r+0x22>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	0598      	lsls	r0, r3, #22
 800767e:	d402      	bmi.n	8007686 <_puts_r+0x22>
 8007680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007682:	f000 f9d2 	bl	8007a2a <__retarget_lock_acquire_recursive>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	0719      	lsls	r1, r3, #28
 800768a:	d502      	bpl.n	8007692 <_puts_r+0x2e>
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d135      	bne.n	80076fe <_puts_r+0x9a>
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f000 f8e5 	bl	8007864 <__swsetup_r>
 800769a:	b380      	cbz	r0, 80076fe <_puts_r+0x9a>
 800769c:	f04f 35ff 	mov.w	r5, #4294967295
 80076a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076a2:	07da      	lsls	r2, r3, #31
 80076a4:	d405      	bmi.n	80076b2 <_puts_r+0x4e>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	059b      	lsls	r3, r3, #22
 80076aa:	d402      	bmi.n	80076b2 <_puts_r+0x4e>
 80076ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ae:	f000 f9bd 	bl	8007a2c <__retarget_lock_release_recursive>
 80076b2:	4628      	mov	r0, r5
 80076b4:	bd70      	pop	{r4, r5, r6, pc}
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	da04      	bge.n	80076c4 <_puts_r+0x60>
 80076ba:	69a2      	ldr	r2, [r4, #24]
 80076bc:	429a      	cmp	r2, r3
 80076be:	dc17      	bgt.n	80076f0 <_puts_r+0x8c>
 80076c0:	290a      	cmp	r1, #10
 80076c2:	d015      	beq.n	80076f0 <_puts_r+0x8c>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	6022      	str	r2, [r4, #0]
 80076ca:	7019      	strb	r1, [r3, #0]
 80076cc:	68a3      	ldr	r3, [r4, #8]
 80076ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076d2:	3b01      	subs	r3, #1
 80076d4:	60a3      	str	r3, [r4, #8]
 80076d6:	2900      	cmp	r1, #0
 80076d8:	d1ed      	bne.n	80076b6 <_puts_r+0x52>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da11      	bge.n	8007702 <_puts_r+0x9e>
 80076de:	4622      	mov	r2, r4
 80076e0:	210a      	movs	r1, #10
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 f87f 	bl	80077e6 <__swbuf_r>
 80076e8:	3001      	adds	r0, #1
 80076ea:	d0d7      	beq.n	800769c <_puts_r+0x38>
 80076ec:	250a      	movs	r5, #10
 80076ee:	e7d7      	b.n	80076a0 <_puts_r+0x3c>
 80076f0:	4622      	mov	r2, r4
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f877 	bl	80077e6 <__swbuf_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d1e7      	bne.n	80076cc <_puts_r+0x68>
 80076fc:	e7ce      	b.n	800769c <_puts_r+0x38>
 80076fe:	3e01      	subs	r6, #1
 8007700:	e7e4      	b.n	80076cc <_puts_r+0x68>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	6022      	str	r2, [r4, #0]
 8007708:	220a      	movs	r2, #10
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e7ee      	b.n	80076ec <_puts_r+0x88>
	...

08007710 <puts>:
 8007710:	4b02      	ldr	r3, [pc, #8]	@ (800771c <puts+0xc>)
 8007712:	4601      	mov	r1, r0
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	f7ff bfa5 	b.w	8007664 <_puts_r>
 800771a:	bf00      	nop
 800771c:	20000020 	.word	0x20000020

08007720 <siprintf>:
 8007720:	b40e      	push	{r1, r2, r3}
 8007722:	b500      	push	{lr}
 8007724:	b09c      	sub	sp, #112	@ 0x70
 8007726:	ab1d      	add	r3, sp, #116	@ 0x74
 8007728:	9002      	str	r0, [sp, #8]
 800772a:	9006      	str	r0, [sp, #24]
 800772c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007730:	4809      	ldr	r0, [pc, #36]	@ (8007758 <siprintf+0x38>)
 8007732:	9107      	str	r1, [sp, #28]
 8007734:	9104      	str	r1, [sp, #16]
 8007736:	4909      	ldr	r1, [pc, #36]	@ (800775c <siprintf+0x3c>)
 8007738:	f853 2b04 	ldr.w	r2, [r3], #4
 800773c:	9105      	str	r1, [sp, #20]
 800773e:	6800      	ldr	r0, [r0, #0]
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	a902      	add	r1, sp, #8
 8007744:	f002 fbb2 	bl	8009eac <_svfiprintf_r>
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	b01c      	add	sp, #112	@ 0x70
 8007750:	f85d eb04 	ldr.w	lr, [sp], #4
 8007754:	b003      	add	sp, #12
 8007756:	4770      	bx	lr
 8007758:	20000020 	.word	0x20000020
 800775c:	ffff0208 	.word	0xffff0208

08007760 <__sread>:
 8007760:	b510      	push	{r4, lr}
 8007762:	460c      	mov	r4, r1
 8007764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007768:	f000 f900 	bl	800796c <_read_r>
 800776c:	2800      	cmp	r0, #0
 800776e:	bfab      	itete	ge
 8007770:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007772:	89a3      	ldrhlt	r3, [r4, #12]
 8007774:	181b      	addge	r3, r3, r0
 8007776:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800777a:	bfac      	ite	ge
 800777c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800777e:	81a3      	strhlt	r3, [r4, #12]
 8007780:	bd10      	pop	{r4, pc}

08007782 <__swrite>:
 8007782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007786:	461f      	mov	r7, r3
 8007788:	898b      	ldrh	r3, [r1, #12]
 800778a:	05db      	lsls	r3, r3, #23
 800778c:	4605      	mov	r5, r0
 800778e:	460c      	mov	r4, r1
 8007790:	4616      	mov	r6, r2
 8007792:	d505      	bpl.n	80077a0 <__swrite+0x1e>
 8007794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007798:	2302      	movs	r3, #2
 800779a:	2200      	movs	r2, #0
 800779c:	f000 f8d4 	bl	8007948 <_lseek_r>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	4632      	mov	r2, r6
 80077ae:	463b      	mov	r3, r7
 80077b0:	4628      	mov	r0, r5
 80077b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077b6:	f000 b8fb 	b.w	80079b0 <_write_r>

080077ba <__sseek>:
 80077ba:	b510      	push	{r4, lr}
 80077bc:	460c      	mov	r4, r1
 80077be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c2:	f000 f8c1 	bl	8007948 <_lseek_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	bf15      	itete	ne
 80077cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077d6:	81a3      	strheq	r3, [r4, #12]
 80077d8:	bf18      	it	ne
 80077da:	81a3      	strhne	r3, [r4, #12]
 80077dc:	bd10      	pop	{r4, pc}

080077de <__sclose>:
 80077de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e2:	f000 b8a1 	b.w	8007928 <_close_r>

080077e6 <__swbuf_r>:
 80077e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e8:	460e      	mov	r6, r1
 80077ea:	4614      	mov	r4, r2
 80077ec:	4605      	mov	r5, r0
 80077ee:	b118      	cbz	r0, 80077f8 <__swbuf_r+0x12>
 80077f0:	6a03      	ldr	r3, [r0, #32]
 80077f2:	b90b      	cbnz	r3, 80077f8 <__swbuf_r+0x12>
 80077f4:	f7ff feee 	bl	80075d4 <__sinit>
 80077f8:	69a3      	ldr	r3, [r4, #24]
 80077fa:	60a3      	str	r3, [r4, #8]
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	071a      	lsls	r2, r3, #28
 8007800:	d501      	bpl.n	8007806 <__swbuf_r+0x20>
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	b943      	cbnz	r3, 8007818 <__swbuf_r+0x32>
 8007806:	4621      	mov	r1, r4
 8007808:	4628      	mov	r0, r5
 800780a:	f000 f82b 	bl	8007864 <__swsetup_r>
 800780e:	b118      	cbz	r0, 8007818 <__swbuf_r+0x32>
 8007810:	f04f 37ff 	mov.w	r7, #4294967295
 8007814:	4638      	mov	r0, r7
 8007816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	6922      	ldr	r2, [r4, #16]
 800781c:	1a98      	subs	r0, r3, r2
 800781e:	6963      	ldr	r3, [r4, #20]
 8007820:	b2f6      	uxtb	r6, r6
 8007822:	4283      	cmp	r3, r0
 8007824:	4637      	mov	r7, r6
 8007826:	dc05      	bgt.n	8007834 <__swbuf_r+0x4e>
 8007828:	4621      	mov	r1, r4
 800782a:	4628      	mov	r0, r5
 800782c:	f002 fe00 	bl	800a430 <_fflush_r>
 8007830:	2800      	cmp	r0, #0
 8007832:	d1ed      	bne.n	8007810 <__swbuf_r+0x2a>
 8007834:	68a3      	ldr	r3, [r4, #8]
 8007836:	3b01      	subs	r3, #1
 8007838:	60a3      	str	r3, [r4, #8]
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	6022      	str	r2, [r4, #0]
 8007840:	701e      	strb	r6, [r3, #0]
 8007842:	6962      	ldr	r2, [r4, #20]
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	429a      	cmp	r2, r3
 8007848:	d004      	beq.n	8007854 <__swbuf_r+0x6e>
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	07db      	lsls	r3, r3, #31
 800784e:	d5e1      	bpl.n	8007814 <__swbuf_r+0x2e>
 8007850:	2e0a      	cmp	r6, #10
 8007852:	d1df      	bne.n	8007814 <__swbuf_r+0x2e>
 8007854:	4621      	mov	r1, r4
 8007856:	4628      	mov	r0, r5
 8007858:	f002 fdea 	bl	800a430 <_fflush_r>
 800785c:	2800      	cmp	r0, #0
 800785e:	d0d9      	beq.n	8007814 <__swbuf_r+0x2e>
 8007860:	e7d6      	b.n	8007810 <__swbuf_r+0x2a>
	...

08007864 <__swsetup_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4b29      	ldr	r3, [pc, #164]	@ (800790c <__swsetup_r+0xa8>)
 8007868:	4605      	mov	r5, r0
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	460c      	mov	r4, r1
 800786e:	b118      	cbz	r0, 8007878 <__swsetup_r+0x14>
 8007870:	6a03      	ldr	r3, [r0, #32]
 8007872:	b90b      	cbnz	r3, 8007878 <__swsetup_r+0x14>
 8007874:	f7ff feae 	bl	80075d4 <__sinit>
 8007878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787c:	0719      	lsls	r1, r3, #28
 800787e:	d422      	bmi.n	80078c6 <__swsetup_r+0x62>
 8007880:	06da      	lsls	r2, r3, #27
 8007882:	d407      	bmi.n	8007894 <__swsetup_r+0x30>
 8007884:	2209      	movs	r2, #9
 8007886:	602a      	str	r2, [r5, #0]
 8007888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800788c:	81a3      	strh	r3, [r4, #12]
 800788e:	f04f 30ff 	mov.w	r0, #4294967295
 8007892:	e033      	b.n	80078fc <__swsetup_r+0x98>
 8007894:	0758      	lsls	r0, r3, #29
 8007896:	d512      	bpl.n	80078be <__swsetup_r+0x5a>
 8007898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800789a:	b141      	cbz	r1, 80078ae <__swsetup_r+0x4a>
 800789c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078a0:	4299      	cmp	r1, r3
 80078a2:	d002      	beq.n	80078aa <__swsetup_r+0x46>
 80078a4:	4628      	mov	r0, r5
 80078a6:	f000 ff23 	bl	80086f0 <_free_r>
 80078aa:	2300      	movs	r3, #0
 80078ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80078ae:	89a3      	ldrh	r3, [r4, #12]
 80078b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	2300      	movs	r3, #0
 80078b8:	6063      	str	r3, [r4, #4]
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	f043 0308 	orr.w	r3, r3, #8
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	6923      	ldr	r3, [r4, #16]
 80078c8:	b94b      	cbnz	r3, 80078de <__swsetup_r+0x7a>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078d4:	d003      	beq.n	80078de <__swsetup_r+0x7a>
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f002 fdf7 	bl	800a4cc <__smakebuf_r>
 80078de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e2:	f013 0201 	ands.w	r2, r3, #1
 80078e6:	d00a      	beq.n	80078fe <__swsetup_r+0x9a>
 80078e8:	2200      	movs	r2, #0
 80078ea:	60a2      	str	r2, [r4, #8]
 80078ec:	6962      	ldr	r2, [r4, #20]
 80078ee:	4252      	negs	r2, r2
 80078f0:	61a2      	str	r2, [r4, #24]
 80078f2:	6922      	ldr	r2, [r4, #16]
 80078f4:	b942      	cbnz	r2, 8007908 <__swsetup_r+0xa4>
 80078f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078fa:	d1c5      	bne.n	8007888 <__swsetup_r+0x24>
 80078fc:	bd38      	pop	{r3, r4, r5, pc}
 80078fe:	0799      	lsls	r1, r3, #30
 8007900:	bf58      	it	pl
 8007902:	6962      	ldrpl	r2, [r4, #20]
 8007904:	60a2      	str	r2, [r4, #8]
 8007906:	e7f4      	b.n	80078f2 <__swsetup_r+0x8e>
 8007908:	2000      	movs	r0, #0
 800790a:	e7f7      	b.n	80078fc <__swsetup_r+0x98>
 800790c:	20000020 	.word	0x20000020

08007910 <memset>:
 8007910:	4402      	add	r2, r0
 8007912:	4603      	mov	r3, r0
 8007914:	4293      	cmp	r3, r2
 8007916:	d100      	bne.n	800791a <memset+0xa>
 8007918:	4770      	bx	lr
 800791a:	f803 1b01 	strb.w	r1, [r3], #1
 800791e:	e7f9      	b.n	8007914 <memset+0x4>

08007920 <_localeconv_r>:
 8007920:	4800      	ldr	r0, [pc, #0]	@ (8007924 <_localeconv_r+0x4>)
 8007922:	4770      	bx	lr
 8007924:	20000160 	.word	0x20000160

08007928 <_close_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d06      	ldr	r5, [pc, #24]	@ (8007944 <_close_r+0x1c>)
 800792c:	2300      	movs	r3, #0
 800792e:	4604      	mov	r4, r0
 8007930:	4608      	mov	r0, r1
 8007932:	602b      	str	r3, [r5, #0]
 8007934:	f7f9 ffc1 	bl	80018ba <_close>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d102      	bne.n	8007942 <_close_r+0x1a>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	b103      	cbz	r3, 8007942 <_close_r+0x1a>
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	2000050c 	.word	0x2000050c

08007948 <_lseek_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	@ (8007968 <_lseek_r+0x20>)
 800794c:	4604      	mov	r4, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	602a      	str	r2, [r5, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7f9 ffd6 	bl	8001908 <_lseek>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_lseek_r+0x1e>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b103      	cbz	r3, 8007966 <_lseek_r+0x1e>
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	2000050c 	.word	0x2000050c

0800796c <_read_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4d07      	ldr	r5, [pc, #28]	@ (800798c <_read_r+0x20>)
 8007970:	4604      	mov	r4, r0
 8007972:	4608      	mov	r0, r1
 8007974:	4611      	mov	r1, r2
 8007976:	2200      	movs	r2, #0
 8007978:	602a      	str	r2, [r5, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f7f9 ff64 	bl	8001848 <_read>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_read_r+0x1e>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_read_r+0x1e>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	2000050c 	.word	0x2000050c

08007990 <_sbrk_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4d06      	ldr	r5, [pc, #24]	@ (80079ac <_sbrk_r+0x1c>)
 8007994:	2300      	movs	r3, #0
 8007996:	4604      	mov	r4, r0
 8007998:	4608      	mov	r0, r1
 800799a:	602b      	str	r3, [r5, #0]
 800799c:	f7f9 ffc2 	bl	8001924 <_sbrk>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_sbrk_r+0x1a>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_sbrk_r+0x1a>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	2000050c 	.word	0x2000050c

080079b0 <_write_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4d07      	ldr	r5, [pc, #28]	@ (80079d0 <_write_r+0x20>)
 80079b4:	4604      	mov	r4, r0
 80079b6:	4608      	mov	r0, r1
 80079b8:	4611      	mov	r1, r2
 80079ba:	2200      	movs	r2, #0
 80079bc:	602a      	str	r2, [r5, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	f7f9 ff5f 	bl	8001882 <_write>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_write_r+0x1e>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_write_r+0x1e>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	2000050c 	.word	0x2000050c

080079d4 <__errno>:
 80079d4:	4b01      	ldr	r3, [pc, #4]	@ (80079dc <__errno+0x8>)
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000020 	.word	0x20000020

080079e0 <__libc_init_array>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007a18 <__libc_init_array+0x38>)
 80079e4:	4c0d      	ldr	r4, [pc, #52]	@ (8007a1c <__libc_init_array+0x3c>)
 80079e6:	1b64      	subs	r4, r4, r5
 80079e8:	10a4      	asrs	r4, r4, #2
 80079ea:	2600      	movs	r6, #0
 80079ec:	42a6      	cmp	r6, r4
 80079ee:	d109      	bne.n	8007a04 <__libc_init_array+0x24>
 80079f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007a20 <__libc_init_array+0x40>)
 80079f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007a24 <__libc_init_array+0x44>)
 80079f4:	f003 fa1a 	bl	800ae2c <_init>
 80079f8:	1b64      	subs	r4, r4, r5
 80079fa:	10a4      	asrs	r4, r4, #2
 80079fc:	2600      	movs	r6, #0
 80079fe:	42a6      	cmp	r6, r4
 8007a00:	d105      	bne.n	8007a0e <__libc_init_array+0x2e>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a08:	4798      	blx	r3
 8007a0a:	3601      	adds	r6, #1
 8007a0c:	e7ee      	b.n	80079ec <__libc_init_array+0xc>
 8007a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a12:	4798      	blx	r3
 8007a14:	3601      	adds	r6, #1
 8007a16:	e7f2      	b.n	80079fe <__libc_init_array+0x1e>
 8007a18:	0800c1b8 	.word	0x0800c1b8
 8007a1c:	0800c1b8 	.word	0x0800c1b8
 8007a20:	0800c1b8 	.word	0x0800c1b8
 8007a24:	0800c1bc 	.word	0x0800c1bc

08007a28 <__retarget_lock_init_recursive>:
 8007a28:	4770      	bx	lr

08007a2a <__retarget_lock_acquire_recursive>:
 8007a2a:	4770      	bx	lr

08007a2c <__retarget_lock_release_recursive>:
 8007a2c:	4770      	bx	lr

08007a2e <memcpy>:
 8007a2e:	440a      	add	r2, r1
 8007a30:	4291      	cmp	r1, r2
 8007a32:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a36:	d100      	bne.n	8007a3a <memcpy+0xc>
 8007a38:	4770      	bx	lr
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a44:	4291      	cmp	r1, r2
 8007a46:	d1f9      	bne.n	8007a3c <memcpy+0xe>
 8007a48:	bd10      	pop	{r4, pc}
	...

08007a4c <nanf>:
 8007a4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007a54 <nanf+0x8>
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	7fc00000 	.word	0x7fc00000

08007a58 <quorem>:
 8007a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	6903      	ldr	r3, [r0, #16]
 8007a5e:	690c      	ldr	r4, [r1, #16]
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	4607      	mov	r7, r0
 8007a64:	db7e      	blt.n	8007b64 <quorem+0x10c>
 8007a66:	3c01      	subs	r4, #1
 8007a68:	f101 0814 	add.w	r8, r1, #20
 8007a6c:	00a3      	lsls	r3, r4, #2
 8007a6e:	f100 0514 	add.w	r5, r0, #20
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a82:	3301      	adds	r3, #1
 8007a84:	429a      	cmp	r2, r3
 8007a86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a8a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a8e:	d32e      	bcc.n	8007aee <quorem+0x96>
 8007a90:	f04f 0a00 	mov.w	sl, #0
 8007a94:	46c4      	mov	ip, r8
 8007a96:	46ae      	mov	lr, r5
 8007a98:	46d3      	mov	fp, sl
 8007a9a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a9e:	b298      	uxth	r0, r3
 8007aa0:	fb06 a000 	mla	r0, r6, r0, sl
 8007aa4:	0c02      	lsrs	r2, r0, #16
 8007aa6:	0c1b      	lsrs	r3, r3, #16
 8007aa8:	fb06 2303 	mla	r3, r6, r3, r2
 8007aac:	f8de 2000 	ldr.w	r2, [lr]
 8007ab0:	b280      	uxth	r0, r0
 8007ab2:	b292      	uxth	r2, r2
 8007ab4:	1a12      	subs	r2, r2, r0
 8007ab6:	445a      	add	r2, fp
 8007ab8:	f8de 0000 	ldr.w	r0, [lr]
 8007abc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ac6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007aca:	b292      	uxth	r2, r2
 8007acc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ad0:	45e1      	cmp	r9, ip
 8007ad2:	f84e 2b04 	str.w	r2, [lr], #4
 8007ad6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ada:	d2de      	bcs.n	8007a9a <quorem+0x42>
 8007adc:	9b00      	ldr	r3, [sp, #0]
 8007ade:	58eb      	ldr	r3, [r5, r3]
 8007ae0:	b92b      	cbnz	r3, 8007aee <quorem+0x96>
 8007ae2:	9b01      	ldr	r3, [sp, #4]
 8007ae4:	3b04      	subs	r3, #4
 8007ae6:	429d      	cmp	r5, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	d32f      	bcc.n	8007b4c <quorem+0xf4>
 8007aec:	613c      	str	r4, [r7, #16]
 8007aee:	4638      	mov	r0, r7
 8007af0:	f001 f90c 	bl	8008d0c <__mcmp>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	db25      	blt.n	8007b44 <quorem+0xec>
 8007af8:	4629      	mov	r1, r5
 8007afa:	2000      	movs	r0, #0
 8007afc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b00:	f8d1 c000 	ldr.w	ip, [r1]
 8007b04:	fa1f fe82 	uxth.w	lr, r2
 8007b08:	fa1f f38c 	uxth.w	r3, ip
 8007b0c:	eba3 030e 	sub.w	r3, r3, lr
 8007b10:	4403      	add	r3, r0
 8007b12:	0c12      	lsrs	r2, r2, #16
 8007b14:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b22:	45c1      	cmp	r9, r8
 8007b24:	f841 3b04 	str.w	r3, [r1], #4
 8007b28:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b2c:	d2e6      	bcs.n	8007afc <quorem+0xa4>
 8007b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b36:	b922      	cbnz	r2, 8007b42 <quorem+0xea>
 8007b38:	3b04      	subs	r3, #4
 8007b3a:	429d      	cmp	r5, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	d30b      	bcc.n	8007b58 <quorem+0x100>
 8007b40:	613c      	str	r4, [r7, #16]
 8007b42:	3601      	adds	r6, #1
 8007b44:	4630      	mov	r0, r6
 8007b46:	b003      	add	sp, #12
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4c:	6812      	ldr	r2, [r2, #0]
 8007b4e:	3b04      	subs	r3, #4
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	d1cb      	bne.n	8007aec <quorem+0x94>
 8007b54:	3c01      	subs	r4, #1
 8007b56:	e7c6      	b.n	8007ae6 <quorem+0x8e>
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	3b04      	subs	r3, #4
 8007b5c:	2a00      	cmp	r2, #0
 8007b5e:	d1ef      	bne.n	8007b40 <quorem+0xe8>
 8007b60:	3c01      	subs	r4, #1
 8007b62:	e7ea      	b.n	8007b3a <quorem+0xe2>
 8007b64:	2000      	movs	r0, #0
 8007b66:	e7ee      	b.n	8007b46 <quorem+0xee>

08007b68 <_dtoa_r>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	69c7      	ldr	r7, [r0, #28]
 8007b6e:	b099      	sub	sp, #100	@ 0x64
 8007b70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b74:	ec55 4b10 	vmov	r4, r5, d0
 8007b78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007b7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b7c:	4683      	mov	fp, r0
 8007b7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b82:	b97f      	cbnz	r7, 8007ba4 <_dtoa_r+0x3c>
 8007b84:	2010      	movs	r0, #16
 8007b86:	f7fe fd77 	bl	8006678 <malloc>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b90:	b920      	cbnz	r0, 8007b9c <_dtoa_r+0x34>
 8007b92:	4ba7      	ldr	r3, [pc, #668]	@ (8007e30 <_dtoa_r+0x2c8>)
 8007b94:	21ef      	movs	r1, #239	@ 0xef
 8007b96:	48a7      	ldr	r0, [pc, #668]	@ (8007e34 <_dtoa_r+0x2cc>)
 8007b98:	f002 fd2a 	bl	800a5f0 <__assert_func>
 8007b9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ba0:	6007      	str	r7, [r0, #0]
 8007ba2:	60c7      	str	r7, [r0, #12]
 8007ba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ba8:	6819      	ldr	r1, [r3, #0]
 8007baa:	b159      	cbz	r1, 8007bc4 <_dtoa_r+0x5c>
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	604a      	str	r2, [r1, #4]
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4093      	lsls	r3, r2
 8007bb4:	608b      	str	r3, [r1, #8]
 8007bb6:	4658      	mov	r0, fp
 8007bb8:	f000 fe24 	bl	8008804 <_Bfree>
 8007bbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	1e2b      	subs	r3, r5, #0
 8007bc6:	bfb9      	ittee	lt
 8007bc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bcc:	9303      	strlt	r3, [sp, #12]
 8007bce:	2300      	movge	r3, #0
 8007bd0:	6033      	strge	r3, [r6, #0]
 8007bd2:	9f03      	ldr	r7, [sp, #12]
 8007bd4:	4b98      	ldr	r3, [pc, #608]	@ (8007e38 <_dtoa_r+0x2d0>)
 8007bd6:	bfbc      	itt	lt
 8007bd8:	2201      	movlt	r2, #1
 8007bda:	6032      	strlt	r2, [r6, #0]
 8007bdc:	43bb      	bics	r3, r7
 8007bde:	d112      	bne.n	8007c06 <_dtoa_r+0x9e>
 8007be0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007be2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bec:	4323      	orrs	r3, r4
 8007bee:	f000 854d 	beq.w	800868c <_dtoa_r+0xb24>
 8007bf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e4c <_dtoa_r+0x2e4>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 854f 	beq.w	800869c <_dtoa_r+0xb34>
 8007bfe:	f10a 0303 	add.w	r3, sl, #3
 8007c02:	f000 bd49 	b.w	8008698 <_dtoa_r+0xb30>
 8007c06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	ec51 0b17 	vmov	r0, r1, d7
 8007c10:	2300      	movs	r3, #0
 8007c12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007c16:	f7f8 ff7f 	bl	8000b18 <__aeabi_dcmpeq>
 8007c1a:	4680      	mov	r8, r0
 8007c1c:	b158      	cbz	r0, 8007c36 <_dtoa_r+0xce>
 8007c1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c20:	2301      	movs	r3, #1
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c26:	b113      	cbz	r3, 8007c2e <_dtoa_r+0xc6>
 8007c28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c2a:	4b84      	ldr	r3, [pc, #528]	@ (8007e3c <_dtoa_r+0x2d4>)
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007e50 <_dtoa_r+0x2e8>
 8007c32:	f000 bd33 	b.w	800869c <_dtoa_r+0xb34>
 8007c36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c3a:	aa16      	add	r2, sp, #88	@ 0x58
 8007c3c:	a917      	add	r1, sp, #92	@ 0x5c
 8007c3e:	4658      	mov	r0, fp
 8007c40:	f001 f984 	bl	8008f4c <__d2b>
 8007c44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c48:	4681      	mov	r9, r0
 8007c4a:	2e00      	cmp	r6, #0
 8007c4c:	d077      	beq.n	8007d3e <_dtoa_r+0x1d6>
 8007c4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c68:	4619      	mov	r1, r3
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4b74      	ldr	r3, [pc, #464]	@ (8007e40 <_dtoa_r+0x2d8>)
 8007c6e:	f7f8 fb33 	bl	80002d8 <__aeabi_dsub>
 8007c72:	a369      	add	r3, pc, #420	@ (adr r3, 8007e18 <_dtoa_r+0x2b0>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 fce6 	bl	8000648 <__aeabi_dmul>
 8007c7c:	a368      	add	r3, pc, #416	@ (adr r3, 8007e20 <_dtoa_r+0x2b8>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fb2b 	bl	80002dc <__adddf3>
 8007c86:	4604      	mov	r4, r0
 8007c88:	4630      	mov	r0, r6
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	f7f8 fc72 	bl	8000574 <__aeabi_i2d>
 8007c90:	a365      	add	r3, pc, #404	@ (adr r3, 8007e28 <_dtoa_r+0x2c0>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	f7f8 fcd7 	bl	8000648 <__aeabi_dmul>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	f7f8 fb1b 	bl	80002dc <__adddf3>
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	460d      	mov	r5, r1
 8007caa:	f7f8 ff7d 	bl	8000ba8 <__aeabi_d2iz>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	f7f8 ff38 	bl	8000b2c <__aeabi_dcmplt>
 8007cbc:	b140      	cbz	r0, 8007cd0 <_dtoa_r+0x168>
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f7f8 fc58 	bl	8000574 <__aeabi_i2d>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	f7f8 ff26 	bl	8000b18 <__aeabi_dcmpeq>
 8007ccc:	b900      	cbnz	r0, 8007cd0 <_dtoa_r+0x168>
 8007cce:	3f01      	subs	r7, #1
 8007cd0:	2f16      	cmp	r7, #22
 8007cd2:	d851      	bhi.n	8007d78 <_dtoa_r+0x210>
 8007cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8007e44 <_dtoa_r+0x2dc>)
 8007cd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ce2:	f7f8 ff23 	bl	8000b2c <__aeabi_dcmplt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d048      	beq.n	8007d7c <_dtoa_r+0x214>
 8007cea:	3f01      	subs	r7, #1
 8007cec:	2300      	movs	r3, #0
 8007cee:	9312      	str	r3, [sp, #72]	@ 0x48
 8007cf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007cf2:	1b9b      	subs	r3, r3, r6
 8007cf4:	1e5a      	subs	r2, r3, #1
 8007cf6:	bf44      	itt	mi
 8007cf8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007cfc:	2300      	movmi	r3, #0
 8007cfe:	9208      	str	r2, [sp, #32]
 8007d00:	bf54      	ite	pl
 8007d02:	f04f 0800 	movpl.w	r8, #0
 8007d06:	9308      	strmi	r3, [sp, #32]
 8007d08:	2f00      	cmp	r7, #0
 8007d0a:	db39      	blt.n	8007d80 <_dtoa_r+0x218>
 8007d0c:	9b08      	ldr	r3, [sp, #32]
 8007d0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007d10:	443b      	add	r3, r7
 8007d12:	9308      	str	r3, [sp, #32]
 8007d14:	2300      	movs	r3, #0
 8007d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d1a:	2b09      	cmp	r3, #9
 8007d1c:	d864      	bhi.n	8007de8 <_dtoa_r+0x280>
 8007d1e:	2b05      	cmp	r3, #5
 8007d20:	bfc4      	itt	gt
 8007d22:	3b04      	subgt	r3, #4
 8007d24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d28:	f1a3 0302 	sub.w	r3, r3, #2
 8007d2c:	bfcc      	ite	gt
 8007d2e:	2400      	movgt	r4, #0
 8007d30:	2401      	movle	r4, #1
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d863      	bhi.n	8007dfe <_dtoa_r+0x296>
 8007d36:	e8df f003 	tbb	[pc, r3]
 8007d3a:	372a      	.short	0x372a
 8007d3c:	5535      	.short	0x5535
 8007d3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007d42:	441e      	add	r6, r3
 8007d44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	bfc1      	itttt	gt
 8007d4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d50:	409f      	lslgt	r7, r3
 8007d52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d5a:	bfd6      	itet	le
 8007d5c:	f1c3 0320 	rsble	r3, r3, #32
 8007d60:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d64:	fa04 f003 	lslle.w	r0, r4, r3
 8007d68:	f7f8 fbf4 	bl	8000554 <__aeabi_ui2d>
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d72:	3e01      	subs	r6, #1
 8007d74:	9214      	str	r2, [sp, #80]	@ 0x50
 8007d76:	e777      	b.n	8007c68 <_dtoa_r+0x100>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e7b8      	b.n	8007cee <_dtoa_r+0x186>
 8007d7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007d7e:	e7b7      	b.n	8007cf0 <_dtoa_r+0x188>
 8007d80:	427b      	negs	r3, r7
 8007d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d84:	2300      	movs	r3, #0
 8007d86:	eba8 0807 	sub.w	r8, r8, r7
 8007d8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d8c:	e7c4      	b.n	8007d18 <_dtoa_r+0x1b0>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	dc35      	bgt.n	8007e04 <_dtoa_r+0x29c>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	9307      	str	r3, [sp, #28]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007da2:	e00b      	b.n	8007dbc <_dtoa_r+0x254>
 8007da4:	2301      	movs	r3, #1
 8007da6:	e7f3      	b.n	8007d90 <_dtoa_r+0x228>
 8007da8:	2300      	movs	r3, #0
 8007daa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dae:	18fb      	adds	r3, r7, r3
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	9307      	str	r3, [sp, #28]
 8007db8:	bfb8      	it	lt
 8007dba:	2301      	movlt	r3, #1
 8007dbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	f102 0514 	add.w	r5, r2, #20
 8007dc8:	429d      	cmp	r5, r3
 8007dca:	d91f      	bls.n	8007e0c <_dtoa_r+0x2a4>
 8007dcc:	6041      	str	r1, [r0, #4]
 8007dce:	4658      	mov	r0, fp
 8007dd0:	f000 fcd8 	bl	8008784 <_Balloc>
 8007dd4:	4682      	mov	sl, r0
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d13c      	bne.n	8007e54 <_dtoa_r+0x2ec>
 8007dda:	4b1b      	ldr	r3, [pc, #108]	@ (8007e48 <_dtoa_r+0x2e0>)
 8007ddc:	4602      	mov	r2, r0
 8007dde:	f240 11af 	movw	r1, #431	@ 0x1af
 8007de2:	e6d8      	b.n	8007b96 <_dtoa_r+0x2e>
 8007de4:	2301      	movs	r3, #1
 8007de6:	e7e0      	b.n	8007daa <_dtoa_r+0x242>
 8007de8:	2401      	movs	r4, #1
 8007dea:	2300      	movs	r3, #0
 8007dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007df0:	f04f 33ff 	mov.w	r3, #4294967295
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	9307      	str	r3, [sp, #28]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2312      	movs	r3, #18
 8007dfc:	e7d0      	b.n	8007da0 <_dtoa_r+0x238>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e02:	e7f5      	b.n	8007df0 <_dtoa_r+0x288>
 8007e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	9307      	str	r3, [sp, #28]
 8007e0a:	e7d7      	b.n	8007dbc <_dtoa_r+0x254>
 8007e0c:	3101      	adds	r1, #1
 8007e0e:	0052      	lsls	r2, r2, #1
 8007e10:	e7d8      	b.n	8007dc4 <_dtoa_r+0x25c>
 8007e12:	bf00      	nop
 8007e14:	f3af 8000 	nop.w
 8007e18:	636f4361 	.word	0x636f4361
 8007e1c:	3fd287a7 	.word	0x3fd287a7
 8007e20:	8b60c8b3 	.word	0x8b60c8b3
 8007e24:	3fc68a28 	.word	0x3fc68a28
 8007e28:	509f79fb 	.word	0x509f79fb
 8007e2c:	3fd34413 	.word	0x3fd34413
 8007e30:	0800bdc6 	.word	0x0800bdc6
 8007e34:	0800bddd 	.word	0x0800bddd
 8007e38:	7ff00000 	.word	0x7ff00000
 8007e3c:	0800bd91 	.word	0x0800bd91
 8007e40:	3ff80000 	.word	0x3ff80000
 8007e44:	0800bed8 	.word	0x0800bed8
 8007e48:	0800be35 	.word	0x0800be35
 8007e4c:	0800bdc2 	.word	0x0800bdc2
 8007e50:	0800bd90 	.word	0x0800bd90
 8007e54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e58:	6018      	str	r0, [r3, #0]
 8007e5a:	9b07      	ldr	r3, [sp, #28]
 8007e5c:	2b0e      	cmp	r3, #14
 8007e5e:	f200 80a4 	bhi.w	8007faa <_dtoa_r+0x442>
 8007e62:	2c00      	cmp	r4, #0
 8007e64:	f000 80a1 	beq.w	8007faa <_dtoa_r+0x442>
 8007e68:	2f00      	cmp	r7, #0
 8007e6a:	dd33      	ble.n	8007ed4 <_dtoa_r+0x36c>
 8007e6c:	4bad      	ldr	r3, [pc, #692]	@ (8008124 <_dtoa_r+0x5bc>)
 8007e6e:	f007 020f 	and.w	r2, r7, #15
 8007e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e76:	ed93 7b00 	vldr	d7, [r3]
 8007e7a:	05f8      	lsls	r0, r7, #23
 8007e7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007e80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e84:	d516      	bpl.n	8007eb4 <_dtoa_r+0x34c>
 8007e86:	4ba8      	ldr	r3, [pc, #672]	@ (8008128 <_dtoa_r+0x5c0>)
 8007e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e90:	f7f8 fd04 	bl	800089c <__aeabi_ddiv>
 8007e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e98:	f004 040f 	and.w	r4, r4, #15
 8007e9c:	2603      	movs	r6, #3
 8007e9e:	4da2      	ldr	r5, [pc, #648]	@ (8008128 <_dtoa_r+0x5c0>)
 8007ea0:	b954      	cbnz	r4, 8007eb8 <_dtoa_r+0x350>
 8007ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eaa:	f7f8 fcf7 	bl	800089c <__aeabi_ddiv>
 8007eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb2:	e028      	b.n	8007f06 <_dtoa_r+0x39e>
 8007eb4:	2602      	movs	r6, #2
 8007eb6:	e7f2      	b.n	8007e9e <_dtoa_r+0x336>
 8007eb8:	07e1      	lsls	r1, r4, #31
 8007eba:	d508      	bpl.n	8007ece <_dtoa_r+0x366>
 8007ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ec0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ec4:	f7f8 fbc0 	bl	8000648 <__aeabi_dmul>
 8007ec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ecc:	3601      	adds	r6, #1
 8007ece:	1064      	asrs	r4, r4, #1
 8007ed0:	3508      	adds	r5, #8
 8007ed2:	e7e5      	b.n	8007ea0 <_dtoa_r+0x338>
 8007ed4:	f000 80d2 	beq.w	800807c <_dtoa_r+0x514>
 8007ed8:	427c      	negs	r4, r7
 8007eda:	4b92      	ldr	r3, [pc, #584]	@ (8008124 <_dtoa_r+0x5bc>)
 8007edc:	4d92      	ldr	r5, [pc, #584]	@ (8008128 <_dtoa_r+0x5c0>)
 8007ede:	f004 020f 	and.w	r2, r4, #15
 8007ee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eee:	f7f8 fbab 	bl	8000648 <__aeabi_dmul>
 8007ef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ef6:	1124      	asrs	r4, r4, #4
 8007ef8:	2300      	movs	r3, #0
 8007efa:	2602      	movs	r6, #2
 8007efc:	2c00      	cmp	r4, #0
 8007efe:	f040 80b2 	bne.w	8008066 <_dtoa_r+0x4fe>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1d3      	bne.n	8007eae <_dtoa_r+0x346>
 8007f06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 80b7 	beq.w	8008080 <_dtoa_r+0x518>
 8007f12:	4b86      	ldr	r3, [pc, #536]	@ (800812c <_dtoa_r+0x5c4>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	4620      	mov	r0, r4
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7f8 fe07 	bl	8000b2c <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f000 80ae 	beq.w	8008080 <_dtoa_r+0x518>
 8007f24:	9b07      	ldr	r3, [sp, #28]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 80aa 	beq.w	8008080 <_dtoa_r+0x518>
 8007f2c:	9b00      	ldr	r3, [sp, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dd37      	ble.n	8007fa2 <_dtoa_r+0x43a>
 8007f32:	1e7b      	subs	r3, r7, #1
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	4620      	mov	r0, r4
 8007f38:	4b7d      	ldr	r3, [pc, #500]	@ (8008130 <_dtoa_r+0x5c8>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	f7f8 fb83 	bl	8000648 <__aeabi_dmul>
 8007f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f46:	9c00      	ldr	r4, [sp, #0]
 8007f48:	3601      	adds	r6, #1
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f7f8 fb12 	bl	8000574 <__aeabi_i2d>
 8007f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f54:	f7f8 fb78 	bl	8000648 <__aeabi_dmul>
 8007f58:	4b76      	ldr	r3, [pc, #472]	@ (8008134 <_dtoa_r+0x5cc>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f7f8 f9be 	bl	80002dc <__adddf3>
 8007f60:	4605      	mov	r5, r0
 8007f62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f66:	2c00      	cmp	r4, #0
 8007f68:	f040 808d 	bne.w	8008086 <_dtoa_r+0x51e>
 8007f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f70:	4b71      	ldr	r3, [pc, #452]	@ (8008138 <_dtoa_r+0x5d0>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	f7f8 f9b0 	bl	80002d8 <__aeabi_dsub>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f80:	462a      	mov	r2, r5
 8007f82:	4633      	mov	r3, r6
 8007f84:	f7f8 fdf0 	bl	8000b68 <__aeabi_dcmpgt>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f040 828b 	bne.w	80084a4 <_dtoa_r+0x93c>
 8007f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f92:	462a      	mov	r2, r5
 8007f94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f98:	f7f8 fdc8 	bl	8000b2c <__aeabi_dcmplt>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f040 8128 	bne.w	80081f2 <_dtoa_r+0x68a>
 8007fa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007fa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007faa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f2c0 815a 	blt.w	8008266 <_dtoa_r+0x6fe>
 8007fb2:	2f0e      	cmp	r7, #14
 8007fb4:	f300 8157 	bgt.w	8008266 <_dtoa_r+0x6fe>
 8007fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8008124 <_dtoa_r+0x5bc>)
 8007fba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fbe:	ed93 7b00 	vldr	d7, [r3]
 8007fc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	ed8d 7b00 	vstr	d7, [sp]
 8007fca:	da03      	bge.n	8007fd4 <_dtoa_r+0x46c>
 8007fcc:	9b07      	ldr	r3, [sp, #28]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f340 8101 	ble.w	80081d6 <_dtoa_r+0x66e>
 8007fd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007fd8:	4656      	mov	r6, sl
 8007fda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 fc5b 	bl	800089c <__aeabi_ddiv>
 8007fe6:	f7f8 fddf 	bl	8000ba8 <__aeabi_d2iz>
 8007fea:	4680      	mov	r8, r0
 8007fec:	f7f8 fac2 	bl	8000574 <__aeabi_i2d>
 8007ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ff4:	f7f8 fb28 	bl	8000648 <__aeabi_dmul>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4629      	mov	r1, r5
 8008000:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008004:	f7f8 f968 	bl	80002d8 <__aeabi_dsub>
 8008008:	f806 4b01 	strb.w	r4, [r6], #1
 800800c:	9d07      	ldr	r5, [sp, #28]
 800800e:	eba6 040a 	sub.w	r4, r6, sl
 8008012:	42a5      	cmp	r5, r4
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	f040 8117 	bne.w	800824a <_dtoa_r+0x6e2>
 800801c:	f7f8 f95e 	bl	80002dc <__adddf3>
 8008020:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008024:	4604      	mov	r4, r0
 8008026:	460d      	mov	r5, r1
 8008028:	f7f8 fd9e 	bl	8000b68 <__aeabi_dcmpgt>
 800802c:	2800      	cmp	r0, #0
 800802e:	f040 80f9 	bne.w	8008224 <_dtoa_r+0x6bc>
 8008032:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008036:	4620      	mov	r0, r4
 8008038:	4629      	mov	r1, r5
 800803a:	f7f8 fd6d 	bl	8000b18 <__aeabi_dcmpeq>
 800803e:	b118      	cbz	r0, 8008048 <_dtoa_r+0x4e0>
 8008040:	f018 0f01 	tst.w	r8, #1
 8008044:	f040 80ee 	bne.w	8008224 <_dtoa_r+0x6bc>
 8008048:	4649      	mov	r1, r9
 800804a:	4658      	mov	r0, fp
 800804c:	f000 fbda 	bl	8008804 <_Bfree>
 8008050:	2300      	movs	r3, #0
 8008052:	7033      	strb	r3, [r6, #0]
 8008054:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008056:	3701      	adds	r7, #1
 8008058:	601f      	str	r7, [r3, #0]
 800805a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 831d 	beq.w	800869c <_dtoa_r+0xb34>
 8008062:	601e      	str	r6, [r3, #0]
 8008064:	e31a      	b.n	800869c <_dtoa_r+0xb34>
 8008066:	07e2      	lsls	r2, r4, #31
 8008068:	d505      	bpl.n	8008076 <_dtoa_r+0x50e>
 800806a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800806e:	f7f8 faeb 	bl	8000648 <__aeabi_dmul>
 8008072:	3601      	adds	r6, #1
 8008074:	2301      	movs	r3, #1
 8008076:	1064      	asrs	r4, r4, #1
 8008078:	3508      	adds	r5, #8
 800807a:	e73f      	b.n	8007efc <_dtoa_r+0x394>
 800807c:	2602      	movs	r6, #2
 800807e:	e742      	b.n	8007f06 <_dtoa_r+0x39e>
 8008080:	9c07      	ldr	r4, [sp, #28]
 8008082:	9704      	str	r7, [sp, #16]
 8008084:	e761      	b.n	8007f4a <_dtoa_r+0x3e2>
 8008086:	4b27      	ldr	r3, [pc, #156]	@ (8008124 <_dtoa_r+0x5bc>)
 8008088:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800808a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800808e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008092:	4454      	add	r4, sl
 8008094:	2900      	cmp	r1, #0
 8008096:	d053      	beq.n	8008140 <_dtoa_r+0x5d8>
 8008098:	4928      	ldr	r1, [pc, #160]	@ (800813c <_dtoa_r+0x5d4>)
 800809a:	2000      	movs	r0, #0
 800809c:	f7f8 fbfe 	bl	800089c <__aeabi_ddiv>
 80080a0:	4633      	mov	r3, r6
 80080a2:	462a      	mov	r2, r5
 80080a4:	f7f8 f918 	bl	80002d8 <__aeabi_dsub>
 80080a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080ac:	4656      	mov	r6, sl
 80080ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b2:	f7f8 fd79 	bl	8000ba8 <__aeabi_d2iz>
 80080b6:	4605      	mov	r5, r0
 80080b8:	f7f8 fa5c 	bl	8000574 <__aeabi_i2d>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c4:	f7f8 f908 	bl	80002d8 <__aeabi_dsub>
 80080c8:	3530      	adds	r5, #48	@ 0x30
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080d2:	f806 5b01 	strb.w	r5, [r6], #1
 80080d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080da:	f7f8 fd27 	bl	8000b2c <__aeabi_dcmplt>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d171      	bne.n	80081c6 <_dtoa_r+0x65e>
 80080e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080e6:	4911      	ldr	r1, [pc, #68]	@ (800812c <_dtoa_r+0x5c4>)
 80080e8:	2000      	movs	r0, #0
 80080ea:	f7f8 f8f5 	bl	80002d8 <__aeabi_dsub>
 80080ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080f2:	f7f8 fd1b 	bl	8000b2c <__aeabi_dcmplt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	f040 8095 	bne.w	8008226 <_dtoa_r+0x6be>
 80080fc:	42a6      	cmp	r6, r4
 80080fe:	f43f af50 	beq.w	8007fa2 <_dtoa_r+0x43a>
 8008102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008106:	4b0a      	ldr	r3, [pc, #40]	@ (8008130 <_dtoa_r+0x5c8>)
 8008108:	2200      	movs	r2, #0
 800810a:	f7f8 fa9d 	bl	8000648 <__aeabi_dmul>
 800810e:	4b08      	ldr	r3, [pc, #32]	@ (8008130 <_dtoa_r+0x5c8>)
 8008110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008114:	2200      	movs	r2, #0
 8008116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800811a:	f7f8 fa95 	bl	8000648 <__aeabi_dmul>
 800811e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008122:	e7c4      	b.n	80080ae <_dtoa_r+0x546>
 8008124:	0800bed8 	.word	0x0800bed8
 8008128:	0800beb0 	.word	0x0800beb0
 800812c:	3ff00000 	.word	0x3ff00000
 8008130:	40240000 	.word	0x40240000
 8008134:	401c0000 	.word	0x401c0000
 8008138:	40140000 	.word	0x40140000
 800813c:	3fe00000 	.word	0x3fe00000
 8008140:	4631      	mov	r1, r6
 8008142:	4628      	mov	r0, r5
 8008144:	f7f8 fa80 	bl	8000648 <__aeabi_dmul>
 8008148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800814c:	9415      	str	r4, [sp, #84]	@ 0x54
 800814e:	4656      	mov	r6, sl
 8008150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008154:	f7f8 fd28 	bl	8000ba8 <__aeabi_d2iz>
 8008158:	4605      	mov	r5, r0
 800815a:	f7f8 fa0b 	bl	8000574 <__aeabi_i2d>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008166:	f7f8 f8b7 	bl	80002d8 <__aeabi_dsub>
 800816a:	3530      	adds	r5, #48	@ 0x30
 800816c:	f806 5b01 	strb.w	r5, [r6], #1
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	42a6      	cmp	r6, r4
 8008176:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800817a:	f04f 0200 	mov.w	r2, #0
 800817e:	d124      	bne.n	80081ca <_dtoa_r+0x662>
 8008180:	4bac      	ldr	r3, [pc, #688]	@ (8008434 <_dtoa_r+0x8cc>)
 8008182:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008186:	f7f8 f8a9 	bl	80002dc <__adddf3>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008192:	f7f8 fce9 	bl	8000b68 <__aeabi_dcmpgt>
 8008196:	2800      	cmp	r0, #0
 8008198:	d145      	bne.n	8008226 <_dtoa_r+0x6be>
 800819a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800819e:	49a5      	ldr	r1, [pc, #660]	@ (8008434 <_dtoa_r+0x8cc>)
 80081a0:	2000      	movs	r0, #0
 80081a2:	f7f8 f899 	bl	80002d8 <__aeabi_dsub>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ae:	f7f8 fcbd 	bl	8000b2c <__aeabi_dcmplt>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f43f aef5 	beq.w	8007fa2 <_dtoa_r+0x43a>
 80081b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80081ba:	1e73      	subs	r3, r6, #1
 80081bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80081be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081c2:	2b30      	cmp	r3, #48	@ 0x30
 80081c4:	d0f8      	beq.n	80081b8 <_dtoa_r+0x650>
 80081c6:	9f04      	ldr	r7, [sp, #16]
 80081c8:	e73e      	b.n	8008048 <_dtoa_r+0x4e0>
 80081ca:	4b9b      	ldr	r3, [pc, #620]	@ (8008438 <_dtoa_r+0x8d0>)
 80081cc:	f7f8 fa3c 	bl	8000648 <__aeabi_dmul>
 80081d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081d4:	e7bc      	b.n	8008150 <_dtoa_r+0x5e8>
 80081d6:	d10c      	bne.n	80081f2 <_dtoa_r+0x68a>
 80081d8:	4b98      	ldr	r3, [pc, #608]	@ (800843c <_dtoa_r+0x8d4>)
 80081da:	2200      	movs	r2, #0
 80081dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081e0:	f7f8 fa32 	bl	8000648 <__aeabi_dmul>
 80081e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081e8:	f7f8 fcb4 	bl	8000b54 <__aeabi_dcmpge>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	f000 8157 	beq.w	80084a0 <_dtoa_r+0x938>
 80081f2:	2400      	movs	r4, #0
 80081f4:	4625      	mov	r5, r4
 80081f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081f8:	43db      	mvns	r3, r3
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	4656      	mov	r6, sl
 80081fe:	2700      	movs	r7, #0
 8008200:	4621      	mov	r1, r4
 8008202:	4658      	mov	r0, fp
 8008204:	f000 fafe 	bl	8008804 <_Bfree>
 8008208:	2d00      	cmp	r5, #0
 800820a:	d0dc      	beq.n	80081c6 <_dtoa_r+0x65e>
 800820c:	b12f      	cbz	r7, 800821a <_dtoa_r+0x6b2>
 800820e:	42af      	cmp	r7, r5
 8008210:	d003      	beq.n	800821a <_dtoa_r+0x6b2>
 8008212:	4639      	mov	r1, r7
 8008214:	4658      	mov	r0, fp
 8008216:	f000 faf5 	bl	8008804 <_Bfree>
 800821a:	4629      	mov	r1, r5
 800821c:	4658      	mov	r0, fp
 800821e:	f000 faf1 	bl	8008804 <_Bfree>
 8008222:	e7d0      	b.n	80081c6 <_dtoa_r+0x65e>
 8008224:	9704      	str	r7, [sp, #16]
 8008226:	4633      	mov	r3, r6
 8008228:	461e      	mov	r6, r3
 800822a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800822e:	2a39      	cmp	r2, #57	@ 0x39
 8008230:	d107      	bne.n	8008242 <_dtoa_r+0x6da>
 8008232:	459a      	cmp	sl, r3
 8008234:	d1f8      	bne.n	8008228 <_dtoa_r+0x6c0>
 8008236:	9a04      	ldr	r2, [sp, #16]
 8008238:	3201      	adds	r2, #1
 800823a:	9204      	str	r2, [sp, #16]
 800823c:	2230      	movs	r2, #48	@ 0x30
 800823e:	f88a 2000 	strb.w	r2, [sl]
 8008242:	781a      	ldrb	r2, [r3, #0]
 8008244:	3201      	adds	r2, #1
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	e7bd      	b.n	80081c6 <_dtoa_r+0x65e>
 800824a:	4b7b      	ldr	r3, [pc, #492]	@ (8008438 <_dtoa_r+0x8d0>)
 800824c:	2200      	movs	r2, #0
 800824e:	f7f8 f9fb 	bl	8000648 <__aeabi_dmul>
 8008252:	2200      	movs	r2, #0
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	460d      	mov	r5, r1
 800825a:	f7f8 fc5d 	bl	8000b18 <__aeabi_dcmpeq>
 800825e:	2800      	cmp	r0, #0
 8008260:	f43f aebb 	beq.w	8007fda <_dtoa_r+0x472>
 8008264:	e6f0      	b.n	8008048 <_dtoa_r+0x4e0>
 8008266:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008268:	2a00      	cmp	r2, #0
 800826a:	f000 80db 	beq.w	8008424 <_dtoa_r+0x8bc>
 800826e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008270:	2a01      	cmp	r2, #1
 8008272:	f300 80bf 	bgt.w	80083f4 <_dtoa_r+0x88c>
 8008276:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008278:	2a00      	cmp	r2, #0
 800827a:	f000 80b7 	beq.w	80083ec <_dtoa_r+0x884>
 800827e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008282:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008284:	4646      	mov	r6, r8
 8008286:	9a08      	ldr	r2, [sp, #32]
 8008288:	2101      	movs	r1, #1
 800828a:	441a      	add	r2, r3
 800828c:	4658      	mov	r0, fp
 800828e:	4498      	add	r8, r3
 8008290:	9208      	str	r2, [sp, #32]
 8008292:	f000 fbb5 	bl	8008a00 <__i2b>
 8008296:	4605      	mov	r5, r0
 8008298:	b15e      	cbz	r6, 80082b2 <_dtoa_r+0x74a>
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	2b00      	cmp	r3, #0
 800829e:	dd08      	ble.n	80082b2 <_dtoa_r+0x74a>
 80082a0:	42b3      	cmp	r3, r6
 80082a2:	9a08      	ldr	r2, [sp, #32]
 80082a4:	bfa8      	it	ge
 80082a6:	4633      	movge	r3, r6
 80082a8:	eba8 0803 	sub.w	r8, r8, r3
 80082ac:	1af6      	subs	r6, r6, r3
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	9308      	str	r3, [sp, #32]
 80082b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082b4:	b1f3      	cbz	r3, 80082f4 <_dtoa_r+0x78c>
 80082b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 80b7 	beq.w	800842c <_dtoa_r+0x8c4>
 80082be:	b18c      	cbz	r4, 80082e4 <_dtoa_r+0x77c>
 80082c0:	4629      	mov	r1, r5
 80082c2:	4622      	mov	r2, r4
 80082c4:	4658      	mov	r0, fp
 80082c6:	f000 fc5b 	bl	8008b80 <__pow5mult>
 80082ca:	464a      	mov	r2, r9
 80082cc:	4601      	mov	r1, r0
 80082ce:	4605      	mov	r5, r0
 80082d0:	4658      	mov	r0, fp
 80082d2:	f000 fbab 	bl	8008a2c <__multiply>
 80082d6:	4649      	mov	r1, r9
 80082d8:	9004      	str	r0, [sp, #16]
 80082da:	4658      	mov	r0, fp
 80082dc:	f000 fa92 	bl	8008804 <_Bfree>
 80082e0:	9b04      	ldr	r3, [sp, #16]
 80082e2:	4699      	mov	r9, r3
 80082e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082e6:	1b1a      	subs	r2, r3, r4
 80082e8:	d004      	beq.n	80082f4 <_dtoa_r+0x78c>
 80082ea:	4649      	mov	r1, r9
 80082ec:	4658      	mov	r0, fp
 80082ee:	f000 fc47 	bl	8008b80 <__pow5mult>
 80082f2:	4681      	mov	r9, r0
 80082f4:	2101      	movs	r1, #1
 80082f6:	4658      	mov	r0, fp
 80082f8:	f000 fb82 	bl	8008a00 <__i2b>
 80082fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082fe:	4604      	mov	r4, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 81cf 	beq.w	80086a4 <_dtoa_r+0xb3c>
 8008306:	461a      	mov	r2, r3
 8008308:	4601      	mov	r1, r0
 800830a:	4658      	mov	r0, fp
 800830c:	f000 fc38 	bl	8008b80 <__pow5mult>
 8008310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008312:	2b01      	cmp	r3, #1
 8008314:	4604      	mov	r4, r0
 8008316:	f300 8095 	bgt.w	8008444 <_dtoa_r+0x8dc>
 800831a:	9b02      	ldr	r3, [sp, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f040 8087 	bne.w	8008430 <_dtoa_r+0x8c8>
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008328:	2b00      	cmp	r3, #0
 800832a:	f040 8089 	bne.w	8008440 <_dtoa_r+0x8d8>
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008334:	0d1b      	lsrs	r3, r3, #20
 8008336:	051b      	lsls	r3, r3, #20
 8008338:	b12b      	cbz	r3, 8008346 <_dtoa_r+0x7de>
 800833a:	9b08      	ldr	r3, [sp, #32]
 800833c:	3301      	adds	r3, #1
 800833e:	9308      	str	r3, [sp, #32]
 8008340:	f108 0801 	add.w	r8, r8, #1
 8008344:	2301      	movs	r3, #1
 8008346:	930a      	str	r3, [sp, #40]	@ 0x28
 8008348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 81b0 	beq.w	80086b0 <_dtoa_r+0xb48>
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008356:	6918      	ldr	r0, [r3, #16]
 8008358:	f000 fb06 	bl	8008968 <__hi0bits>
 800835c:	f1c0 0020 	rsb	r0, r0, #32
 8008360:	9b08      	ldr	r3, [sp, #32]
 8008362:	4418      	add	r0, r3
 8008364:	f010 001f 	ands.w	r0, r0, #31
 8008368:	d077      	beq.n	800845a <_dtoa_r+0x8f2>
 800836a:	f1c0 0320 	rsb	r3, r0, #32
 800836e:	2b04      	cmp	r3, #4
 8008370:	dd6b      	ble.n	800844a <_dtoa_r+0x8e2>
 8008372:	9b08      	ldr	r3, [sp, #32]
 8008374:	f1c0 001c 	rsb	r0, r0, #28
 8008378:	4403      	add	r3, r0
 800837a:	4480      	add	r8, r0
 800837c:	4406      	add	r6, r0
 800837e:	9308      	str	r3, [sp, #32]
 8008380:	f1b8 0f00 	cmp.w	r8, #0
 8008384:	dd05      	ble.n	8008392 <_dtoa_r+0x82a>
 8008386:	4649      	mov	r1, r9
 8008388:	4642      	mov	r2, r8
 800838a:	4658      	mov	r0, fp
 800838c:	f000 fc52 	bl	8008c34 <__lshift>
 8008390:	4681      	mov	r9, r0
 8008392:	9b08      	ldr	r3, [sp, #32]
 8008394:	2b00      	cmp	r3, #0
 8008396:	dd05      	ble.n	80083a4 <_dtoa_r+0x83c>
 8008398:	4621      	mov	r1, r4
 800839a:	461a      	mov	r2, r3
 800839c:	4658      	mov	r0, fp
 800839e:	f000 fc49 	bl	8008c34 <__lshift>
 80083a2:	4604      	mov	r4, r0
 80083a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d059      	beq.n	800845e <_dtoa_r+0x8f6>
 80083aa:	4621      	mov	r1, r4
 80083ac:	4648      	mov	r0, r9
 80083ae:	f000 fcad 	bl	8008d0c <__mcmp>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	da53      	bge.n	800845e <_dtoa_r+0x8f6>
 80083b6:	1e7b      	subs	r3, r7, #1
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	4649      	mov	r1, r9
 80083bc:	2300      	movs	r3, #0
 80083be:	220a      	movs	r2, #10
 80083c0:	4658      	mov	r0, fp
 80083c2:	f000 fa41 	bl	8008848 <__multadd>
 80083c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083c8:	4681      	mov	r9, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8172 	beq.w	80086b4 <_dtoa_r+0xb4c>
 80083d0:	2300      	movs	r3, #0
 80083d2:	4629      	mov	r1, r5
 80083d4:	220a      	movs	r2, #10
 80083d6:	4658      	mov	r0, fp
 80083d8:	f000 fa36 	bl	8008848 <__multadd>
 80083dc:	9b00      	ldr	r3, [sp, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	4605      	mov	r5, r0
 80083e2:	dc67      	bgt.n	80084b4 <_dtoa_r+0x94c>
 80083e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	dc41      	bgt.n	800846e <_dtoa_r+0x906>
 80083ea:	e063      	b.n	80084b4 <_dtoa_r+0x94c>
 80083ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80083f2:	e746      	b.n	8008282 <_dtoa_r+0x71a>
 80083f4:	9b07      	ldr	r3, [sp, #28]
 80083f6:	1e5c      	subs	r4, r3, #1
 80083f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083fa:	42a3      	cmp	r3, r4
 80083fc:	bfbf      	itttt	lt
 80083fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008400:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008402:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008404:	1ae3      	sublt	r3, r4, r3
 8008406:	bfb4      	ite	lt
 8008408:	18d2      	addlt	r2, r2, r3
 800840a:	1b1c      	subge	r4, r3, r4
 800840c:	9b07      	ldr	r3, [sp, #28]
 800840e:	bfbc      	itt	lt
 8008410:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008412:	2400      	movlt	r4, #0
 8008414:	2b00      	cmp	r3, #0
 8008416:	bfb5      	itete	lt
 8008418:	eba8 0603 	sublt.w	r6, r8, r3
 800841c:	9b07      	ldrge	r3, [sp, #28]
 800841e:	2300      	movlt	r3, #0
 8008420:	4646      	movge	r6, r8
 8008422:	e730      	b.n	8008286 <_dtoa_r+0x71e>
 8008424:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008426:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008428:	4646      	mov	r6, r8
 800842a:	e735      	b.n	8008298 <_dtoa_r+0x730>
 800842c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800842e:	e75c      	b.n	80082ea <_dtoa_r+0x782>
 8008430:	2300      	movs	r3, #0
 8008432:	e788      	b.n	8008346 <_dtoa_r+0x7de>
 8008434:	3fe00000 	.word	0x3fe00000
 8008438:	40240000 	.word	0x40240000
 800843c:	40140000 	.word	0x40140000
 8008440:	9b02      	ldr	r3, [sp, #8]
 8008442:	e780      	b.n	8008346 <_dtoa_r+0x7de>
 8008444:	2300      	movs	r3, #0
 8008446:	930a      	str	r3, [sp, #40]	@ 0x28
 8008448:	e782      	b.n	8008350 <_dtoa_r+0x7e8>
 800844a:	d099      	beq.n	8008380 <_dtoa_r+0x818>
 800844c:	9a08      	ldr	r2, [sp, #32]
 800844e:	331c      	adds	r3, #28
 8008450:	441a      	add	r2, r3
 8008452:	4498      	add	r8, r3
 8008454:	441e      	add	r6, r3
 8008456:	9208      	str	r2, [sp, #32]
 8008458:	e792      	b.n	8008380 <_dtoa_r+0x818>
 800845a:	4603      	mov	r3, r0
 800845c:	e7f6      	b.n	800844c <_dtoa_r+0x8e4>
 800845e:	9b07      	ldr	r3, [sp, #28]
 8008460:	9704      	str	r7, [sp, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	dc20      	bgt.n	80084a8 <_dtoa_r+0x940>
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800846a:	2b02      	cmp	r3, #2
 800846c:	dd1e      	ble.n	80084ac <_dtoa_r+0x944>
 800846e:	9b00      	ldr	r3, [sp, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	f47f aec0 	bne.w	80081f6 <_dtoa_r+0x68e>
 8008476:	4621      	mov	r1, r4
 8008478:	2205      	movs	r2, #5
 800847a:	4658      	mov	r0, fp
 800847c:	f000 f9e4 	bl	8008848 <__multadd>
 8008480:	4601      	mov	r1, r0
 8008482:	4604      	mov	r4, r0
 8008484:	4648      	mov	r0, r9
 8008486:	f000 fc41 	bl	8008d0c <__mcmp>
 800848a:	2800      	cmp	r0, #0
 800848c:	f77f aeb3 	ble.w	80081f6 <_dtoa_r+0x68e>
 8008490:	4656      	mov	r6, sl
 8008492:	2331      	movs	r3, #49	@ 0x31
 8008494:	f806 3b01 	strb.w	r3, [r6], #1
 8008498:	9b04      	ldr	r3, [sp, #16]
 800849a:	3301      	adds	r3, #1
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	e6ae      	b.n	80081fe <_dtoa_r+0x696>
 80084a0:	9c07      	ldr	r4, [sp, #28]
 80084a2:	9704      	str	r7, [sp, #16]
 80084a4:	4625      	mov	r5, r4
 80084a6:	e7f3      	b.n	8008490 <_dtoa_r+0x928>
 80084a8:	9b07      	ldr	r3, [sp, #28]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 8104 	beq.w	80086bc <_dtoa_r+0xb54>
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	dd05      	ble.n	80084c4 <_dtoa_r+0x95c>
 80084b8:	4629      	mov	r1, r5
 80084ba:	4632      	mov	r2, r6
 80084bc:	4658      	mov	r0, fp
 80084be:	f000 fbb9 	bl	8008c34 <__lshift>
 80084c2:	4605      	mov	r5, r0
 80084c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d05a      	beq.n	8008580 <_dtoa_r+0xa18>
 80084ca:	6869      	ldr	r1, [r5, #4]
 80084cc:	4658      	mov	r0, fp
 80084ce:	f000 f959 	bl	8008784 <_Balloc>
 80084d2:	4606      	mov	r6, r0
 80084d4:	b928      	cbnz	r0, 80084e2 <_dtoa_r+0x97a>
 80084d6:	4b84      	ldr	r3, [pc, #528]	@ (80086e8 <_dtoa_r+0xb80>)
 80084d8:	4602      	mov	r2, r0
 80084da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80084de:	f7ff bb5a 	b.w	8007b96 <_dtoa_r+0x2e>
 80084e2:	692a      	ldr	r2, [r5, #16]
 80084e4:	3202      	adds	r2, #2
 80084e6:	0092      	lsls	r2, r2, #2
 80084e8:	f105 010c 	add.w	r1, r5, #12
 80084ec:	300c      	adds	r0, #12
 80084ee:	f7ff fa9e 	bl	8007a2e <memcpy>
 80084f2:	2201      	movs	r2, #1
 80084f4:	4631      	mov	r1, r6
 80084f6:	4658      	mov	r0, fp
 80084f8:	f000 fb9c 	bl	8008c34 <__lshift>
 80084fc:	f10a 0301 	add.w	r3, sl, #1
 8008500:	9307      	str	r3, [sp, #28]
 8008502:	9b00      	ldr	r3, [sp, #0]
 8008504:	4453      	add	r3, sl
 8008506:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008508:	9b02      	ldr	r3, [sp, #8]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	462f      	mov	r7, r5
 8008510:	930a      	str	r3, [sp, #40]	@ 0x28
 8008512:	4605      	mov	r5, r0
 8008514:	9b07      	ldr	r3, [sp, #28]
 8008516:	4621      	mov	r1, r4
 8008518:	3b01      	subs	r3, #1
 800851a:	4648      	mov	r0, r9
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	f7ff fa9b 	bl	8007a58 <quorem>
 8008522:	4639      	mov	r1, r7
 8008524:	9002      	str	r0, [sp, #8]
 8008526:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800852a:	4648      	mov	r0, r9
 800852c:	f000 fbee 	bl	8008d0c <__mcmp>
 8008530:	462a      	mov	r2, r5
 8008532:	9008      	str	r0, [sp, #32]
 8008534:	4621      	mov	r1, r4
 8008536:	4658      	mov	r0, fp
 8008538:	f000 fc04 	bl	8008d44 <__mdiff>
 800853c:	68c2      	ldr	r2, [r0, #12]
 800853e:	4606      	mov	r6, r0
 8008540:	bb02      	cbnz	r2, 8008584 <_dtoa_r+0xa1c>
 8008542:	4601      	mov	r1, r0
 8008544:	4648      	mov	r0, r9
 8008546:	f000 fbe1 	bl	8008d0c <__mcmp>
 800854a:	4602      	mov	r2, r0
 800854c:	4631      	mov	r1, r6
 800854e:	4658      	mov	r0, fp
 8008550:	920e      	str	r2, [sp, #56]	@ 0x38
 8008552:	f000 f957 	bl	8008804 <_Bfree>
 8008556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008558:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800855a:	9e07      	ldr	r6, [sp, #28]
 800855c:	ea43 0102 	orr.w	r1, r3, r2
 8008560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008562:	4319      	orrs	r1, r3
 8008564:	d110      	bne.n	8008588 <_dtoa_r+0xa20>
 8008566:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800856a:	d029      	beq.n	80085c0 <_dtoa_r+0xa58>
 800856c:	9b08      	ldr	r3, [sp, #32]
 800856e:	2b00      	cmp	r3, #0
 8008570:	dd02      	ble.n	8008578 <_dtoa_r+0xa10>
 8008572:	9b02      	ldr	r3, [sp, #8]
 8008574:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008578:	9b00      	ldr	r3, [sp, #0]
 800857a:	f883 8000 	strb.w	r8, [r3]
 800857e:	e63f      	b.n	8008200 <_dtoa_r+0x698>
 8008580:	4628      	mov	r0, r5
 8008582:	e7bb      	b.n	80084fc <_dtoa_r+0x994>
 8008584:	2201      	movs	r2, #1
 8008586:	e7e1      	b.n	800854c <_dtoa_r+0x9e4>
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	2b00      	cmp	r3, #0
 800858c:	db04      	blt.n	8008598 <_dtoa_r+0xa30>
 800858e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008590:	430b      	orrs	r3, r1
 8008592:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008594:	430b      	orrs	r3, r1
 8008596:	d120      	bne.n	80085da <_dtoa_r+0xa72>
 8008598:	2a00      	cmp	r2, #0
 800859a:	dded      	ble.n	8008578 <_dtoa_r+0xa10>
 800859c:	4649      	mov	r1, r9
 800859e:	2201      	movs	r2, #1
 80085a0:	4658      	mov	r0, fp
 80085a2:	f000 fb47 	bl	8008c34 <__lshift>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4681      	mov	r9, r0
 80085aa:	f000 fbaf 	bl	8008d0c <__mcmp>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	dc03      	bgt.n	80085ba <_dtoa_r+0xa52>
 80085b2:	d1e1      	bne.n	8008578 <_dtoa_r+0xa10>
 80085b4:	f018 0f01 	tst.w	r8, #1
 80085b8:	d0de      	beq.n	8008578 <_dtoa_r+0xa10>
 80085ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085be:	d1d8      	bne.n	8008572 <_dtoa_r+0xa0a>
 80085c0:	9a00      	ldr	r2, [sp, #0]
 80085c2:	2339      	movs	r3, #57	@ 0x39
 80085c4:	7013      	strb	r3, [r2, #0]
 80085c6:	4633      	mov	r3, r6
 80085c8:	461e      	mov	r6, r3
 80085ca:	3b01      	subs	r3, #1
 80085cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80085d0:	2a39      	cmp	r2, #57	@ 0x39
 80085d2:	d052      	beq.n	800867a <_dtoa_r+0xb12>
 80085d4:	3201      	adds	r2, #1
 80085d6:	701a      	strb	r2, [r3, #0]
 80085d8:	e612      	b.n	8008200 <_dtoa_r+0x698>
 80085da:	2a00      	cmp	r2, #0
 80085dc:	dd07      	ble.n	80085ee <_dtoa_r+0xa86>
 80085de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085e2:	d0ed      	beq.n	80085c0 <_dtoa_r+0xa58>
 80085e4:	9a00      	ldr	r2, [sp, #0]
 80085e6:	f108 0301 	add.w	r3, r8, #1
 80085ea:	7013      	strb	r3, [r2, #0]
 80085ec:	e608      	b.n	8008200 <_dtoa_r+0x698>
 80085ee:	9b07      	ldr	r3, [sp, #28]
 80085f0:	9a07      	ldr	r2, [sp, #28]
 80085f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80085f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d028      	beq.n	800864e <_dtoa_r+0xae6>
 80085fc:	4649      	mov	r1, r9
 80085fe:	2300      	movs	r3, #0
 8008600:	220a      	movs	r2, #10
 8008602:	4658      	mov	r0, fp
 8008604:	f000 f920 	bl	8008848 <__multadd>
 8008608:	42af      	cmp	r7, r5
 800860a:	4681      	mov	r9, r0
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	f04f 020a 	mov.w	r2, #10
 8008614:	4639      	mov	r1, r7
 8008616:	4658      	mov	r0, fp
 8008618:	d107      	bne.n	800862a <_dtoa_r+0xac2>
 800861a:	f000 f915 	bl	8008848 <__multadd>
 800861e:	4607      	mov	r7, r0
 8008620:	4605      	mov	r5, r0
 8008622:	9b07      	ldr	r3, [sp, #28]
 8008624:	3301      	adds	r3, #1
 8008626:	9307      	str	r3, [sp, #28]
 8008628:	e774      	b.n	8008514 <_dtoa_r+0x9ac>
 800862a:	f000 f90d 	bl	8008848 <__multadd>
 800862e:	4629      	mov	r1, r5
 8008630:	4607      	mov	r7, r0
 8008632:	2300      	movs	r3, #0
 8008634:	220a      	movs	r2, #10
 8008636:	4658      	mov	r0, fp
 8008638:	f000 f906 	bl	8008848 <__multadd>
 800863c:	4605      	mov	r5, r0
 800863e:	e7f0      	b.n	8008622 <_dtoa_r+0xaba>
 8008640:	9b00      	ldr	r3, [sp, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	bfcc      	ite	gt
 8008646:	461e      	movgt	r6, r3
 8008648:	2601      	movle	r6, #1
 800864a:	4456      	add	r6, sl
 800864c:	2700      	movs	r7, #0
 800864e:	4649      	mov	r1, r9
 8008650:	2201      	movs	r2, #1
 8008652:	4658      	mov	r0, fp
 8008654:	f000 faee 	bl	8008c34 <__lshift>
 8008658:	4621      	mov	r1, r4
 800865a:	4681      	mov	r9, r0
 800865c:	f000 fb56 	bl	8008d0c <__mcmp>
 8008660:	2800      	cmp	r0, #0
 8008662:	dcb0      	bgt.n	80085c6 <_dtoa_r+0xa5e>
 8008664:	d102      	bne.n	800866c <_dtoa_r+0xb04>
 8008666:	f018 0f01 	tst.w	r8, #1
 800866a:	d1ac      	bne.n	80085c6 <_dtoa_r+0xa5e>
 800866c:	4633      	mov	r3, r6
 800866e:	461e      	mov	r6, r3
 8008670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008674:	2a30      	cmp	r2, #48	@ 0x30
 8008676:	d0fa      	beq.n	800866e <_dtoa_r+0xb06>
 8008678:	e5c2      	b.n	8008200 <_dtoa_r+0x698>
 800867a:	459a      	cmp	sl, r3
 800867c:	d1a4      	bne.n	80085c8 <_dtoa_r+0xa60>
 800867e:	9b04      	ldr	r3, [sp, #16]
 8008680:	3301      	adds	r3, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	2331      	movs	r3, #49	@ 0x31
 8008686:	f88a 3000 	strb.w	r3, [sl]
 800868a:	e5b9      	b.n	8008200 <_dtoa_r+0x698>
 800868c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800868e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80086ec <_dtoa_r+0xb84>
 8008692:	b11b      	cbz	r3, 800869c <_dtoa_r+0xb34>
 8008694:	f10a 0308 	add.w	r3, sl, #8
 8008698:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	4650      	mov	r0, sl
 800869e:	b019      	add	sp, #100	@ 0x64
 80086a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	f77f ae37 	ble.w	800831a <_dtoa_r+0x7b2>
 80086ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80086b0:	2001      	movs	r0, #1
 80086b2:	e655      	b.n	8008360 <_dtoa_r+0x7f8>
 80086b4:	9b00      	ldr	r3, [sp, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f77f aed6 	ble.w	8008468 <_dtoa_r+0x900>
 80086bc:	4656      	mov	r6, sl
 80086be:	4621      	mov	r1, r4
 80086c0:	4648      	mov	r0, r9
 80086c2:	f7ff f9c9 	bl	8007a58 <quorem>
 80086c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80086ca:	f806 8b01 	strb.w	r8, [r6], #1
 80086ce:	9b00      	ldr	r3, [sp, #0]
 80086d0:	eba6 020a 	sub.w	r2, r6, sl
 80086d4:	4293      	cmp	r3, r2
 80086d6:	ddb3      	ble.n	8008640 <_dtoa_r+0xad8>
 80086d8:	4649      	mov	r1, r9
 80086da:	2300      	movs	r3, #0
 80086dc:	220a      	movs	r2, #10
 80086de:	4658      	mov	r0, fp
 80086e0:	f000 f8b2 	bl	8008848 <__multadd>
 80086e4:	4681      	mov	r9, r0
 80086e6:	e7ea      	b.n	80086be <_dtoa_r+0xb56>
 80086e8:	0800be35 	.word	0x0800be35
 80086ec:	0800bdb9 	.word	0x0800bdb9

080086f0 <_free_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4605      	mov	r5, r0
 80086f4:	2900      	cmp	r1, #0
 80086f6:	d041      	beq.n	800877c <_free_r+0x8c>
 80086f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086fc:	1f0c      	subs	r4, r1, #4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfb8      	it	lt
 8008702:	18e4      	addlt	r4, r4, r3
 8008704:	f7fe f862 	bl	80067cc <__malloc_lock>
 8008708:	4a1d      	ldr	r2, [pc, #116]	@ (8008780 <_free_r+0x90>)
 800870a:	6813      	ldr	r3, [r2, #0]
 800870c:	b933      	cbnz	r3, 800871c <_free_r+0x2c>
 800870e:	6063      	str	r3, [r4, #4]
 8008710:	6014      	str	r4, [r2, #0]
 8008712:	4628      	mov	r0, r5
 8008714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008718:	f7fe b85e 	b.w	80067d8 <__malloc_unlock>
 800871c:	42a3      	cmp	r3, r4
 800871e:	d908      	bls.n	8008732 <_free_r+0x42>
 8008720:	6820      	ldr	r0, [r4, #0]
 8008722:	1821      	adds	r1, r4, r0
 8008724:	428b      	cmp	r3, r1
 8008726:	bf01      	itttt	eq
 8008728:	6819      	ldreq	r1, [r3, #0]
 800872a:	685b      	ldreq	r3, [r3, #4]
 800872c:	1809      	addeq	r1, r1, r0
 800872e:	6021      	streq	r1, [r4, #0]
 8008730:	e7ed      	b.n	800870e <_free_r+0x1e>
 8008732:	461a      	mov	r2, r3
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	b10b      	cbz	r3, 800873c <_free_r+0x4c>
 8008738:	42a3      	cmp	r3, r4
 800873a:	d9fa      	bls.n	8008732 <_free_r+0x42>
 800873c:	6811      	ldr	r1, [r2, #0]
 800873e:	1850      	adds	r0, r2, r1
 8008740:	42a0      	cmp	r0, r4
 8008742:	d10b      	bne.n	800875c <_free_r+0x6c>
 8008744:	6820      	ldr	r0, [r4, #0]
 8008746:	4401      	add	r1, r0
 8008748:	1850      	adds	r0, r2, r1
 800874a:	4283      	cmp	r3, r0
 800874c:	6011      	str	r1, [r2, #0]
 800874e:	d1e0      	bne.n	8008712 <_free_r+0x22>
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	6053      	str	r3, [r2, #4]
 8008756:	4408      	add	r0, r1
 8008758:	6010      	str	r0, [r2, #0]
 800875a:	e7da      	b.n	8008712 <_free_r+0x22>
 800875c:	d902      	bls.n	8008764 <_free_r+0x74>
 800875e:	230c      	movs	r3, #12
 8008760:	602b      	str	r3, [r5, #0]
 8008762:	e7d6      	b.n	8008712 <_free_r+0x22>
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	1821      	adds	r1, r4, r0
 8008768:	428b      	cmp	r3, r1
 800876a:	bf04      	itt	eq
 800876c:	6819      	ldreq	r1, [r3, #0]
 800876e:	685b      	ldreq	r3, [r3, #4]
 8008770:	6063      	str	r3, [r4, #4]
 8008772:	bf04      	itt	eq
 8008774:	1809      	addeq	r1, r1, r0
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	6054      	str	r4, [r2, #4]
 800877a:	e7ca      	b.n	8008712 <_free_r+0x22>
 800877c:	bd38      	pop	{r3, r4, r5, pc}
 800877e:	bf00      	nop
 8008780:	200003cc 	.word	0x200003cc

08008784 <_Balloc>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	69c6      	ldr	r6, [r0, #28]
 8008788:	4604      	mov	r4, r0
 800878a:	460d      	mov	r5, r1
 800878c:	b976      	cbnz	r6, 80087ac <_Balloc+0x28>
 800878e:	2010      	movs	r0, #16
 8008790:	f7fd ff72 	bl	8006678 <malloc>
 8008794:	4602      	mov	r2, r0
 8008796:	61e0      	str	r0, [r4, #28]
 8008798:	b920      	cbnz	r0, 80087a4 <_Balloc+0x20>
 800879a:	4b18      	ldr	r3, [pc, #96]	@ (80087fc <_Balloc+0x78>)
 800879c:	4818      	ldr	r0, [pc, #96]	@ (8008800 <_Balloc+0x7c>)
 800879e:	216b      	movs	r1, #107	@ 0x6b
 80087a0:	f001 ff26 	bl	800a5f0 <__assert_func>
 80087a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087a8:	6006      	str	r6, [r0, #0]
 80087aa:	60c6      	str	r6, [r0, #12]
 80087ac:	69e6      	ldr	r6, [r4, #28]
 80087ae:	68f3      	ldr	r3, [r6, #12]
 80087b0:	b183      	cbz	r3, 80087d4 <_Balloc+0x50>
 80087b2:	69e3      	ldr	r3, [r4, #28]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087ba:	b9b8      	cbnz	r0, 80087ec <_Balloc+0x68>
 80087bc:	2101      	movs	r1, #1
 80087be:	fa01 f605 	lsl.w	r6, r1, r5
 80087c2:	1d72      	adds	r2, r6, #5
 80087c4:	0092      	lsls	r2, r2, #2
 80087c6:	4620      	mov	r0, r4
 80087c8:	f001 ff30 	bl	800a62c <_calloc_r>
 80087cc:	b160      	cbz	r0, 80087e8 <_Balloc+0x64>
 80087ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087d2:	e00e      	b.n	80087f2 <_Balloc+0x6e>
 80087d4:	2221      	movs	r2, #33	@ 0x21
 80087d6:	2104      	movs	r1, #4
 80087d8:	4620      	mov	r0, r4
 80087da:	f001 ff27 	bl	800a62c <_calloc_r>
 80087de:	69e3      	ldr	r3, [r4, #28]
 80087e0:	60f0      	str	r0, [r6, #12]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e4      	bne.n	80087b2 <_Balloc+0x2e>
 80087e8:	2000      	movs	r0, #0
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	6802      	ldr	r2, [r0, #0]
 80087ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087f2:	2300      	movs	r3, #0
 80087f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087f8:	e7f7      	b.n	80087ea <_Balloc+0x66>
 80087fa:	bf00      	nop
 80087fc:	0800bdc6 	.word	0x0800bdc6
 8008800:	0800be46 	.word	0x0800be46

08008804 <_Bfree>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	69c6      	ldr	r6, [r0, #28]
 8008808:	4605      	mov	r5, r0
 800880a:	460c      	mov	r4, r1
 800880c:	b976      	cbnz	r6, 800882c <_Bfree+0x28>
 800880e:	2010      	movs	r0, #16
 8008810:	f7fd ff32 	bl	8006678 <malloc>
 8008814:	4602      	mov	r2, r0
 8008816:	61e8      	str	r0, [r5, #28]
 8008818:	b920      	cbnz	r0, 8008824 <_Bfree+0x20>
 800881a:	4b09      	ldr	r3, [pc, #36]	@ (8008840 <_Bfree+0x3c>)
 800881c:	4809      	ldr	r0, [pc, #36]	@ (8008844 <_Bfree+0x40>)
 800881e:	218f      	movs	r1, #143	@ 0x8f
 8008820:	f001 fee6 	bl	800a5f0 <__assert_func>
 8008824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008828:	6006      	str	r6, [r0, #0]
 800882a:	60c6      	str	r6, [r0, #12]
 800882c:	b13c      	cbz	r4, 800883e <_Bfree+0x3a>
 800882e:	69eb      	ldr	r3, [r5, #28]
 8008830:	6862      	ldr	r2, [r4, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008838:	6021      	str	r1, [r4, #0]
 800883a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	0800bdc6 	.word	0x0800bdc6
 8008844:	0800be46 	.word	0x0800be46

08008848 <__multadd>:
 8008848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800884c:	690d      	ldr	r5, [r1, #16]
 800884e:	4607      	mov	r7, r0
 8008850:	460c      	mov	r4, r1
 8008852:	461e      	mov	r6, r3
 8008854:	f101 0c14 	add.w	ip, r1, #20
 8008858:	2000      	movs	r0, #0
 800885a:	f8dc 3000 	ldr.w	r3, [ip]
 800885e:	b299      	uxth	r1, r3
 8008860:	fb02 6101 	mla	r1, r2, r1, r6
 8008864:	0c1e      	lsrs	r6, r3, #16
 8008866:	0c0b      	lsrs	r3, r1, #16
 8008868:	fb02 3306 	mla	r3, r2, r6, r3
 800886c:	b289      	uxth	r1, r1
 800886e:	3001      	adds	r0, #1
 8008870:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008874:	4285      	cmp	r5, r0
 8008876:	f84c 1b04 	str.w	r1, [ip], #4
 800887a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800887e:	dcec      	bgt.n	800885a <__multadd+0x12>
 8008880:	b30e      	cbz	r6, 80088c6 <__multadd+0x7e>
 8008882:	68a3      	ldr	r3, [r4, #8]
 8008884:	42ab      	cmp	r3, r5
 8008886:	dc19      	bgt.n	80088bc <__multadd+0x74>
 8008888:	6861      	ldr	r1, [r4, #4]
 800888a:	4638      	mov	r0, r7
 800888c:	3101      	adds	r1, #1
 800888e:	f7ff ff79 	bl	8008784 <_Balloc>
 8008892:	4680      	mov	r8, r0
 8008894:	b928      	cbnz	r0, 80088a2 <__multadd+0x5a>
 8008896:	4602      	mov	r2, r0
 8008898:	4b0c      	ldr	r3, [pc, #48]	@ (80088cc <__multadd+0x84>)
 800889a:	480d      	ldr	r0, [pc, #52]	@ (80088d0 <__multadd+0x88>)
 800889c:	21ba      	movs	r1, #186	@ 0xba
 800889e:	f001 fea7 	bl	800a5f0 <__assert_func>
 80088a2:	6922      	ldr	r2, [r4, #16]
 80088a4:	3202      	adds	r2, #2
 80088a6:	f104 010c 	add.w	r1, r4, #12
 80088aa:	0092      	lsls	r2, r2, #2
 80088ac:	300c      	adds	r0, #12
 80088ae:	f7ff f8be 	bl	8007a2e <memcpy>
 80088b2:	4621      	mov	r1, r4
 80088b4:	4638      	mov	r0, r7
 80088b6:	f7ff ffa5 	bl	8008804 <_Bfree>
 80088ba:	4644      	mov	r4, r8
 80088bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088c0:	3501      	adds	r5, #1
 80088c2:	615e      	str	r6, [r3, #20]
 80088c4:	6125      	str	r5, [r4, #16]
 80088c6:	4620      	mov	r0, r4
 80088c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088cc:	0800be35 	.word	0x0800be35
 80088d0:	0800be46 	.word	0x0800be46

080088d4 <__s2b>:
 80088d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d8:	460c      	mov	r4, r1
 80088da:	4615      	mov	r5, r2
 80088dc:	461f      	mov	r7, r3
 80088de:	2209      	movs	r2, #9
 80088e0:	3308      	adds	r3, #8
 80088e2:	4606      	mov	r6, r0
 80088e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80088e8:	2100      	movs	r1, #0
 80088ea:	2201      	movs	r2, #1
 80088ec:	429a      	cmp	r2, r3
 80088ee:	db09      	blt.n	8008904 <__s2b+0x30>
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff ff47 	bl	8008784 <_Balloc>
 80088f6:	b940      	cbnz	r0, 800890a <__s2b+0x36>
 80088f8:	4602      	mov	r2, r0
 80088fa:	4b19      	ldr	r3, [pc, #100]	@ (8008960 <__s2b+0x8c>)
 80088fc:	4819      	ldr	r0, [pc, #100]	@ (8008964 <__s2b+0x90>)
 80088fe:	21d3      	movs	r1, #211	@ 0xd3
 8008900:	f001 fe76 	bl	800a5f0 <__assert_func>
 8008904:	0052      	lsls	r2, r2, #1
 8008906:	3101      	adds	r1, #1
 8008908:	e7f0      	b.n	80088ec <__s2b+0x18>
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	6143      	str	r3, [r0, #20]
 800890e:	2d09      	cmp	r5, #9
 8008910:	f04f 0301 	mov.w	r3, #1
 8008914:	6103      	str	r3, [r0, #16]
 8008916:	dd16      	ble.n	8008946 <__s2b+0x72>
 8008918:	f104 0909 	add.w	r9, r4, #9
 800891c:	46c8      	mov	r8, r9
 800891e:	442c      	add	r4, r5
 8008920:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008924:	4601      	mov	r1, r0
 8008926:	3b30      	subs	r3, #48	@ 0x30
 8008928:	220a      	movs	r2, #10
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff ff8c 	bl	8008848 <__multadd>
 8008930:	45a0      	cmp	r8, r4
 8008932:	d1f5      	bne.n	8008920 <__s2b+0x4c>
 8008934:	f1a5 0408 	sub.w	r4, r5, #8
 8008938:	444c      	add	r4, r9
 800893a:	1b2d      	subs	r5, r5, r4
 800893c:	1963      	adds	r3, r4, r5
 800893e:	42bb      	cmp	r3, r7
 8008940:	db04      	blt.n	800894c <__s2b+0x78>
 8008942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008946:	340a      	adds	r4, #10
 8008948:	2509      	movs	r5, #9
 800894a:	e7f6      	b.n	800893a <__s2b+0x66>
 800894c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008950:	4601      	mov	r1, r0
 8008952:	3b30      	subs	r3, #48	@ 0x30
 8008954:	220a      	movs	r2, #10
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ff76 	bl	8008848 <__multadd>
 800895c:	e7ee      	b.n	800893c <__s2b+0x68>
 800895e:	bf00      	nop
 8008960:	0800be35 	.word	0x0800be35
 8008964:	0800be46 	.word	0x0800be46

08008968 <__hi0bits>:
 8008968:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800896c:	4603      	mov	r3, r0
 800896e:	bf36      	itet	cc
 8008970:	0403      	lslcc	r3, r0, #16
 8008972:	2000      	movcs	r0, #0
 8008974:	2010      	movcc	r0, #16
 8008976:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800897a:	bf3c      	itt	cc
 800897c:	021b      	lslcc	r3, r3, #8
 800897e:	3008      	addcc	r0, #8
 8008980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008984:	bf3c      	itt	cc
 8008986:	011b      	lslcc	r3, r3, #4
 8008988:	3004      	addcc	r0, #4
 800898a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800898e:	bf3c      	itt	cc
 8008990:	009b      	lslcc	r3, r3, #2
 8008992:	3002      	addcc	r0, #2
 8008994:	2b00      	cmp	r3, #0
 8008996:	db05      	blt.n	80089a4 <__hi0bits+0x3c>
 8008998:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800899c:	f100 0001 	add.w	r0, r0, #1
 80089a0:	bf08      	it	eq
 80089a2:	2020      	moveq	r0, #32
 80089a4:	4770      	bx	lr

080089a6 <__lo0bits>:
 80089a6:	6803      	ldr	r3, [r0, #0]
 80089a8:	4602      	mov	r2, r0
 80089aa:	f013 0007 	ands.w	r0, r3, #7
 80089ae:	d00b      	beq.n	80089c8 <__lo0bits+0x22>
 80089b0:	07d9      	lsls	r1, r3, #31
 80089b2:	d421      	bmi.n	80089f8 <__lo0bits+0x52>
 80089b4:	0798      	lsls	r0, r3, #30
 80089b6:	bf49      	itett	mi
 80089b8:	085b      	lsrmi	r3, r3, #1
 80089ba:	089b      	lsrpl	r3, r3, #2
 80089bc:	2001      	movmi	r0, #1
 80089be:	6013      	strmi	r3, [r2, #0]
 80089c0:	bf5c      	itt	pl
 80089c2:	6013      	strpl	r3, [r2, #0]
 80089c4:	2002      	movpl	r0, #2
 80089c6:	4770      	bx	lr
 80089c8:	b299      	uxth	r1, r3
 80089ca:	b909      	cbnz	r1, 80089d0 <__lo0bits+0x2a>
 80089cc:	0c1b      	lsrs	r3, r3, #16
 80089ce:	2010      	movs	r0, #16
 80089d0:	b2d9      	uxtb	r1, r3
 80089d2:	b909      	cbnz	r1, 80089d8 <__lo0bits+0x32>
 80089d4:	3008      	adds	r0, #8
 80089d6:	0a1b      	lsrs	r3, r3, #8
 80089d8:	0719      	lsls	r1, r3, #28
 80089da:	bf04      	itt	eq
 80089dc:	091b      	lsreq	r3, r3, #4
 80089de:	3004      	addeq	r0, #4
 80089e0:	0799      	lsls	r1, r3, #30
 80089e2:	bf04      	itt	eq
 80089e4:	089b      	lsreq	r3, r3, #2
 80089e6:	3002      	addeq	r0, #2
 80089e8:	07d9      	lsls	r1, r3, #31
 80089ea:	d403      	bmi.n	80089f4 <__lo0bits+0x4e>
 80089ec:	085b      	lsrs	r3, r3, #1
 80089ee:	f100 0001 	add.w	r0, r0, #1
 80089f2:	d003      	beq.n	80089fc <__lo0bits+0x56>
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	4770      	bx	lr
 80089f8:	2000      	movs	r0, #0
 80089fa:	4770      	bx	lr
 80089fc:	2020      	movs	r0, #32
 80089fe:	4770      	bx	lr

08008a00 <__i2b>:
 8008a00:	b510      	push	{r4, lr}
 8008a02:	460c      	mov	r4, r1
 8008a04:	2101      	movs	r1, #1
 8008a06:	f7ff febd 	bl	8008784 <_Balloc>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	b928      	cbnz	r0, 8008a1a <__i2b+0x1a>
 8008a0e:	4b05      	ldr	r3, [pc, #20]	@ (8008a24 <__i2b+0x24>)
 8008a10:	4805      	ldr	r0, [pc, #20]	@ (8008a28 <__i2b+0x28>)
 8008a12:	f240 1145 	movw	r1, #325	@ 0x145
 8008a16:	f001 fdeb 	bl	800a5f0 <__assert_func>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	6144      	str	r4, [r0, #20]
 8008a1e:	6103      	str	r3, [r0, #16]
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	bf00      	nop
 8008a24:	0800be35 	.word	0x0800be35
 8008a28:	0800be46 	.word	0x0800be46

08008a2c <__multiply>:
 8008a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	4614      	mov	r4, r2
 8008a32:	690a      	ldr	r2, [r1, #16]
 8008a34:	6923      	ldr	r3, [r4, #16]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	bfa8      	it	ge
 8008a3a:	4623      	movge	r3, r4
 8008a3c:	460f      	mov	r7, r1
 8008a3e:	bfa4      	itt	ge
 8008a40:	460c      	movge	r4, r1
 8008a42:	461f      	movge	r7, r3
 8008a44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a4c:	68a3      	ldr	r3, [r4, #8]
 8008a4e:	6861      	ldr	r1, [r4, #4]
 8008a50:	eb0a 0609 	add.w	r6, sl, r9
 8008a54:	42b3      	cmp	r3, r6
 8008a56:	b085      	sub	sp, #20
 8008a58:	bfb8      	it	lt
 8008a5a:	3101      	addlt	r1, #1
 8008a5c:	f7ff fe92 	bl	8008784 <_Balloc>
 8008a60:	b930      	cbnz	r0, 8008a70 <__multiply+0x44>
 8008a62:	4602      	mov	r2, r0
 8008a64:	4b44      	ldr	r3, [pc, #272]	@ (8008b78 <__multiply+0x14c>)
 8008a66:	4845      	ldr	r0, [pc, #276]	@ (8008b7c <__multiply+0x150>)
 8008a68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a6c:	f001 fdc0 	bl	800a5f0 <__assert_func>
 8008a70:	f100 0514 	add.w	r5, r0, #20
 8008a74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a78:	462b      	mov	r3, r5
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	4543      	cmp	r3, r8
 8008a7e:	d321      	bcc.n	8008ac4 <__multiply+0x98>
 8008a80:	f107 0114 	add.w	r1, r7, #20
 8008a84:	f104 0214 	add.w	r2, r4, #20
 8008a88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008a8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008a90:	9302      	str	r3, [sp, #8]
 8008a92:	1b13      	subs	r3, r2, r4
 8008a94:	3b15      	subs	r3, #21
 8008a96:	f023 0303 	bic.w	r3, r3, #3
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	f104 0715 	add.w	r7, r4, #21
 8008aa0:	42ba      	cmp	r2, r7
 8008aa2:	bf38      	it	cc
 8008aa4:	2304      	movcc	r3, #4
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	9b02      	ldr	r3, [sp, #8]
 8008aaa:	9103      	str	r1, [sp, #12]
 8008aac:	428b      	cmp	r3, r1
 8008aae:	d80c      	bhi.n	8008aca <__multiply+0x9e>
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	dd03      	ble.n	8008abc <__multiply+0x90>
 8008ab4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d05b      	beq.n	8008b74 <__multiply+0x148>
 8008abc:	6106      	str	r6, [r0, #16]
 8008abe:	b005      	add	sp, #20
 8008ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac4:	f843 2b04 	str.w	r2, [r3], #4
 8008ac8:	e7d8      	b.n	8008a7c <__multiply+0x50>
 8008aca:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ace:	f1ba 0f00 	cmp.w	sl, #0
 8008ad2:	d024      	beq.n	8008b1e <__multiply+0xf2>
 8008ad4:	f104 0e14 	add.w	lr, r4, #20
 8008ad8:	46a9      	mov	r9, r5
 8008ada:	f04f 0c00 	mov.w	ip, #0
 8008ade:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ae2:	f8d9 3000 	ldr.w	r3, [r9]
 8008ae6:	fa1f fb87 	uxth.w	fp, r7
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	fb0a 330b 	mla	r3, sl, fp, r3
 8008af0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008af4:	f8d9 7000 	ldr.w	r7, [r9]
 8008af8:	4463      	add	r3, ip
 8008afa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008afe:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b0c:	4572      	cmp	r2, lr
 8008b0e:	f849 3b04 	str.w	r3, [r9], #4
 8008b12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b16:	d8e2      	bhi.n	8008ade <__multiply+0xb2>
 8008b18:	9b01      	ldr	r3, [sp, #4]
 8008b1a:	f845 c003 	str.w	ip, [r5, r3]
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b24:	3104      	adds	r1, #4
 8008b26:	f1b9 0f00 	cmp.w	r9, #0
 8008b2a:	d021      	beq.n	8008b70 <__multiply+0x144>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	f104 0c14 	add.w	ip, r4, #20
 8008b32:	46ae      	mov	lr, r5
 8008b34:	f04f 0a00 	mov.w	sl, #0
 8008b38:	f8bc b000 	ldrh.w	fp, [ip]
 8008b3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b40:	fb09 770b 	mla	r7, r9, fp, r7
 8008b44:	4457      	add	r7, sl
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b4c:	f84e 3b04 	str.w	r3, [lr], #4
 8008b50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b58:	f8be 3000 	ldrh.w	r3, [lr]
 8008b5c:	fb09 330a 	mla	r3, r9, sl, r3
 8008b60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b64:	4562      	cmp	r2, ip
 8008b66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b6a:	d8e5      	bhi.n	8008b38 <__multiply+0x10c>
 8008b6c:	9f01      	ldr	r7, [sp, #4]
 8008b6e:	51eb      	str	r3, [r5, r7]
 8008b70:	3504      	adds	r5, #4
 8008b72:	e799      	b.n	8008aa8 <__multiply+0x7c>
 8008b74:	3e01      	subs	r6, #1
 8008b76:	e79b      	b.n	8008ab0 <__multiply+0x84>
 8008b78:	0800be35 	.word	0x0800be35
 8008b7c:	0800be46 	.word	0x0800be46

08008b80 <__pow5mult>:
 8008b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b84:	4615      	mov	r5, r2
 8008b86:	f012 0203 	ands.w	r2, r2, #3
 8008b8a:	4607      	mov	r7, r0
 8008b8c:	460e      	mov	r6, r1
 8008b8e:	d007      	beq.n	8008ba0 <__pow5mult+0x20>
 8008b90:	4c25      	ldr	r4, [pc, #148]	@ (8008c28 <__pow5mult+0xa8>)
 8008b92:	3a01      	subs	r2, #1
 8008b94:	2300      	movs	r3, #0
 8008b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b9a:	f7ff fe55 	bl	8008848 <__multadd>
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	10ad      	asrs	r5, r5, #2
 8008ba2:	d03d      	beq.n	8008c20 <__pow5mult+0xa0>
 8008ba4:	69fc      	ldr	r4, [r7, #28]
 8008ba6:	b97c      	cbnz	r4, 8008bc8 <__pow5mult+0x48>
 8008ba8:	2010      	movs	r0, #16
 8008baa:	f7fd fd65 	bl	8006678 <malloc>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	61f8      	str	r0, [r7, #28]
 8008bb2:	b928      	cbnz	r0, 8008bc0 <__pow5mult+0x40>
 8008bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c2c <__pow5mult+0xac>)
 8008bb6:	481e      	ldr	r0, [pc, #120]	@ (8008c30 <__pow5mult+0xb0>)
 8008bb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bbc:	f001 fd18 	bl	800a5f0 <__assert_func>
 8008bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bc4:	6004      	str	r4, [r0, #0]
 8008bc6:	60c4      	str	r4, [r0, #12]
 8008bc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bd0:	b94c      	cbnz	r4, 8008be6 <__pow5mult+0x66>
 8008bd2:	f240 2171 	movw	r1, #625	@ 0x271
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f7ff ff12 	bl	8008a00 <__i2b>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8008be2:	4604      	mov	r4, r0
 8008be4:	6003      	str	r3, [r0, #0]
 8008be6:	f04f 0900 	mov.w	r9, #0
 8008bea:	07eb      	lsls	r3, r5, #31
 8008bec:	d50a      	bpl.n	8008c04 <__pow5mult+0x84>
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4622      	mov	r2, r4
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	f7ff ff1a 	bl	8008a2c <__multiply>
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f7ff fe01 	bl	8008804 <_Bfree>
 8008c02:	4646      	mov	r6, r8
 8008c04:	106d      	asrs	r5, r5, #1
 8008c06:	d00b      	beq.n	8008c20 <__pow5mult+0xa0>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	b938      	cbnz	r0, 8008c1c <__pow5mult+0x9c>
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4638      	mov	r0, r7
 8008c12:	f7ff ff0b 	bl	8008a2c <__multiply>
 8008c16:	6020      	str	r0, [r4, #0]
 8008c18:	f8c0 9000 	str.w	r9, [r0]
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	e7e4      	b.n	8008bea <__pow5mult+0x6a>
 8008c20:	4630      	mov	r0, r6
 8008c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c26:	bf00      	nop
 8008c28:	0800bea0 	.word	0x0800bea0
 8008c2c:	0800bdc6 	.word	0x0800bdc6
 8008c30:	0800be46 	.word	0x0800be46

08008c34 <__lshift>:
 8008c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c38:	460c      	mov	r4, r1
 8008c3a:	6849      	ldr	r1, [r1, #4]
 8008c3c:	6923      	ldr	r3, [r4, #16]
 8008c3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c42:	68a3      	ldr	r3, [r4, #8]
 8008c44:	4607      	mov	r7, r0
 8008c46:	4691      	mov	r9, r2
 8008c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c4c:	f108 0601 	add.w	r6, r8, #1
 8008c50:	42b3      	cmp	r3, r6
 8008c52:	db0b      	blt.n	8008c6c <__lshift+0x38>
 8008c54:	4638      	mov	r0, r7
 8008c56:	f7ff fd95 	bl	8008784 <_Balloc>
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	b948      	cbnz	r0, 8008c72 <__lshift+0x3e>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	4b28      	ldr	r3, [pc, #160]	@ (8008d04 <__lshift+0xd0>)
 8008c62:	4829      	ldr	r0, [pc, #164]	@ (8008d08 <__lshift+0xd4>)
 8008c64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c68:	f001 fcc2 	bl	800a5f0 <__assert_func>
 8008c6c:	3101      	adds	r1, #1
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	e7ee      	b.n	8008c50 <__lshift+0x1c>
 8008c72:	2300      	movs	r3, #0
 8008c74:	f100 0114 	add.w	r1, r0, #20
 8008c78:	f100 0210 	add.w	r2, r0, #16
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	4553      	cmp	r3, sl
 8008c80:	db33      	blt.n	8008cea <__lshift+0xb6>
 8008c82:	6920      	ldr	r0, [r4, #16]
 8008c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c88:	f104 0314 	add.w	r3, r4, #20
 8008c8c:	f019 091f 	ands.w	r9, r9, #31
 8008c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c98:	d02b      	beq.n	8008cf2 <__lshift+0xbe>
 8008c9a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c9e:	468a      	mov	sl, r1
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	6818      	ldr	r0, [r3, #0]
 8008ca4:	fa00 f009 	lsl.w	r0, r0, r9
 8008ca8:	4310      	orrs	r0, r2
 8008caa:	f84a 0b04 	str.w	r0, [sl], #4
 8008cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb2:	459c      	cmp	ip, r3
 8008cb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cb8:	d8f3      	bhi.n	8008ca2 <__lshift+0x6e>
 8008cba:	ebac 0304 	sub.w	r3, ip, r4
 8008cbe:	3b15      	subs	r3, #21
 8008cc0:	f023 0303 	bic.w	r3, r3, #3
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	f104 0015 	add.w	r0, r4, #21
 8008cca:	4584      	cmp	ip, r0
 8008ccc:	bf38      	it	cc
 8008cce:	2304      	movcc	r3, #4
 8008cd0:	50ca      	str	r2, [r1, r3]
 8008cd2:	b10a      	cbz	r2, 8008cd8 <__lshift+0xa4>
 8008cd4:	f108 0602 	add.w	r6, r8, #2
 8008cd8:	3e01      	subs	r6, #1
 8008cda:	4638      	mov	r0, r7
 8008cdc:	612e      	str	r6, [r5, #16]
 8008cde:	4621      	mov	r1, r4
 8008ce0:	f7ff fd90 	bl	8008804 <_Bfree>
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cee:	3301      	adds	r3, #1
 8008cf0:	e7c5      	b.n	8008c7e <__lshift+0x4a>
 8008cf2:	3904      	subs	r1, #4
 8008cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cfc:	459c      	cmp	ip, r3
 8008cfe:	d8f9      	bhi.n	8008cf4 <__lshift+0xc0>
 8008d00:	e7ea      	b.n	8008cd8 <__lshift+0xa4>
 8008d02:	bf00      	nop
 8008d04:	0800be35 	.word	0x0800be35
 8008d08:	0800be46 	.word	0x0800be46

08008d0c <__mcmp>:
 8008d0c:	690a      	ldr	r2, [r1, #16]
 8008d0e:	4603      	mov	r3, r0
 8008d10:	6900      	ldr	r0, [r0, #16]
 8008d12:	1a80      	subs	r0, r0, r2
 8008d14:	b530      	push	{r4, r5, lr}
 8008d16:	d10e      	bne.n	8008d36 <__mcmp+0x2a>
 8008d18:	3314      	adds	r3, #20
 8008d1a:	3114      	adds	r1, #20
 8008d1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d2c:	4295      	cmp	r5, r2
 8008d2e:	d003      	beq.n	8008d38 <__mcmp+0x2c>
 8008d30:	d205      	bcs.n	8008d3e <__mcmp+0x32>
 8008d32:	f04f 30ff 	mov.w	r0, #4294967295
 8008d36:	bd30      	pop	{r4, r5, pc}
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	d3f3      	bcc.n	8008d24 <__mcmp+0x18>
 8008d3c:	e7fb      	b.n	8008d36 <__mcmp+0x2a>
 8008d3e:	2001      	movs	r0, #1
 8008d40:	e7f9      	b.n	8008d36 <__mcmp+0x2a>
	...

08008d44 <__mdiff>:
 8008d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	4689      	mov	r9, r1
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4648      	mov	r0, r9
 8008d50:	4614      	mov	r4, r2
 8008d52:	f7ff ffdb 	bl	8008d0c <__mcmp>
 8008d56:	1e05      	subs	r5, r0, #0
 8008d58:	d112      	bne.n	8008d80 <__mdiff+0x3c>
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff fd11 	bl	8008784 <_Balloc>
 8008d62:	4602      	mov	r2, r0
 8008d64:	b928      	cbnz	r0, 8008d72 <__mdiff+0x2e>
 8008d66:	4b3f      	ldr	r3, [pc, #252]	@ (8008e64 <__mdiff+0x120>)
 8008d68:	f240 2137 	movw	r1, #567	@ 0x237
 8008d6c:	483e      	ldr	r0, [pc, #248]	@ (8008e68 <__mdiff+0x124>)
 8008d6e:	f001 fc3f 	bl	800a5f0 <__assert_func>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d78:	4610      	mov	r0, r2
 8008d7a:	b003      	add	sp, #12
 8008d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d80:	bfbc      	itt	lt
 8008d82:	464b      	movlt	r3, r9
 8008d84:	46a1      	movlt	r9, r4
 8008d86:	4630      	mov	r0, r6
 8008d88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d8c:	bfba      	itte	lt
 8008d8e:	461c      	movlt	r4, r3
 8008d90:	2501      	movlt	r5, #1
 8008d92:	2500      	movge	r5, #0
 8008d94:	f7ff fcf6 	bl	8008784 <_Balloc>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	b918      	cbnz	r0, 8008da4 <__mdiff+0x60>
 8008d9c:	4b31      	ldr	r3, [pc, #196]	@ (8008e64 <__mdiff+0x120>)
 8008d9e:	f240 2145 	movw	r1, #581	@ 0x245
 8008da2:	e7e3      	b.n	8008d6c <__mdiff+0x28>
 8008da4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008da8:	6926      	ldr	r6, [r4, #16]
 8008daa:	60c5      	str	r5, [r0, #12]
 8008dac:	f109 0310 	add.w	r3, r9, #16
 8008db0:	f109 0514 	add.w	r5, r9, #20
 8008db4:	f104 0e14 	add.w	lr, r4, #20
 8008db8:	f100 0b14 	add.w	fp, r0, #20
 8008dbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	46d9      	mov	r9, fp
 8008dc8:	f04f 0c00 	mov.w	ip, #0
 8008dcc:	9b01      	ldr	r3, [sp, #4]
 8008dce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008dd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	fa1f f38a 	uxth.w	r3, sl
 8008ddc:	4619      	mov	r1, r3
 8008dde:	b283      	uxth	r3, r0
 8008de0:	1acb      	subs	r3, r1, r3
 8008de2:	0c00      	lsrs	r0, r0, #16
 8008de4:	4463      	add	r3, ip
 8008de6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008dea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008df4:	4576      	cmp	r6, lr
 8008df6:	f849 3b04 	str.w	r3, [r9], #4
 8008dfa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008dfe:	d8e5      	bhi.n	8008dcc <__mdiff+0x88>
 8008e00:	1b33      	subs	r3, r6, r4
 8008e02:	3b15      	subs	r3, #21
 8008e04:	f023 0303 	bic.w	r3, r3, #3
 8008e08:	3415      	adds	r4, #21
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	42a6      	cmp	r6, r4
 8008e0e:	bf38      	it	cc
 8008e10:	2304      	movcc	r3, #4
 8008e12:	441d      	add	r5, r3
 8008e14:	445b      	add	r3, fp
 8008e16:	461e      	mov	r6, r3
 8008e18:	462c      	mov	r4, r5
 8008e1a:	4544      	cmp	r4, r8
 8008e1c:	d30e      	bcc.n	8008e3c <__mdiff+0xf8>
 8008e1e:	f108 0103 	add.w	r1, r8, #3
 8008e22:	1b49      	subs	r1, r1, r5
 8008e24:	f021 0103 	bic.w	r1, r1, #3
 8008e28:	3d03      	subs	r5, #3
 8008e2a:	45a8      	cmp	r8, r5
 8008e2c:	bf38      	it	cc
 8008e2e:	2100      	movcc	r1, #0
 8008e30:	440b      	add	r3, r1
 8008e32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e36:	b191      	cbz	r1, 8008e5e <__mdiff+0x11a>
 8008e38:	6117      	str	r7, [r2, #16]
 8008e3a:	e79d      	b.n	8008d78 <__mdiff+0x34>
 8008e3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e40:	46e6      	mov	lr, ip
 8008e42:	0c08      	lsrs	r0, r1, #16
 8008e44:	fa1c fc81 	uxtah	ip, ip, r1
 8008e48:	4471      	add	r1, lr
 8008e4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e4e:	b289      	uxth	r1, r1
 8008e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e54:	f846 1b04 	str.w	r1, [r6], #4
 8008e58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e5c:	e7dd      	b.n	8008e1a <__mdiff+0xd6>
 8008e5e:	3f01      	subs	r7, #1
 8008e60:	e7e7      	b.n	8008e32 <__mdiff+0xee>
 8008e62:	bf00      	nop
 8008e64:	0800be35 	.word	0x0800be35
 8008e68:	0800be46 	.word	0x0800be46

08008e6c <__ulp>:
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	ed8d 0b00 	vstr	d0, [sp]
 8008e72:	9a01      	ldr	r2, [sp, #4]
 8008e74:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb4 <__ulp+0x48>)
 8008e76:	4013      	ands	r3, r2
 8008e78:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	dc08      	bgt.n	8008e92 <__ulp+0x26>
 8008e80:	425b      	negs	r3, r3
 8008e82:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008e86:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e8a:	da04      	bge.n	8008e96 <__ulp+0x2a>
 8008e8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008e90:	4113      	asrs	r3, r2
 8008e92:	2200      	movs	r2, #0
 8008e94:	e008      	b.n	8008ea8 <__ulp+0x3c>
 8008e96:	f1a2 0314 	sub.w	r3, r2, #20
 8008e9a:	2b1e      	cmp	r3, #30
 8008e9c:	bfda      	itte	le
 8008e9e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ea2:	40da      	lsrle	r2, r3
 8008ea4:	2201      	movgt	r2, #1
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4610      	mov	r0, r2
 8008eac:	ec41 0b10 	vmov	d0, r0, r1
 8008eb0:	b002      	add	sp, #8
 8008eb2:	4770      	bx	lr
 8008eb4:	7ff00000 	.word	0x7ff00000

08008eb8 <__b2d>:
 8008eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebc:	6906      	ldr	r6, [r0, #16]
 8008ebe:	f100 0814 	add.w	r8, r0, #20
 8008ec2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008ec6:	1f37      	subs	r7, r6, #4
 8008ec8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ecc:	4610      	mov	r0, r2
 8008ece:	f7ff fd4b 	bl	8008968 <__hi0bits>
 8008ed2:	f1c0 0320 	rsb	r3, r0, #32
 8008ed6:	280a      	cmp	r0, #10
 8008ed8:	600b      	str	r3, [r1, #0]
 8008eda:	491b      	ldr	r1, [pc, #108]	@ (8008f48 <__b2d+0x90>)
 8008edc:	dc15      	bgt.n	8008f0a <__b2d+0x52>
 8008ede:	f1c0 0c0b 	rsb	ip, r0, #11
 8008ee2:	fa22 f30c 	lsr.w	r3, r2, ip
 8008ee6:	45b8      	cmp	r8, r7
 8008ee8:	ea43 0501 	orr.w	r5, r3, r1
 8008eec:	bf34      	ite	cc
 8008eee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ef2:	2300      	movcs	r3, #0
 8008ef4:	3015      	adds	r0, #21
 8008ef6:	fa02 f000 	lsl.w	r0, r2, r0
 8008efa:	fa23 f30c 	lsr.w	r3, r3, ip
 8008efe:	4303      	orrs	r3, r0
 8008f00:	461c      	mov	r4, r3
 8008f02:	ec45 4b10 	vmov	d0, r4, r5
 8008f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f0a:	45b8      	cmp	r8, r7
 8008f0c:	bf3a      	itte	cc
 8008f0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f12:	f1a6 0708 	subcc.w	r7, r6, #8
 8008f16:	2300      	movcs	r3, #0
 8008f18:	380b      	subs	r0, #11
 8008f1a:	d012      	beq.n	8008f42 <__b2d+0x8a>
 8008f1c:	f1c0 0120 	rsb	r1, r0, #32
 8008f20:	fa23 f401 	lsr.w	r4, r3, r1
 8008f24:	4082      	lsls	r2, r0
 8008f26:	4322      	orrs	r2, r4
 8008f28:	4547      	cmp	r7, r8
 8008f2a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008f2e:	bf8c      	ite	hi
 8008f30:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008f34:	2200      	movls	r2, #0
 8008f36:	4083      	lsls	r3, r0
 8008f38:	40ca      	lsrs	r2, r1
 8008f3a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	e7de      	b.n	8008f00 <__b2d+0x48>
 8008f42:	ea42 0501 	orr.w	r5, r2, r1
 8008f46:	e7db      	b.n	8008f00 <__b2d+0x48>
 8008f48:	3ff00000 	.word	0x3ff00000

08008f4c <__d2b>:
 8008f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	460f      	mov	r7, r1
 8008f52:	2101      	movs	r1, #1
 8008f54:	ec59 8b10 	vmov	r8, r9, d0
 8008f58:	4616      	mov	r6, r2
 8008f5a:	f7ff fc13 	bl	8008784 <_Balloc>
 8008f5e:	4604      	mov	r4, r0
 8008f60:	b930      	cbnz	r0, 8008f70 <__d2b+0x24>
 8008f62:	4602      	mov	r2, r0
 8008f64:	4b23      	ldr	r3, [pc, #140]	@ (8008ff4 <__d2b+0xa8>)
 8008f66:	4824      	ldr	r0, [pc, #144]	@ (8008ff8 <__d2b+0xac>)
 8008f68:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f6c:	f001 fb40 	bl	800a5f0 <__assert_func>
 8008f70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f78:	b10d      	cbz	r5, 8008f7e <__d2b+0x32>
 8008f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	f1b8 0300 	subs.w	r3, r8, #0
 8008f84:	d023      	beq.n	8008fce <__d2b+0x82>
 8008f86:	4668      	mov	r0, sp
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	f7ff fd0c 	bl	80089a6 <__lo0bits>
 8008f8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f92:	b1d0      	cbz	r0, 8008fca <__d2b+0x7e>
 8008f94:	f1c0 0320 	rsb	r3, r0, #32
 8008f98:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	40c2      	lsrs	r2, r0
 8008fa0:	6163      	str	r3, [r4, #20]
 8008fa2:	9201      	str	r2, [sp, #4]
 8008fa4:	9b01      	ldr	r3, [sp, #4]
 8008fa6:	61a3      	str	r3, [r4, #24]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bf0c      	ite	eq
 8008fac:	2201      	moveq	r2, #1
 8008fae:	2202      	movne	r2, #2
 8008fb0:	6122      	str	r2, [r4, #16]
 8008fb2:	b1a5      	cbz	r5, 8008fde <__d2b+0x92>
 8008fb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fb8:	4405      	add	r5, r0
 8008fba:	603d      	str	r5, [r7, #0]
 8008fbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fc0:	6030      	str	r0, [r6, #0]
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	b003      	add	sp, #12
 8008fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fca:	6161      	str	r1, [r4, #20]
 8008fcc:	e7ea      	b.n	8008fa4 <__d2b+0x58>
 8008fce:	a801      	add	r0, sp, #4
 8008fd0:	f7ff fce9 	bl	80089a6 <__lo0bits>
 8008fd4:	9b01      	ldr	r3, [sp, #4]
 8008fd6:	6163      	str	r3, [r4, #20]
 8008fd8:	3020      	adds	r0, #32
 8008fda:	2201      	movs	r2, #1
 8008fdc:	e7e8      	b.n	8008fb0 <__d2b+0x64>
 8008fde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fe2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008fe6:	6038      	str	r0, [r7, #0]
 8008fe8:	6918      	ldr	r0, [r3, #16]
 8008fea:	f7ff fcbd 	bl	8008968 <__hi0bits>
 8008fee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ff2:	e7e5      	b.n	8008fc0 <__d2b+0x74>
 8008ff4:	0800be35 	.word	0x0800be35
 8008ff8:	0800be46 	.word	0x0800be46

08008ffc <__ratio>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	b085      	sub	sp, #20
 8009002:	e9cd 1000 	strd	r1, r0, [sp]
 8009006:	a902      	add	r1, sp, #8
 8009008:	f7ff ff56 	bl	8008eb8 <__b2d>
 800900c:	9800      	ldr	r0, [sp, #0]
 800900e:	a903      	add	r1, sp, #12
 8009010:	ec55 4b10 	vmov	r4, r5, d0
 8009014:	f7ff ff50 	bl	8008eb8 <__b2d>
 8009018:	9b01      	ldr	r3, [sp, #4]
 800901a:	6919      	ldr	r1, [r3, #16]
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	1ac9      	subs	r1, r1, r3
 8009022:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009026:	1a9b      	subs	r3, r3, r2
 8009028:	ec5b ab10 	vmov	sl, fp, d0
 800902c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfce      	itee	gt
 8009034:	462a      	movgt	r2, r5
 8009036:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800903a:	465a      	movle	r2, fp
 800903c:	462f      	mov	r7, r5
 800903e:	46d9      	mov	r9, fp
 8009040:	bfcc      	ite	gt
 8009042:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009046:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800904a:	464b      	mov	r3, r9
 800904c:	4652      	mov	r2, sl
 800904e:	4620      	mov	r0, r4
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 fc23 	bl	800089c <__aeabi_ddiv>
 8009056:	ec41 0b10 	vmov	d0, r0, r1
 800905a:	b005      	add	sp, #20
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009060 <__copybits>:
 8009060:	3901      	subs	r1, #1
 8009062:	b570      	push	{r4, r5, r6, lr}
 8009064:	1149      	asrs	r1, r1, #5
 8009066:	6914      	ldr	r4, [r2, #16]
 8009068:	3101      	adds	r1, #1
 800906a:	f102 0314 	add.w	r3, r2, #20
 800906e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009072:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009076:	1f05      	subs	r5, r0, #4
 8009078:	42a3      	cmp	r3, r4
 800907a:	d30c      	bcc.n	8009096 <__copybits+0x36>
 800907c:	1aa3      	subs	r3, r4, r2
 800907e:	3b11      	subs	r3, #17
 8009080:	f023 0303 	bic.w	r3, r3, #3
 8009084:	3211      	adds	r2, #17
 8009086:	42a2      	cmp	r2, r4
 8009088:	bf88      	it	hi
 800908a:	2300      	movhi	r3, #0
 800908c:	4418      	add	r0, r3
 800908e:	2300      	movs	r3, #0
 8009090:	4288      	cmp	r0, r1
 8009092:	d305      	bcc.n	80090a0 <__copybits+0x40>
 8009094:	bd70      	pop	{r4, r5, r6, pc}
 8009096:	f853 6b04 	ldr.w	r6, [r3], #4
 800909a:	f845 6f04 	str.w	r6, [r5, #4]!
 800909e:	e7eb      	b.n	8009078 <__copybits+0x18>
 80090a0:	f840 3b04 	str.w	r3, [r0], #4
 80090a4:	e7f4      	b.n	8009090 <__copybits+0x30>

080090a6 <__any_on>:
 80090a6:	f100 0214 	add.w	r2, r0, #20
 80090aa:	6900      	ldr	r0, [r0, #16]
 80090ac:	114b      	asrs	r3, r1, #5
 80090ae:	4298      	cmp	r0, r3
 80090b0:	b510      	push	{r4, lr}
 80090b2:	db11      	blt.n	80090d8 <__any_on+0x32>
 80090b4:	dd0a      	ble.n	80090cc <__any_on+0x26>
 80090b6:	f011 011f 	ands.w	r1, r1, #31
 80090ba:	d007      	beq.n	80090cc <__any_on+0x26>
 80090bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090c0:	fa24 f001 	lsr.w	r0, r4, r1
 80090c4:	fa00 f101 	lsl.w	r1, r0, r1
 80090c8:	428c      	cmp	r4, r1
 80090ca:	d10b      	bne.n	80090e4 <__any_on+0x3e>
 80090cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d803      	bhi.n	80090dc <__any_on+0x36>
 80090d4:	2000      	movs	r0, #0
 80090d6:	bd10      	pop	{r4, pc}
 80090d8:	4603      	mov	r3, r0
 80090da:	e7f7      	b.n	80090cc <__any_on+0x26>
 80090dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090e0:	2900      	cmp	r1, #0
 80090e2:	d0f5      	beq.n	80090d0 <__any_on+0x2a>
 80090e4:	2001      	movs	r0, #1
 80090e6:	e7f6      	b.n	80090d6 <__any_on+0x30>

080090e8 <sulp>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4604      	mov	r4, r0
 80090ec:	460d      	mov	r5, r1
 80090ee:	ec45 4b10 	vmov	d0, r4, r5
 80090f2:	4616      	mov	r6, r2
 80090f4:	f7ff feba 	bl	8008e6c <__ulp>
 80090f8:	ec51 0b10 	vmov	r0, r1, d0
 80090fc:	b17e      	cbz	r6, 800911e <sulp+0x36>
 80090fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009102:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009106:	2b00      	cmp	r3, #0
 8009108:	dd09      	ble.n	800911e <sulp+0x36>
 800910a:	051b      	lsls	r3, r3, #20
 800910c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009110:	2400      	movs	r4, #0
 8009112:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009116:	4622      	mov	r2, r4
 8009118:	462b      	mov	r3, r5
 800911a:	f7f7 fa95 	bl	8000648 <__aeabi_dmul>
 800911e:	ec41 0b10 	vmov	d0, r0, r1
 8009122:	bd70      	pop	{r4, r5, r6, pc}
 8009124:	0000      	movs	r0, r0
	...

08009128 <_strtod_l>:
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	b09f      	sub	sp, #124	@ 0x7c
 800912e:	460c      	mov	r4, r1
 8009130:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009132:	2200      	movs	r2, #0
 8009134:	921a      	str	r2, [sp, #104]	@ 0x68
 8009136:	9005      	str	r0, [sp, #20]
 8009138:	f04f 0a00 	mov.w	sl, #0
 800913c:	f04f 0b00 	mov.w	fp, #0
 8009140:	460a      	mov	r2, r1
 8009142:	9219      	str	r2, [sp, #100]	@ 0x64
 8009144:	7811      	ldrb	r1, [r2, #0]
 8009146:	292b      	cmp	r1, #43	@ 0x2b
 8009148:	d04a      	beq.n	80091e0 <_strtod_l+0xb8>
 800914a:	d838      	bhi.n	80091be <_strtod_l+0x96>
 800914c:	290d      	cmp	r1, #13
 800914e:	d832      	bhi.n	80091b6 <_strtod_l+0x8e>
 8009150:	2908      	cmp	r1, #8
 8009152:	d832      	bhi.n	80091ba <_strtod_l+0x92>
 8009154:	2900      	cmp	r1, #0
 8009156:	d03b      	beq.n	80091d0 <_strtod_l+0xa8>
 8009158:	2200      	movs	r2, #0
 800915a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800915c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800915e:	782a      	ldrb	r2, [r5, #0]
 8009160:	2a30      	cmp	r2, #48	@ 0x30
 8009162:	f040 80b3 	bne.w	80092cc <_strtod_l+0x1a4>
 8009166:	786a      	ldrb	r2, [r5, #1]
 8009168:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800916c:	2a58      	cmp	r2, #88	@ 0x58
 800916e:	d16e      	bne.n	800924e <_strtod_l+0x126>
 8009170:	9302      	str	r3, [sp, #8]
 8009172:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	ab1a      	add	r3, sp, #104	@ 0x68
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	4a8e      	ldr	r2, [pc, #568]	@ (80093b4 <_strtod_l+0x28c>)
 800917c:	9805      	ldr	r0, [sp, #20]
 800917e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009180:	a919      	add	r1, sp, #100	@ 0x64
 8009182:	f001 facf 	bl	800a724 <__gethex>
 8009186:	f010 060f 	ands.w	r6, r0, #15
 800918a:	4604      	mov	r4, r0
 800918c:	d005      	beq.n	800919a <_strtod_l+0x72>
 800918e:	2e06      	cmp	r6, #6
 8009190:	d128      	bne.n	80091e4 <_strtod_l+0xbc>
 8009192:	3501      	adds	r5, #1
 8009194:	2300      	movs	r3, #0
 8009196:	9519      	str	r5, [sp, #100]	@ 0x64
 8009198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800919a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800919c:	2b00      	cmp	r3, #0
 800919e:	f040 858e 	bne.w	8009cbe <_strtod_l+0xb96>
 80091a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091a4:	b1cb      	cbz	r3, 80091da <_strtod_l+0xb2>
 80091a6:	4652      	mov	r2, sl
 80091a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80091ac:	ec43 2b10 	vmov	d0, r2, r3
 80091b0:	b01f      	add	sp, #124	@ 0x7c
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	2920      	cmp	r1, #32
 80091b8:	d1ce      	bne.n	8009158 <_strtod_l+0x30>
 80091ba:	3201      	adds	r2, #1
 80091bc:	e7c1      	b.n	8009142 <_strtod_l+0x1a>
 80091be:	292d      	cmp	r1, #45	@ 0x2d
 80091c0:	d1ca      	bne.n	8009158 <_strtod_l+0x30>
 80091c2:	2101      	movs	r1, #1
 80091c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80091c6:	1c51      	adds	r1, r2, #1
 80091c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80091ca:	7852      	ldrb	r2, [r2, #1]
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	d1c5      	bne.n	800915c <_strtod_l+0x34>
 80091d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f040 8570 	bne.w	8009cba <_strtod_l+0xb92>
 80091da:	4652      	mov	r2, sl
 80091dc:	465b      	mov	r3, fp
 80091de:	e7e5      	b.n	80091ac <_strtod_l+0x84>
 80091e0:	2100      	movs	r1, #0
 80091e2:	e7ef      	b.n	80091c4 <_strtod_l+0x9c>
 80091e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091e6:	b13a      	cbz	r2, 80091f8 <_strtod_l+0xd0>
 80091e8:	2135      	movs	r1, #53	@ 0x35
 80091ea:	a81c      	add	r0, sp, #112	@ 0x70
 80091ec:	f7ff ff38 	bl	8009060 <__copybits>
 80091f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091f2:	9805      	ldr	r0, [sp, #20]
 80091f4:	f7ff fb06 	bl	8008804 <_Bfree>
 80091f8:	3e01      	subs	r6, #1
 80091fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80091fc:	2e04      	cmp	r6, #4
 80091fe:	d806      	bhi.n	800920e <_strtod_l+0xe6>
 8009200:	e8df f006 	tbb	[pc, r6]
 8009204:	201d0314 	.word	0x201d0314
 8009208:	14          	.byte	0x14
 8009209:	00          	.byte	0x00
 800920a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800920e:	05e1      	lsls	r1, r4, #23
 8009210:	bf48      	it	mi
 8009212:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009216:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800921a:	0d1b      	lsrs	r3, r3, #20
 800921c:	051b      	lsls	r3, r3, #20
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1bb      	bne.n	800919a <_strtod_l+0x72>
 8009222:	f7fe fbd7 	bl	80079d4 <__errno>
 8009226:	2322      	movs	r3, #34	@ 0x22
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	e7b6      	b.n	800919a <_strtod_l+0x72>
 800922c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009230:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009234:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009238:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800923c:	e7e7      	b.n	800920e <_strtod_l+0xe6>
 800923e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80093bc <_strtod_l+0x294>
 8009242:	e7e4      	b.n	800920e <_strtod_l+0xe6>
 8009244:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009248:	f04f 3aff 	mov.w	sl, #4294967295
 800924c:	e7df      	b.n	800920e <_strtod_l+0xe6>
 800924e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	9219      	str	r2, [sp, #100]	@ 0x64
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b30      	cmp	r3, #48	@ 0x30
 8009258:	d0f9      	beq.n	800924e <_strtod_l+0x126>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d09d      	beq.n	800919a <_strtod_l+0x72>
 800925e:	2301      	movs	r3, #1
 8009260:	9309      	str	r3, [sp, #36]	@ 0x24
 8009262:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009264:	930c      	str	r3, [sp, #48]	@ 0x30
 8009266:	2300      	movs	r3, #0
 8009268:	9308      	str	r3, [sp, #32]
 800926a:	930a      	str	r3, [sp, #40]	@ 0x28
 800926c:	461f      	mov	r7, r3
 800926e:	220a      	movs	r2, #10
 8009270:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009272:	7805      	ldrb	r5, [r0, #0]
 8009274:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009278:	b2d9      	uxtb	r1, r3
 800927a:	2909      	cmp	r1, #9
 800927c:	d928      	bls.n	80092d0 <_strtod_l+0x1a8>
 800927e:	494e      	ldr	r1, [pc, #312]	@ (80093b8 <_strtod_l+0x290>)
 8009280:	2201      	movs	r2, #1
 8009282:	f001 f979 	bl	800a578 <strncmp>
 8009286:	2800      	cmp	r0, #0
 8009288:	d032      	beq.n	80092f0 <_strtod_l+0x1c8>
 800928a:	2000      	movs	r0, #0
 800928c:	462a      	mov	r2, r5
 800928e:	4681      	mov	r9, r0
 8009290:	463d      	mov	r5, r7
 8009292:	4603      	mov	r3, r0
 8009294:	2a65      	cmp	r2, #101	@ 0x65
 8009296:	d001      	beq.n	800929c <_strtod_l+0x174>
 8009298:	2a45      	cmp	r2, #69	@ 0x45
 800929a:	d114      	bne.n	80092c6 <_strtod_l+0x19e>
 800929c:	b91d      	cbnz	r5, 80092a6 <_strtod_l+0x17e>
 800929e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092a0:	4302      	orrs	r2, r0
 80092a2:	d095      	beq.n	80091d0 <_strtod_l+0xa8>
 80092a4:	2500      	movs	r5, #0
 80092a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092a8:	1c62      	adds	r2, r4, #1
 80092aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80092ac:	7862      	ldrb	r2, [r4, #1]
 80092ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80092b0:	d077      	beq.n	80093a2 <_strtod_l+0x27a>
 80092b2:	2a2d      	cmp	r2, #45	@ 0x2d
 80092b4:	d07b      	beq.n	80093ae <_strtod_l+0x286>
 80092b6:	f04f 0c00 	mov.w	ip, #0
 80092ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80092be:	2909      	cmp	r1, #9
 80092c0:	f240 8082 	bls.w	80093c8 <_strtod_l+0x2a0>
 80092c4:	9419      	str	r4, [sp, #100]	@ 0x64
 80092c6:	f04f 0800 	mov.w	r8, #0
 80092ca:	e0a2      	b.n	8009412 <_strtod_l+0x2ea>
 80092cc:	2300      	movs	r3, #0
 80092ce:	e7c7      	b.n	8009260 <_strtod_l+0x138>
 80092d0:	2f08      	cmp	r7, #8
 80092d2:	bfd5      	itete	le
 80092d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80092d6:	9908      	ldrgt	r1, [sp, #32]
 80092d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80092dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80092e0:	f100 0001 	add.w	r0, r0, #1
 80092e4:	bfd4      	ite	le
 80092e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80092e8:	9308      	strgt	r3, [sp, #32]
 80092ea:	3701      	adds	r7, #1
 80092ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80092ee:	e7bf      	b.n	8009270 <_strtod_l+0x148>
 80092f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80092f6:	785a      	ldrb	r2, [r3, #1]
 80092f8:	b37f      	cbz	r7, 800935a <_strtod_l+0x232>
 80092fa:	4681      	mov	r9, r0
 80092fc:	463d      	mov	r5, r7
 80092fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009302:	2b09      	cmp	r3, #9
 8009304:	d912      	bls.n	800932c <_strtod_l+0x204>
 8009306:	2301      	movs	r3, #1
 8009308:	e7c4      	b.n	8009294 <_strtod_l+0x16c>
 800930a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009310:	785a      	ldrb	r2, [r3, #1]
 8009312:	3001      	adds	r0, #1
 8009314:	2a30      	cmp	r2, #48	@ 0x30
 8009316:	d0f8      	beq.n	800930a <_strtod_l+0x1e2>
 8009318:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800931c:	2b08      	cmp	r3, #8
 800931e:	f200 84d3 	bhi.w	8009cc8 <_strtod_l+0xba0>
 8009322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009324:	930c      	str	r3, [sp, #48]	@ 0x30
 8009326:	4681      	mov	r9, r0
 8009328:	2000      	movs	r0, #0
 800932a:	4605      	mov	r5, r0
 800932c:	3a30      	subs	r2, #48	@ 0x30
 800932e:	f100 0301 	add.w	r3, r0, #1
 8009332:	d02a      	beq.n	800938a <_strtod_l+0x262>
 8009334:	4499      	add	r9, r3
 8009336:	eb00 0c05 	add.w	ip, r0, r5
 800933a:	462b      	mov	r3, r5
 800933c:	210a      	movs	r1, #10
 800933e:	4563      	cmp	r3, ip
 8009340:	d10d      	bne.n	800935e <_strtod_l+0x236>
 8009342:	1c69      	adds	r1, r5, #1
 8009344:	4401      	add	r1, r0
 8009346:	4428      	add	r0, r5
 8009348:	2808      	cmp	r0, #8
 800934a:	dc16      	bgt.n	800937a <_strtod_l+0x252>
 800934c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800934e:	230a      	movs	r3, #10
 8009350:	fb03 2300 	mla	r3, r3, r0, r2
 8009354:	930a      	str	r3, [sp, #40]	@ 0x28
 8009356:	2300      	movs	r3, #0
 8009358:	e018      	b.n	800938c <_strtod_l+0x264>
 800935a:	4638      	mov	r0, r7
 800935c:	e7da      	b.n	8009314 <_strtod_l+0x1ec>
 800935e:	2b08      	cmp	r3, #8
 8009360:	f103 0301 	add.w	r3, r3, #1
 8009364:	dc03      	bgt.n	800936e <_strtod_l+0x246>
 8009366:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009368:	434e      	muls	r6, r1
 800936a:	960a      	str	r6, [sp, #40]	@ 0x28
 800936c:	e7e7      	b.n	800933e <_strtod_l+0x216>
 800936e:	2b10      	cmp	r3, #16
 8009370:	bfde      	ittt	le
 8009372:	9e08      	ldrle	r6, [sp, #32]
 8009374:	434e      	mulle	r6, r1
 8009376:	9608      	strle	r6, [sp, #32]
 8009378:	e7e1      	b.n	800933e <_strtod_l+0x216>
 800937a:	280f      	cmp	r0, #15
 800937c:	dceb      	bgt.n	8009356 <_strtod_l+0x22e>
 800937e:	9808      	ldr	r0, [sp, #32]
 8009380:	230a      	movs	r3, #10
 8009382:	fb03 2300 	mla	r3, r3, r0, r2
 8009386:	9308      	str	r3, [sp, #32]
 8009388:	e7e5      	b.n	8009356 <_strtod_l+0x22e>
 800938a:	4629      	mov	r1, r5
 800938c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800938e:	1c50      	adds	r0, r2, #1
 8009390:	9019      	str	r0, [sp, #100]	@ 0x64
 8009392:	7852      	ldrb	r2, [r2, #1]
 8009394:	4618      	mov	r0, r3
 8009396:	460d      	mov	r5, r1
 8009398:	e7b1      	b.n	80092fe <_strtod_l+0x1d6>
 800939a:	f04f 0900 	mov.w	r9, #0
 800939e:	2301      	movs	r3, #1
 80093a0:	e77d      	b.n	800929e <_strtod_l+0x176>
 80093a2:	f04f 0c00 	mov.w	ip, #0
 80093a6:	1ca2      	adds	r2, r4, #2
 80093a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80093aa:	78a2      	ldrb	r2, [r4, #2]
 80093ac:	e785      	b.n	80092ba <_strtod_l+0x192>
 80093ae:	f04f 0c01 	mov.w	ip, #1
 80093b2:	e7f8      	b.n	80093a6 <_strtod_l+0x27e>
 80093b4:	0800bfb8 	.word	0x0800bfb8
 80093b8:	0800bfa0 	.word	0x0800bfa0
 80093bc:	7ff00000 	.word	0x7ff00000
 80093c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093c2:	1c51      	adds	r1, r2, #1
 80093c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80093c6:	7852      	ldrb	r2, [r2, #1]
 80093c8:	2a30      	cmp	r2, #48	@ 0x30
 80093ca:	d0f9      	beq.n	80093c0 <_strtod_l+0x298>
 80093cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80093d0:	2908      	cmp	r1, #8
 80093d2:	f63f af78 	bhi.w	80092c6 <_strtod_l+0x19e>
 80093d6:	3a30      	subs	r2, #48	@ 0x30
 80093d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80093da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80093de:	f04f 080a 	mov.w	r8, #10
 80093e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093e4:	1c56      	adds	r6, r2, #1
 80093e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80093e8:	7852      	ldrb	r2, [r2, #1]
 80093ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80093ee:	f1be 0f09 	cmp.w	lr, #9
 80093f2:	d939      	bls.n	8009468 <_strtod_l+0x340>
 80093f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093f6:	1a76      	subs	r6, r6, r1
 80093f8:	2e08      	cmp	r6, #8
 80093fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80093fe:	dc03      	bgt.n	8009408 <_strtod_l+0x2e0>
 8009400:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009402:	4588      	cmp	r8, r1
 8009404:	bfa8      	it	ge
 8009406:	4688      	movge	r8, r1
 8009408:	f1bc 0f00 	cmp.w	ip, #0
 800940c:	d001      	beq.n	8009412 <_strtod_l+0x2ea>
 800940e:	f1c8 0800 	rsb	r8, r8, #0
 8009412:	2d00      	cmp	r5, #0
 8009414:	d14e      	bne.n	80094b4 <_strtod_l+0x38c>
 8009416:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009418:	4308      	orrs	r0, r1
 800941a:	f47f aebe 	bne.w	800919a <_strtod_l+0x72>
 800941e:	2b00      	cmp	r3, #0
 8009420:	f47f aed6 	bne.w	80091d0 <_strtod_l+0xa8>
 8009424:	2a69      	cmp	r2, #105	@ 0x69
 8009426:	d028      	beq.n	800947a <_strtod_l+0x352>
 8009428:	dc25      	bgt.n	8009476 <_strtod_l+0x34e>
 800942a:	2a49      	cmp	r2, #73	@ 0x49
 800942c:	d025      	beq.n	800947a <_strtod_l+0x352>
 800942e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009430:	f47f aece 	bne.w	80091d0 <_strtod_l+0xa8>
 8009434:	499b      	ldr	r1, [pc, #620]	@ (80096a4 <_strtod_l+0x57c>)
 8009436:	a819      	add	r0, sp, #100	@ 0x64
 8009438:	f001 fb96 	bl	800ab68 <__match>
 800943c:	2800      	cmp	r0, #0
 800943e:	f43f aec7 	beq.w	80091d0 <_strtod_l+0xa8>
 8009442:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2b28      	cmp	r3, #40	@ 0x28
 8009448:	d12e      	bne.n	80094a8 <_strtod_l+0x380>
 800944a:	4997      	ldr	r1, [pc, #604]	@ (80096a8 <_strtod_l+0x580>)
 800944c:	aa1c      	add	r2, sp, #112	@ 0x70
 800944e:	a819      	add	r0, sp, #100	@ 0x64
 8009450:	f001 fb9e 	bl	800ab90 <__hexnan>
 8009454:	2805      	cmp	r0, #5
 8009456:	d127      	bne.n	80094a8 <_strtod_l+0x380>
 8009458:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800945a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800945e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009462:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009466:	e698      	b.n	800919a <_strtod_l+0x72>
 8009468:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800946a:	fb08 2101 	mla	r1, r8, r1, r2
 800946e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009472:	920e      	str	r2, [sp, #56]	@ 0x38
 8009474:	e7b5      	b.n	80093e2 <_strtod_l+0x2ba>
 8009476:	2a6e      	cmp	r2, #110	@ 0x6e
 8009478:	e7da      	b.n	8009430 <_strtod_l+0x308>
 800947a:	498c      	ldr	r1, [pc, #560]	@ (80096ac <_strtod_l+0x584>)
 800947c:	a819      	add	r0, sp, #100	@ 0x64
 800947e:	f001 fb73 	bl	800ab68 <__match>
 8009482:	2800      	cmp	r0, #0
 8009484:	f43f aea4 	beq.w	80091d0 <_strtod_l+0xa8>
 8009488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800948a:	4989      	ldr	r1, [pc, #548]	@ (80096b0 <_strtod_l+0x588>)
 800948c:	3b01      	subs	r3, #1
 800948e:	a819      	add	r0, sp, #100	@ 0x64
 8009490:	9319      	str	r3, [sp, #100]	@ 0x64
 8009492:	f001 fb69 	bl	800ab68 <__match>
 8009496:	b910      	cbnz	r0, 800949e <_strtod_l+0x376>
 8009498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800949a:	3301      	adds	r3, #1
 800949c:	9319      	str	r3, [sp, #100]	@ 0x64
 800949e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80096c0 <_strtod_l+0x598>
 80094a2:	f04f 0a00 	mov.w	sl, #0
 80094a6:	e678      	b.n	800919a <_strtod_l+0x72>
 80094a8:	4882      	ldr	r0, [pc, #520]	@ (80096b4 <_strtod_l+0x58c>)
 80094aa:	f001 f899 	bl	800a5e0 <nan>
 80094ae:	ec5b ab10 	vmov	sl, fp, d0
 80094b2:	e672      	b.n	800919a <_strtod_l+0x72>
 80094b4:	eba8 0309 	sub.w	r3, r8, r9
 80094b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80094bc:	2f00      	cmp	r7, #0
 80094be:	bf08      	it	eq
 80094c0:	462f      	moveq	r7, r5
 80094c2:	2d10      	cmp	r5, #16
 80094c4:	462c      	mov	r4, r5
 80094c6:	bfa8      	it	ge
 80094c8:	2410      	movge	r4, #16
 80094ca:	f7f7 f843 	bl	8000554 <__aeabi_ui2d>
 80094ce:	2d09      	cmp	r5, #9
 80094d0:	4682      	mov	sl, r0
 80094d2:	468b      	mov	fp, r1
 80094d4:	dc13      	bgt.n	80094fe <_strtod_l+0x3d6>
 80094d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f43f ae5e 	beq.w	800919a <_strtod_l+0x72>
 80094de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e0:	dd78      	ble.n	80095d4 <_strtod_l+0x4ac>
 80094e2:	2b16      	cmp	r3, #22
 80094e4:	dc5f      	bgt.n	80095a6 <_strtod_l+0x47e>
 80094e6:	4974      	ldr	r1, [pc, #464]	@ (80096b8 <_strtod_l+0x590>)
 80094e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f0:	4652      	mov	r2, sl
 80094f2:	465b      	mov	r3, fp
 80094f4:	f7f7 f8a8 	bl	8000648 <__aeabi_dmul>
 80094f8:	4682      	mov	sl, r0
 80094fa:	468b      	mov	fp, r1
 80094fc:	e64d      	b.n	800919a <_strtod_l+0x72>
 80094fe:	4b6e      	ldr	r3, [pc, #440]	@ (80096b8 <_strtod_l+0x590>)
 8009500:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009504:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009508:	f7f7 f89e 	bl	8000648 <__aeabi_dmul>
 800950c:	4682      	mov	sl, r0
 800950e:	9808      	ldr	r0, [sp, #32]
 8009510:	468b      	mov	fp, r1
 8009512:	f7f7 f81f 	bl	8000554 <__aeabi_ui2d>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4650      	mov	r0, sl
 800951c:	4659      	mov	r1, fp
 800951e:	f7f6 fedd 	bl	80002dc <__adddf3>
 8009522:	2d0f      	cmp	r5, #15
 8009524:	4682      	mov	sl, r0
 8009526:	468b      	mov	fp, r1
 8009528:	ddd5      	ble.n	80094d6 <_strtod_l+0x3ae>
 800952a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800952c:	1b2c      	subs	r4, r5, r4
 800952e:	441c      	add	r4, r3
 8009530:	2c00      	cmp	r4, #0
 8009532:	f340 8096 	ble.w	8009662 <_strtod_l+0x53a>
 8009536:	f014 030f 	ands.w	r3, r4, #15
 800953a:	d00a      	beq.n	8009552 <_strtod_l+0x42a>
 800953c:	495e      	ldr	r1, [pc, #376]	@ (80096b8 <_strtod_l+0x590>)
 800953e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009542:	4652      	mov	r2, sl
 8009544:	465b      	mov	r3, fp
 8009546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800954a:	f7f7 f87d 	bl	8000648 <__aeabi_dmul>
 800954e:	4682      	mov	sl, r0
 8009550:	468b      	mov	fp, r1
 8009552:	f034 040f 	bics.w	r4, r4, #15
 8009556:	d073      	beq.n	8009640 <_strtod_l+0x518>
 8009558:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800955c:	dd48      	ble.n	80095f0 <_strtod_l+0x4c8>
 800955e:	2400      	movs	r4, #0
 8009560:	46a0      	mov	r8, r4
 8009562:	940a      	str	r4, [sp, #40]	@ 0x28
 8009564:	46a1      	mov	r9, r4
 8009566:	9a05      	ldr	r2, [sp, #20]
 8009568:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80096c0 <_strtod_l+0x598>
 800956c:	2322      	movs	r3, #34	@ 0x22
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	f04f 0a00 	mov.w	sl, #0
 8009574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009576:	2b00      	cmp	r3, #0
 8009578:	f43f ae0f 	beq.w	800919a <_strtod_l+0x72>
 800957c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800957e:	9805      	ldr	r0, [sp, #20]
 8009580:	f7ff f940 	bl	8008804 <_Bfree>
 8009584:	9805      	ldr	r0, [sp, #20]
 8009586:	4649      	mov	r1, r9
 8009588:	f7ff f93c 	bl	8008804 <_Bfree>
 800958c:	9805      	ldr	r0, [sp, #20]
 800958e:	4641      	mov	r1, r8
 8009590:	f7ff f938 	bl	8008804 <_Bfree>
 8009594:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009596:	9805      	ldr	r0, [sp, #20]
 8009598:	f7ff f934 	bl	8008804 <_Bfree>
 800959c:	9805      	ldr	r0, [sp, #20]
 800959e:	4621      	mov	r1, r4
 80095a0:	f7ff f930 	bl	8008804 <_Bfree>
 80095a4:	e5f9      	b.n	800919a <_strtod_l+0x72>
 80095a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80095ac:	4293      	cmp	r3, r2
 80095ae:	dbbc      	blt.n	800952a <_strtod_l+0x402>
 80095b0:	4c41      	ldr	r4, [pc, #260]	@ (80096b8 <_strtod_l+0x590>)
 80095b2:	f1c5 050f 	rsb	r5, r5, #15
 80095b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095ba:	4652      	mov	r2, sl
 80095bc:	465b      	mov	r3, fp
 80095be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095c2:	f7f7 f841 	bl	8000648 <__aeabi_dmul>
 80095c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c8:	1b5d      	subs	r5, r3, r5
 80095ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095d2:	e78f      	b.n	80094f4 <_strtod_l+0x3cc>
 80095d4:	3316      	adds	r3, #22
 80095d6:	dba8      	blt.n	800952a <_strtod_l+0x402>
 80095d8:	4b37      	ldr	r3, [pc, #220]	@ (80096b8 <_strtod_l+0x590>)
 80095da:	eba9 0808 	sub.w	r8, r9, r8
 80095de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80095e6:	4650      	mov	r0, sl
 80095e8:	4659      	mov	r1, fp
 80095ea:	f7f7 f957 	bl	800089c <__aeabi_ddiv>
 80095ee:	e783      	b.n	80094f8 <_strtod_l+0x3d0>
 80095f0:	4b32      	ldr	r3, [pc, #200]	@ (80096bc <_strtod_l+0x594>)
 80095f2:	9308      	str	r3, [sp, #32]
 80095f4:	2300      	movs	r3, #0
 80095f6:	1124      	asrs	r4, r4, #4
 80095f8:	4650      	mov	r0, sl
 80095fa:	4659      	mov	r1, fp
 80095fc:	461e      	mov	r6, r3
 80095fe:	2c01      	cmp	r4, #1
 8009600:	dc21      	bgt.n	8009646 <_strtod_l+0x51e>
 8009602:	b10b      	cbz	r3, 8009608 <_strtod_l+0x4e0>
 8009604:	4682      	mov	sl, r0
 8009606:	468b      	mov	fp, r1
 8009608:	492c      	ldr	r1, [pc, #176]	@ (80096bc <_strtod_l+0x594>)
 800960a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800960e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009612:	4652      	mov	r2, sl
 8009614:	465b      	mov	r3, fp
 8009616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800961a:	f7f7 f815 	bl	8000648 <__aeabi_dmul>
 800961e:	4b28      	ldr	r3, [pc, #160]	@ (80096c0 <_strtod_l+0x598>)
 8009620:	460a      	mov	r2, r1
 8009622:	400b      	ands	r3, r1
 8009624:	4927      	ldr	r1, [pc, #156]	@ (80096c4 <_strtod_l+0x59c>)
 8009626:	428b      	cmp	r3, r1
 8009628:	4682      	mov	sl, r0
 800962a:	d898      	bhi.n	800955e <_strtod_l+0x436>
 800962c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009630:	428b      	cmp	r3, r1
 8009632:	bf86      	itte	hi
 8009634:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80096c8 <_strtod_l+0x5a0>
 8009638:	f04f 3aff 	movhi.w	sl, #4294967295
 800963c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009640:	2300      	movs	r3, #0
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	e07a      	b.n	800973c <_strtod_l+0x614>
 8009646:	07e2      	lsls	r2, r4, #31
 8009648:	d505      	bpl.n	8009656 <_strtod_l+0x52e>
 800964a:	9b08      	ldr	r3, [sp, #32]
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f7f6 fffa 	bl	8000648 <__aeabi_dmul>
 8009654:	2301      	movs	r3, #1
 8009656:	9a08      	ldr	r2, [sp, #32]
 8009658:	3208      	adds	r2, #8
 800965a:	3601      	adds	r6, #1
 800965c:	1064      	asrs	r4, r4, #1
 800965e:	9208      	str	r2, [sp, #32]
 8009660:	e7cd      	b.n	80095fe <_strtod_l+0x4d6>
 8009662:	d0ed      	beq.n	8009640 <_strtod_l+0x518>
 8009664:	4264      	negs	r4, r4
 8009666:	f014 020f 	ands.w	r2, r4, #15
 800966a:	d00a      	beq.n	8009682 <_strtod_l+0x55a>
 800966c:	4b12      	ldr	r3, [pc, #72]	@ (80096b8 <_strtod_l+0x590>)
 800966e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009672:	4650      	mov	r0, sl
 8009674:	4659      	mov	r1, fp
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f7f7 f90f 	bl	800089c <__aeabi_ddiv>
 800967e:	4682      	mov	sl, r0
 8009680:	468b      	mov	fp, r1
 8009682:	1124      	asrs	r4, r4, #4
 8009684:	d0dc      	beq.n	8009640 <_strtod_l+0x518>
 8009686:	2c1f      	cmp	r4, #31
 8009688:	dd20      	ble.n	80096cc <_strtod_l+0x5a4>
 800968a:	2400      	movs	r4, #0
 800968c:	46a0      	mov	r8, r4
 800968e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009690:	46a1      	mov	r9, r4
 8009692:	9a05      	ldr	r2, [sp, #20]
 8009694:	2322      	movs	r3, #34	@ 0x22
 8009696:	f04f 0a00 	mov.w	sl, #0
 800969a:	f04f 0b00 	mov.w	fp, #0
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	e768      	b.n	8009574 <_strtod_l+0x44c>
 80096a2:	bf00      	nop
 80096a4:	0800bd8d 	.word	0x0800bd8d
 80096a8:	0800bfa4 	.word	0x0800bfa4
 80096ac:	0800bd85 	.word	0x0800bd85
 80096b0:	0800bdbc 	.word	0x0800bdbc
 80096b4:	0800c14d 	.word	0x0800c14d
 80096b8:	0800bed8 	.word	0x0800bed8
 80096bc:	0800beb0 	.word	0x0800beb0
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	7ca00000 	.word	0x7ca00000
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	f014 0310 	ands.w	r3, r4, #16
 80096d0:	bf18      	it	ne
 80096d2:	236a      	movne	r3, #106	@ 0x6a
 80096d4:	4ea9      	ldr	r6, [pc, #676]	@ (800997c <_strtod_l+0x854>)
 80096d6:	9308      	str	r3, [sp, #32]
 80096d8:	4650      	mov	r0, sl
 80096da:	4659      	mov	r1, fp
 80096dc:	2300      	movs	r3, #0
 80096de:	07e2      	lsls	r2, r4, #31
 80096e0:	d504      	bpl.n	80096ec <_strtod_l+0x5c4>
 80096e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096e6:	f7f6 ffaf 	bl	8000648 <__aeabi_dmul>
 80096ea:	2301      	movs	r3, #1
 80096ec:	1064      	asrs	r4, r4, #1
 80096ee:	f106 0608 	add.w	r6, r6, #8
 80096f2:	d1f4      	bne.n	80096de <_strtod_l+0x5b6>
 80096f4:	b10b      	cbz	r3, 80096fa <_strtod_l+0x5d2>
 80096f6:	4682      	mov	sl, r0
 80096f8:	468b      	mov	fp, r1
 80096fa:	9b08      	ldr	r3, [sp, #32]
 80096fc:	b1b3      	cbz	r3, 800972c <_strtod_l+0x604>
 80096fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009702:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009706:	2b00      	cmp	r3, #0
 8009708:	4659      	mov	r1, fp
 800970a:	dd0f      	ble.n	800972c <_strtod_l+0x604>
 800970c:	2b1f      	cmp	r3, #31
 800970e:	dd55      	ble.n	80097bc <_strtod_l+0x694>
 8009710:	2b34      	cmp	r3, #52	@ 0x34
 8009712:	bfde      	ittt	le
 8009714:	f04f 33ff 	movle.w	r3, #4294967295
 8009718:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800971c:	4093      	lslle	r3, r2
 800971e:	f04f 0a00 	mov.w	sl, #0
 8009722:	bfcc      	ite	gt
 8009724:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009728:	ea03 0b01 	andle.w	fp, r3, r1
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	4650      	mov	r0, sl
 8009732:	4659      	mov	r1, fp
 8009734:	f7f7 f9f0 	bl	8000b18 <__aeabi_dcmpeq>
 8009738:	2800      	cmp	r0, #0
 800973a:	d1a6      	bne.n	800968a <_strtod_l+0x562>
 800973c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009742:	9805      	ldr	r0, [sp, #20]
 8009744:	462b      	mov	r3, r5
 8009746:	463a      	mov	r2, r7
 8009748:	f7ff f8c4 	bl	80088d4 <__s2b>
 800974c:	900a      	str	r0, [sp, #40]	@ 0x28
 800974e:	2800      	cmp	r0, #0
 8009750:	f43f af05 	beq.w	800955e <_strtod_l+0x436>
 8009754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009756:	2a00      	cmp	r2, #0
 8009758:	eba9 0308 	sub.w	r3, r9, r8
 800975c:	bfa8      	it	ge
 800975e:	2300      	movge	r3, #0
 8009760:	9312      	str	r3, [sp, #72]	@ 0x48
 8009762:	2400      	movs	r4, #0
 8009764:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009768:	9316      	str	r3, [sp, #88]	@ 0x58
 800976a:	46a0      	mov	r8, r4
 800976c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800976e:	9805      	ldr	r0, [sp, #20]
 8009770:	6859      	ldr	r1, [r3, #4]
 8009772:	f7ff f807 	bl	8008784 <_Balloc>
 8009776:	4681      	mov	r9, r0
 8009778:	2800      	cmp	r0, #0
 800977a:	f43f aef4 	beq.w	8009566 <_strtod_l+0x43e>
 800977e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	3202      	adds	r2, #2
 8009784:	f103 010c 	add.w	r1, r3, #12
 8009788:	0092      	lsls	r2, r2, #2
 800978a:	300c      	adds	r0, #12
 800978c:	f7fe f94f 	bl	8007a2e <memcpy>
 8009790:	ec4b ab10 	vmov	d0, sl, fp
 8009794:	9805      	ldr	r0, [sp, #20]
 8009796:	aa1c      	add	r2, sp, #112	@ 0x70
 8009798:	a91b      	add	r1, sp, #108	@ 0x6c
 800979a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800979e:	f7ff fbd5 	bl	8008f4c <__d2b>
 80097a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80097a4:	2800      	cmp	r0, #0
 80097a6:	f43f aede 	beq.w	8009566 <_strtod_l+0x43e>
 80097aa:	9805      	ldr	r0, [sp, #20]
 80097ac:	2101      	movs	r1, #1
 80097ae:	f7ff f927 	bl	8008a00 <__i2b>
 80097b2:	4680      	mov	r8, r0
 80097b4:	b948      	cbnz	r0, 80097ca <_strtod_l+0x6a2>
 80097b6:	f04f 0800 	mov.w	r8, #0
 80097ba:	e6d4      	b.n	8009566 <_strtod_l+0x43e>
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295
 80097c0:	fa02 f303 	lsl.w	r3, r2, r3
 80097c4:	ea03 0a0a 	and.w	sl, r3, sl
 80097c8:	e7b0      	b.n	800972c <_strtod_l+0x604>
 80097ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80097cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80097ce:	2d00      	cmp	r5, #0
 80097d0:	bfab      	itete	ge
 80097d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80097d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80097d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80097d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80097da:	bfac      	ite	ge
 80097dc:	18ef      	addge	r7, r5, r3
 80097de:	1b5e      	sublt	r6, r3, r5
 80097e0:	9b08      	ldr	r3, [sp, #32]
 80097e2:	1aed      	subs	r5, r5, r3
 80097e4:	4415      	add	r5, r2
 80097e6:	4b66      	ldr	r3, [pc, #408]	@ (8009980 <_strtod_l+0x858>)
 80097e8:	3d01      	subs	r5, #1
 80097ea:	429d      	cmp	r5, r3
 80097ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80097f0:	da50      	bge.n	8009894 <_strtod_l+0x76c>
 80097f2:	1b5b      	subs	r3, r3, r5
 80097f4:	2b1f      	cmp	r3, #31
 80097f6:	eba2 0203 	sub.w	r2, r2, r3
 80097fa:	f04f 0101 	mov.w	r1, #1
 80097fe:	dc3d      	bgt.n	800987c <_strtod_l+0x754>
 8009800:	fa01 f303 	lsl.w	r3, r1, r3
 8009804:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009806:	2300      	movs	r3, #0
 8009808:	9310      	str	r3, [sp, #64]	@ 0x40
 800980a:	18bd      	adds	r5, r7, r2
 800980c:	9b08      	ldr	r3, [sp, #32]
 800980e:	42af      	cmp	r7, r5
 8009810:	4416      	add	r6, r2
 8009812:	441e      	add	r6, r3
 8009814:	463b      	mov	r3, r7
 8009816:	bfa8      	it	ge
 8009818:	462b      	movge	r3, r5
 800981a:	42b3      	cmp	r3, r6
 800981c:	bfa8      	it	ge
 800981e:	4633      	movge	r3, r6
 8009820:	2b00      	cmp	r3, #0
 8009822:	bfc2      	ittt	gt
 8009824:	1aed      	subgt	r5, r5, r3
 8009826:	1af6      	subgt	r6, r6, r3
 8009828:	1aff      	subgt	r7, r7, r3
 800982a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800982c:	2b00      	cmp	r3, #0
 800982e:	dd16      	ble.n	800985e <_strtod_l+0x736>
 8009830:	4641      	mov	r1, r8
 8009832:	9805      	ldr	r0, [sp, #20]
 8009834:	461a      	mov	r2, r3
 8009836:	f7ff f9a3 	bl	8008b80 <__pow5mult>
 800983a:	4680      	mov	r8, r0
 800983c:	2800      	cmp	r0, #0
 800983e:	d0ba      	beq.n	80097b6 <_strtod_l+0x68e>
 8009840:	4601      	mov	r1, r0
 8009842:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009844:	9805      	ldr	r0, [sp, #20]
 8009846:	f7ff f8f1 	bl	8008a2c <__multiply>
 800984a:	900e      	str	r0, [sp, #56]	@ 0x38
 800984c:	2800      	cmp	r0, #0
 800984e:	f43f ae8a 	beq.w	8009566 <_strtod_l+0x43e>
 8009852:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009854:	9805      	ldr	r0, [sp, #20]
 8009856:	f7fe ffd5 	bl	8008804 <_Bfree>
 800985a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800985c:	931a      	str	r3, [sp, #104]	@ 0x68
 800985e:	2d00      	cmp	r5, #0
 8009860:	dc1d      	bgt.n	800989e <_strtod_l+0x776>
 8009862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	dd23      	ble.n	80098b0 <_strtod_l+0x788>
 8009868:	4649      	mov	r1, r9
 800986a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800986c:	9805      	ldr	r0, [sp, #20]
 800986e:	f7ff f987 	bl	8008b80 <__pow5mult>
 8009872:	4681      	mov	r9, r0
 8009874:	b9e0      	cbnz	r0, 80098b0 <_strtod_l+0x788>
 8009876:	f04f 0900 	mov.w	r9, #0
 800987a:	e674      	b.n	8009566 <_strtod_l+0x43e>
 800987c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009880:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009884:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009888:	35e2      	adds	r5, #226	@ 0xe2
 800988a:	fa01 f305 	lsl.w	r3, r1, r5
 800988e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009890:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009892:	e7ba      	b.n	800980a <_strtod_l+0x6e2>
 8009894:	2300      	movs	r3, #0
 8009896:	9310      	str	r3, [sp, #64]	@ 0x40
 8009898:	2301      	movs	r3, #1
 800989a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800989c:	e7b5      	b.n	800980a <_strtod_l+0x6e2>
 800989e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098a0:	9805      	ldr	r0, [sp, #20]
 80098a2:	462a      	mov	r2, r5
 80098a4:	f7ff f9c6 	bl	8008c34 <__lshift>
 80098a8:	901a      	str	r0, [sp, #104]	@ 0x68
 80098aa:	2800      	cmp	r0, #0
 80098ac:	d1d9      	bne.n	8009862 <_strtod_l+0x73a>
 80098ae:	e65a      	b.n	8009566 <_strtod_l+0x43e>
 80098b0:	2e00      	cmp	r6, #0
 80098b2:	dd07      	ble.n	80098c4 <_strtod_l+0x79c>
 80098b4:	4649      	mov	r1, r9
 80098b6:	9805      	ldr	r0, [sp, #20]
 80098b8:	4632      	mov	r2, r6
 80098ba:	f7ff f9bb 	bl	8008c34 <__lshift>
 80098be:	4681      	mov	r9, r0
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d0d8      	beq.n	8009876 <_strtod_l+0x74e>
 80098c4:	2f00      	cmp	r7, #0
 80098c6:	dd08      	ble.n	80098da <_strtod_l+0x7b2>
 80098c8:	4641      	mov	r1, r8
 80098ca:	9805      	ldr	r0, [sp, #20]
 80098cc:	463a      	mov	r2, r7
 80098ce:	f7ff f9b1 	bl	8008c34 <__lshift>
 80098d2:	4680      	mov	r8, r0
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f43f ae46 	beq.w	8009566 <_strtod_l+0x43e>
 80098da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098dc:	9805      	ldr	r0, [sp, #20]
 80098de:	464a      	mov	r2, r9
 80098e0:	f7ff fa30 	bl	8008d44 <__mdiff>
 80098e4:	4604      	mov	r4, r0
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f43f ae3d 	beq.w	8009566 <_strtod_l+0x43e>
 80098ec:	68c3      	ldr	r3, [r0, #12]
 80098ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098f0:	2300      	movs	r3, #0
 80098f2:	60c3      	str	r3, [r0, #12]
 80098f4:	4641      	mov	r1, r8
 80098f6:	f7ff fa09 	bl	8008d0c <__mcmp>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	da46      	bge.n	800998c <_strtod_l+0x864>
 80098fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009900:	ea53 030a 	orrs.w	r3, r3, sl
 8009904:	d16c      	bne.n	80099e0 <_strtod_l+0x8b8>
 8009906:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800990a:	2b00      	cmp	r3, #0
 800990c:	d168      	bne.n	80099e0 <_strtod_l+0x8b8>
 800990e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009912:	0d1b      	lsrs	r3, r3, #20
 8009914:	051b      	lsls	r3, r3, #20
 8009916:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800991a:	d961      	bls.n	80099e0 <_strtod_l+0x8b8>
 800991c:	6963      	ldr	r3, [r4, #20]
 800991e:	b913      	cbnz	r3, 8009926 <_strtod_l+0x7fe>
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	2b01      	cmp	r3, #1
 8009924:	dd5c      	ble.n	80099e0 <_strtod_l+0x8b8>
 8009926:	4621      	mov	r1, r4
 8009928:	2201      	movs	r2, #1
 800992a:	9805      	ldr	r0, [sp, #20]
 800992c:	f7ff f982 	bl	8008c34 <__lshift>
 8009930:	4641      	mov	r1, r8
 8009932:	4604      	mov	r4, r0
 8009934:	f7ff f9ea 	bl	8008d0c <__mcmp>
 8009938:	2800      	cmp	r0, #0
 800993a:	dd51      	ble.n	80099e0 <_strtod_l+0x8b8>
 800993c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009940:	9a08      	ldr	r2, [sp, #32]
 8009942:	0d1b      	lsrs	r3, r3, #20
 8009944:	051b      	lsls	r3, r3, #20
 8009946:	2a00      	cmp	r2, #0
 8009948:	d06b      	beq.n	8009a22 <_strtod_l+0x8fa>
 800994a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800994e:	d868      	bhi.n	8009a22 <_strtod_l+0x8fa>
 8009950:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009954:	f67f ae9d 	bls.w	8009692 <_strtod_l+0x56a>
 8009958:	4b0a      	ldr	r3, [pc, #40]	@ (8009984 <_strtod_l+0x85c>)
 800995a:	4650      	mov	r0, sl
 800995c:	4659      	mov	r1, fp
 800995e:	2200      	movs	r2, #0
 8009960:	f7f6 fe72 	bl	8000648 <__aeabi_dmul>
 8009964:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <_strtod_l+0x860>)
 8009966:	400b      	ands	r3, r1
 8009968:	4682      	mov	sl, r0
 800996a:	468b      	mov	fp, r1
 800996c:	2b00      	cmp	r3, #0
 800996e:	f47f ae05 	bne.w	800957c <_strtod_l+0x454>
 8009972:	9a05      	ldr	r2, [sp, #20]
 8009974:	2322      	movs	r3, #34	@ 0x22
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	e600      	b.n	800957c <_strtod_l+0x454>
 800997a:	bf00      	nop
 800997c:	0800bfd0 	.word	0x0800bfd0
 8009980:	fffffc02 	.word	0xfffffc02
 8009984:	39500000 	.word	0x39500000
 8009988:	7ff00000 	.word	0x7ff00000
 800998c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009990:	d165      	bne.n	8009a5e <_strtod_l+0x936>
 8009992:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009998:	b35a      	cbz	r2, 80099f2 <_strtod_l+0x8ca>
 800999a:	4a9f      	ldr	r2, [pc, #636]	@ (8009c18 <_strtod_l+0xaf0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d12b      	bne.n	80099f8 <_strtod_l+0x8d0>
 80099a0:	9b08      	ldr	r3, [sp, #32]
 80099a2:	4651      	mov	r1, sl
 80099a4:	b303      	cbz	r3, 80099e8 <_strtod_l+0x8c0>
 80099a6:	4b9d      	ldr	r3, [pc, #628]	@ (8009c1c <_strtod_l+0xaf4>)
 80099a8:	465a      	mov	r2, fp
 80099aa:	4013      	ands	r3, r2
 80099ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099b0:	f04f 32ff 	mov.w	r2, #4294967295
 80099b4:	d81b      	bhi.n	80099ee <_strtod_l+0x8c6>
 80099b6:	0d1b      	lsrs	r3, r3, #20
 80099b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	4299      	cmp	r1, r3
 80099c2:	d119      	bne.n	80099f8 <_strtod_l+0x8d0>
 80099c4:	4b96      	ldr	r3, [pc, #600]	@ (8009c20 <_strtod_l+0xaf8>)
 80099c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d102      	bne.n	80099d2 <_strtod_l+0x8aa>
 80099cc:	3101      	adds	r1, #1
 80099ce:	f43f adca 	beq.w	8009566 <_strtod_l+0x43e>
 80099d2:	4b92      	ldr	r3, [pc, #584]	@ (8009c1c <_strtod_l+0xaf4>)
 80099d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099d6:	401a      	ands	r2, r3
 80099d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80099dc:	f04f 0a00 	mov.w	sl, #0
 80099e0:	9b08      	ldr	r3, [sp, #32]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1b8      	bne.n	8009958 <_strtod_l+0x830>
 80099e6:	e5c9      	b.n	800957c <_strtod_l+0x454>
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	e7e8      	b.n	80099c0 <_strtod_l+0x898>
 80099ee:	4613      	mov	r3, r2
 80099f0:	e7e6      	b.n	80099c0 <_strtod_l+0x898>
 80099f2:	ea53 030a 	orrs.w	r3, r3, sl
 80099f6:	d0a1      	beq.n	800993c <_strtod_l+0x814>
 80099f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099fa:	b1db      	cbz	r3, 8009a34 <_strtod_l+0x90c>
 80099fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099fe:	4213      	tst	r3, r2
 8009a00:	d0ee      	beq.n	80099e0 <_strtod_l+0x8b8>
 8009a02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a04:	9a08      	ldr	r2, [sp, #32]
 8009a06:	4650      	mov	r0, sl
 8009a08:	4659      	mov	r1, fp
 8009a0a:	b1bb      	cbz	r3, 8009a3c <_strtod_l+0x914>
 8009a0c:	f7ff fb6c 	bl	80090e8 <sulp>
 8009a10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a14:	ec53 2b10 	vmov	r2, r3, d0
 8009a18:	f7f6 fc60 	bl	80002dc <__adddf3>
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	468b      	mov	fp, r1
 8009a20:	e7de      	b.n	80099e0 <_strtod_l+0x8b8>
 8009a22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a2e:	f04f 3aff 	mov.w	sl, #4294967295
 8009a32:	e7d5      	b.n	80099e0 <_strtod_l+0x8b8>
 8009a34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a36:	ea13 0f0a 	tst.w	r3, sl
 8009a3a:	e7e1      	b.n	8009a00 <_strtod_l+0x8d8>
 8009a3c:	f7ff fb54 	bl	80090e8 <sulp>
 8009a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a44:	ec53 2b10 	vmov	r2, r3, d0
 8009a48:	f7f6 fc46 	bl	80002d8 <__aeabi_dsub>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4682      	mov	sl, r0
 8009a52:	468b      	mov	fp, r1
 8009a54:	f7f7 f860 	bl	8000b18 <__aeabi_dcmpeq>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d0c1      	beq.n	80099e0 <_strtod_l+0x8b8>
 8009a5c:	e619      	b.n	8009692 <_strtod_l+0x56a>
 8009a5e:	4641      	mov	r1, r8
 8009a60:	4620      	mov	r0, r4
 8009a62:	f7ff facb 	bl	8008ffc <__ratio>
 8009a66:	ec57 6b10 	vmov	r6, r7, d0
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	f7f7 f864 	bl	8000b40 <__aeabi_dcmple>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d06f      	beq.n	8009b5c <_strtod_l+0xa34>
 8009a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d17a      	bne.n	8009b78 <_strtod_l+0xa50>
 8009a82:	f1ba 0f00 	cmp.w	sl, #0
 8009a86:	d158      	bne.n	8009b3a <_strtod_l+0xa12>
 8009a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d15a      	bne.n	8009b48 <_strtod_l+0xa20>
 8009a92:	4b64      	ldr	r3, [pc, #400]	@ (8009c24 <_strtod_l+0xafc>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	f7f7 f847 	bl	8000b2c <__aeabi_dcmplt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d159      	bne.n	8009b56 <_strtod_l+0xa2e>
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	4b60      	ldr	r3, [pc, #384]	@ (8009c28 <_strtod_l+0xb00>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f7f6 fdcd 	bl	8000648 <__aeabi_dmul>
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ab6:	9606      	str	r6, [sp, #24]
 8009ab8:	9307      	str	r3, [sp, #28]
 8009aba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009abe:	4d57      	ldr	r5, [pc, #348]	@ (8009c1c <_strtod_l+0xaf4>)
 8009ac0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ac6:	401d      	ands	r5, r3
 8009ac8:	4b58      	ldr	r3, [pc, #352]	@ (8009c2c <_strtod_l+0xb04>)
 8009aca:	429d      	cmp	r5, r3
 8009acc:	f040 80b2 	bne.w	8009c34 <_strtod_l+0xb0c>
 8009ad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ad2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009ad6:	ec4b ab10 	vmov	d0, sl, fp
 8009ada:	f7ff f9c7 	bl	8008e6c <__ulp>
 8009ade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ae2:	ec51 0b10 	vmov	r0, r1, d0
 8009ae6:	f7f6 fdaf 	bl	8000648 <__aeabi_dmul>
 8009aea:	4652      	mov	r2, sl
 8009aec:	465b      	mov	r3, fp
 8009aee:	f7f6 fbf5 	bl	80002dc <__adddf3>
 8009af2:	460b      	mov	r3, r1
 8009af4:	4949      	ldr	r1, [pc, #292]	@ (8009c1c <_strtod_l+0xaf4>)
 8009af6:	4a4e      	ldr	r2, [pc, #312]	@ (8009c30 <_strtod_l+0xb08>)
 8009af8:	4019      	ands	r1, r3
 8009afa:	4291      	cmp	r1, r2
 8009afc:	4682      	mov	sl, r0
 8009afe:	d942      	bls.n	8009b86 <_strtod_l+0xa5e>
 8009b00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b02:	4b47      	ldr	r3, [pc, #284]	@ (8009c20 <_strtod_l+0xaf8>)
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d103      	bne.n	8009b10 <_strtod_l+0x9e8>
 8009b08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f43f ad2b 	beq.w	8009566 <_strtod_l+0x43e>
 8009b10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009c20 <_strtod_l+0xaf8>
 8009b14:	f04f 3aff 	mov.w	sl, #4294967295
 8009b18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b1a:	9805      	ldr	r0, [sp, #20]
 8009b1c:	f7fe fe72 	bl	8008804 <_Bfree>
 8009b20:	9805      	ldr	r0, [sp, #20]
 8009b22:	4649      	mov	r1, r9
 8009b24:	f7fe fe6e 	bl	8008804 <_Bfree>
 8009b28:	9805      	ldr	r0, [sp, #20]
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	f7fe fe6a 	bl	8008804 <_Bfree>
 8009b30:	9805      	ldr	r0, [sp, #20]
 8009b32:	4621      	mov	r1, r4
 8009b34:	f7fe fe66 	bl	8008804 <_Bfree>
 8009b38:	e618      	b.n	800976c <_strtod_l+0x644>
 8009b3a:	f1ba 0f01 	cmp.w	sl, #1
 8009b3e:	d103      	bne.n	8009b48 <_strtod_l+0xa20>
 8009b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f43f ada5 	beq.w	8009692 <_strtod_l+0x56a>
 8009b48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009bf8 <_strtod_l+0xad0>
 8009b4c:	4f35      	ldr	r7, [pc, #212]	@ (8009c24 <_strtod_l+0xafc>)
 8009b4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b52:	2600      	movs	r6, #0
 8009b54:	e7b1      	b.n	8009aba <_strtod_l+0x992>
 8009b56:	4f34      	ldr	r7, [pc, #208]	@ (8009c28 <_strtod_l+0xb00>)
 8009b58:	2600      	movs	r6, #0
 8009b5a:	e7aa      	b.n	8009ab2 <_strtod_l+0x98a>
 8009b5c:	4b32      	ldr	r3, [pc, #200]	@ (8009c28 <_strtod_l+0xb00>)
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	2200      	movs	r2, #0
 8009b64:	f7f6 fd70 	bl	8000648 <__aeabi_dmul>
 8009b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d09f      	beq.n	8009ab2 <_strtod_l+0x98a>
 8009b72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b76:	e7a0      	b.n	8009aba <_strtod_l+0x992>
 8009b78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c00 <_strtod_l+0xad8>
 8009b7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b80:	ec57 6b17 	vmov	r6, r7, d7
 8009b84:	e799      	b.n	8009aba <_strtod_l+0x992>
 8009b86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b8a:	9b08      	ldr	r3, [sp, #32]
 8009b8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1c1      	bne.n	8009b18 <_strtod_l+0x9f0>
 8009b94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b98:	0d1b      	lsrs	r3, r3, #20
 8009b9a:	051b      	lsls	r3, r3, #20
 8009b9c:	429d      	cmp	r5, r3
 8009b9e:	d1bb      	bne.n	8009b18 <_strtod_l+0x9f0>
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f7 f8b0 	bl	8000d08 <__aeabi_d2lz>
 8009ba8:	f7f6 fd20 	bl	80005ec <__aeabi_l2d>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fb90 	bl	80002d8 <__aeabi_dsub>
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4602      	mov	r2, r0
 8009bbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009bc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bc6:	ea46 060a 	orr.w	r6, r6, sl
 8009bca:	431e      	orrs	r6, r3
 8009bcc:	d06f      	beq.n	8009cae <_strtod_l+0xb86>
 8009bce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c08 <_strtod_l+0xae0>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 ffaa 	bl	8000b2c <__aeabi_dcmplt>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	f47f accf 	bne.w	800957c <_strtod_l+0x454>
 8009bde:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c10 <_strtod_l+0xae8>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009be8:	f7f6 ffbe 	bl	8000b68 <__aeabi_dcmpgt>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d093      	beq.n	8009b18 <_strtod_l+0x9f0>
 8009bf0:	e4c4      	b.n	800957c <_strtod_l+0x454>
 8009bf2:	bf00      	nop
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	00000000 	.word	0x00000000
 8009bfc:	bff00000 	.word	0xbff00000
 8009c00:	00000000 	.word	0x00000000
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	94a03595 	.word	0x94a03595
 8009c0c:	3fdfffff 	.word	0x3fdfffff
 8009c10:	35afe535 	.word	0x35afe535
 8009c14:	3fe00000 	.word	0x3fe00000
 8009c18:	000fffff 	.word	0x000fffff
 8009c1c:	7ff00000 	.word	0x7ff00000
 8009c20:	7fefffff 	.word	0x7fefffff
 8009c24:	3ff00000 	.word	0x3ff00000
 8009c28:	3fe00000 	.word	0x3fe00000
 8009c2c:	7fe00000 	.word	0x7fe00000
 8009c30:	7c9fffff 	.word	0x7c9fffff
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	b323      	cbz	r3, 8009c82 <_strtod_l+0xb5a>
 8009c38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c3c:	d821      	bhi.n	8009c82 <_strtod_l+0xb5a>
 8009c3e:	a328      	add	r3, pc, #160	@ (adr r3, 8009ce0 <_strtod_l+0xbb8>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 ff7a 	bl	8000b40 <__aeabi_dcmple>
 8009c4c:	b1a0      	cbz	r0, 8009c78 <_strtod_l+0xb50>
 8009c4e:	4639      	mov	r1, r7
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7f6 ffd1 	bl	8000bf8 <__aeabi_d2uiz>
 8009c56:	2801      	cmp	r0, #1
 8009c58:	bf38      	it	cc
 8009c5a:	2001      	movcc	r0, #1
 8009c5c:	f7f6 fc7a 	bl	8000554 <__aeabi_ui2d>
 8009c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	b9fb      	cbnz	r3, 8009ca8 <_strtod_l+0xb80>
 8009c68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c7e:	1b5b      	subs	r3, r3, r5
 8009c80:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c8a:	f7ff f8ef 	bl	8008e6c <__ulp>
 8009c8e:	4650      	mov	r0, sl
 8009c90:	ec53 2b10 	vmov	r2, r3, d0
 8009c94:	4659      	mov	r1, fp
 8009c96:	f7f6 fcd7 	bl	8000648 <__aeabi_dmul>
 8009c9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c9e:	f7f6 fb1d 	bl	80002dc <__adddf3>
 8009ca2:	4682      	mov	sl, r0
 8009ca4:	468b      	mov	fp, r1
 8009ca6:	e770      	b.n	8009b8a <_strtod_l+0xa62>
 8009ca8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009cac:	e7e0      	b.n	8009c70 <_strtod_l+0xb48>
 8009cae:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ce8 <_strtod_l+0xbc0>)
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f7f6 ff3a 	bl	8000b2c <__aeabi_dcmplt>
 8009cb8:	e798      	b.n	8009bec <_strtod_l+0xac4>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009cc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	f7ff ba6d 	b.w	80091a2 <_strtod_l+0x7a>
 8009cc8:	2a65      	cmp	r2, #101	@ 0x65
 8009cca:	f43f ab66 	beq.w	800939a <_strtod_l+0x272>
 8009cce:	2a45      	cmp	r2, #69	@ 0x45
 8009cd0:	f43f ab63 	beq.w	800939a <_strtod_l+0x272>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f7ff bb9e 	b.w	8009416 <_strtod_l+0x2ee>
 8009cda:	bf00      	nop
 8009cdc:	f3af 8000 	nop.w
 8009ce0:	ffc00000 	.word	0xffc00000
 8009ce4:	41dfffff 	.word	0x41dfffff
 8009ce8:	94a03595 	.word	0x94a03595
 8009cec:	3fcfffff 	.word	0x3fcfffff

08009cf0 <_strtod_r>:
 8009cf0:	4b01      	ldr	r3, [pc, #4]	@ (8009cf8 <_strtod_r+0x8>)
 8009cf2:	f7ff ba19 	b.w	8009128 <_strtod_l>
 8009cf6:	bf00      	nop
 8009cf8:	20000070 	.word	0x20000070

08009cfc <_strtol_l.constprop.0>:
 8009cfc:	2b24      	cmp	r3, #36	@ 0x24
 8009cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d02:	4686      	mov	lr, r0
 8009d04:	4690      	mov	r8, r2
 8009d06:	d801      	bhi.n	8009d0c <_strtol_l.constprop.0+0x10>
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d106      	bne.n	8009d1a <_strtol_l.constprop.0+0x1e>
 8009d0c:	f7fd fe62 	bl	80079d4 <__errno>
 8009d10:	2316      	movs	r3, #22
 8009d12:	6003      	str	r3, [r0, #0]
 8009d14:	2000      	movs	r0, #0
 8009d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1a:	4834      	ldr	r0, [pc, #208]	@ (8009dec <_strtol_l.constprop.0+0xf0>)
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	462a      	mov	r2, r5
 8009d20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d24:	5d06      	ldrb	r6, [r0, r4]
 8009d26:	f016 0608 	ands.w	r6, r6, #8
 8009d2a:	d1f8      	bne.n	8009d1e <_strtol_l.constprop.0+0x22>
 8009d2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d2e:	d12d      	bne.n	8009d8c <_strtol_l.constprop.0+0x90>
 8009d30:	782c      	ldrb	r4, [r5, #0]
 8009d32:	2601      	movs	r6, #1
 8009d34:	1c95      	adds	r5, r2, #2
 8009d36:	f033 0210 	bics.w	r2, r3, #16
 8009d3a:	d109      	bne.n	8009d50 <_strtol_l.constprop.0+0x54>
 8009d3c:	2c30      	cmp	r4, #48	@ 0x30
 8009d3e:	d12a      	bne.n	8009d96 <_strtol_l.constprop.0+0x9a>
 8009d40:	782a      	ldrb	r2, [r5, #0]
 8009d42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d46:	2a58      	cmp	r2, #88	@ 0x58
 8009d48:	d125      	bne.n	8009d96 <_strtol_l.constprop.0+0x9a>
 8009d4a:	786c      	ldrb	r4, [r5, #1]
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	3502      	adds	r5, #2
 8009d50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d54:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d58:	2200      	movs	r2, #0
 8009d5a:	fbbc f9f3 	udiv	r9, ip, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d68:	2f09      	cmp	r7, #9
 8009d6a:	d81b      	bhi.n	8009da4 <_strtol_l.constprop.0+0xa8>
 8009d6c:	463c      	mov	r4, r7
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	dd27      	ble.n	8009dc2 <_strtol_l.constprop.0+0xc6>
 8009d72:	1c57      	adds	r7, r2, #1
 8009d74:	d007      	beq.n	8009d86 <_strtol_l.constprop.0+0x8a>
 8009d76:	4581      	cmp	r9, r0
 8009d78:	d320      	bcc.n	8009dbc <_strtol_l.constprop.0+0xc0>
 8009d7a:	d101      	bne.n	8009d80 <_strtol_l.constprop.0+0x84>
 8009d7c:	45a2      	cmp	sl, r4
 8009d7e:	db1d      	blt.n	8009dbc <_strtol_l.constprop.0+0xc0>
 8009d80:	fb00 4003 	mla	r0, r0, r3, r4
 8009d84:	2201      	movs	r2, #1
 8009d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d8a:	e7eb      	b.n	8009d64 <_strtol_l.constprop.0+0x68>
 8009d8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d8e:	bf04      	itt	eq
 8009d90:	782c      	ldrbeq	r4, [r5, #0]
 8009d92:	1c95      	addeq	r5, r2, #2
 8009d94:	e7cf      	b.n	8009d36 <_strtol_l.constprop.0+0x3a>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1da      	bne.n	8009d50 <_strtol_l.constprop.0+0x54>
 8009d9a:	2c30      	cmp	r4, #48	@ 0x30
 8009d9c:	bf0c      	ite	eq
 8009d9e:	2308      	moveq	r3, #8
 8009da0:	230a      	movne	r3, #10
 8009da2:	e7d5      	b.n	8009d50 <_strtol_l.constprop.0+0x54>
 8009da4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009da8:	2f19      	cmp	r7, #25
 8009daa:	d801      	bhi.n	8009db0 <_strtol_l.constprop.0+0xb4>
 8009dac:	3c37      	subs	r4, #55	@ 0x37
 8009dae:	e7de      	b.n	8009d6e <_strtol_l.constprop.0+0x72>
 8009db0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009db4:	2f19      	cmp	r7, #25
 8009db6:	d804      	bhi.n	8009dc2 <_strtol_l.constprop.0+0xc6>
 8009db8:	3c57      	subs	r4, #87	@ 0x57
 8009dba:	e7d8      	b.n	8009d6e <_strtol_l.constprop.0+0x72>
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	e7e1      	b.n	8009d86 <_strtol_l.constprop.0+0x8a>
 8009dc2:	1c53      	adds	r3, r2, #1
 8009dc4:	d108      	bne.n	8009dd8 <_strtol_l.constprop.0+0xdc>
 8009dc6:	2322      	movs	r3, #34	@ 0x22
 8009dc8:	f8ce 3000 	str.w	r3, [lr]
 8009dcc:	4660      	mov	r0, ip
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	d0a0      	beq.n	8009d16 <_strtol_l.constprop.0+0x1a>
 8009dd4:	1e69      	subs	r1, r5, #1
 8009dd6:	e006      	b.n	8009de6 <_strtol_l.constprop.0+0xea>
 8009dd8:	b106      	cbz	r6, 8009ddc <_strtol_l.constprop.0+0xe0>
 8009dda:	4240      	negs	r0, r0
 8009ddc:	f1b8 0f00 	cmp.w	r8, #0
 8009de0:	d099      	beq.n	8009d16 <_strtol_l.constprop.0+0x1a>
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	d1f6      	bne.n	8009dd4 <_strtol_l.constprop.0+0xd8>
 8009de6:	f8c8 1000 	str.w	r1, [r8]
 8009dea:	e794      	b.n	8009d16 <_strtol_l.constprop.0+0x1a>
 8009dec:	0800bff9 	.word	0x0800bff9

08009df0 <_strtol_r>:
 8009df0:	f7ff bf84 	b.w	8009cfc <_strtol_l.constprop.0>

08009df4 <__ssputs_r>:
 8009df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	688e      	ldr	r6, [r1, #8]
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	42be      	cmp	r6, r7
 8009dfe:	680b      	ldr	r3, [r1, #0]
 8009e00:	4682      	mov	sl, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	4690      	mov	r8, r2
 8009e06:	d82d      	bhi.n	8009e64 <__ssputs_r+0x70>
 8009e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e10:	d026      	beq.n	8009e60 <__ssputs_r+0x6c>
 8009e12:	6965      	ldr	r5, [r4, #20]
 8009e14:	6909      	ldr	r1, [r1, #16]
 8009e16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e1a:	eba3 0901 	sub.w	r9, r3, r1
 8009e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e22:	1c7b      	adds	r3, r7, #1
 8009e24:	444b      	add	r3, r9
 8009e26:	106d      	asrs	r5, r5, #1
 8009e28:	429d      	cmp	r5, r3
 8009e2a:	bf38      	it	cc
 8009e2c:	461d      	movcc	r5, r3
 8009e2e:	0553      	lsls	r3, r2, #21
 8009e30:	d527      	bpl.n	8009e82 <__ssputs_r+0x8e>
 8009e32:	4629      	mov	r1, r5
 8009e34:	f7fc fc4a 	bl	80066cc <_malloc_r>
 8009e38:	4606      	mov	r6, r0
 8009e3a:	b360      	cbz	r0, 8009e96 <__ssputs_r+0xa2>
 8009e3c:	6921      	ldr	r1, [r4, #16]
 8009e3e:	464a      	mov	r2, r9
 8009e40:	f7fd fdf5 	bl	8007a2e <memcpy>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	6126      	str	r6, [r4, #16]
 8009e52:	6165      	str	r5, [r4, #20]
 8009e54:	444e      	add	r6, r9
 8009e56:	eba5 0509 	sub.w	r5, r5, r9
 8009e5a:	6026      	str	r6, [r4, #0]
 8009e5c:	60a5      	str	r5, [r4, #8]
 8009e5e:	463e      	mov	r6, r7
 8009e60:	42be      	cmp	r6, r7
 8009e62:	d900      	bls.n	8009e66 <__ssputs_r+0x72>
 8009e64:	463e      	mov	r6, r7
 8009e66:	6820      	ldr	r0, [r4, #0]
 8009e68:	4632      	mov	r2, r6
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	f000 fb6a 	bl	800a544 <memmove>
 8009e70:	68a3      	ldr	r3, [r4, #8]
 8009e72:	1b9b      	subs	r3, r3, r6
 8009e74:	60a3      	str	r3, [r4, #8]
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	4433      	add	r3, r6
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	462a      	mov	r2, r5
 8009e84:	f000 ff31 	bl	800acea <_realloc_r>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d1e0      	bne.n	8009e50 <__ssputs_r+0x5c>
 8009e8e:	6921      	ldr	r1, [r4, #16]
 8009e90:	4650      	mov	r0, sl
 8009e92:	f7fe fc2d 	bl	80086f0 <_free_r>
 8009e96:	230c      	movs	r3, #12
 8009e98:	f8ca 3000 	str.w	r3, [sl]
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e7e9      	b.n	8009e7e <__ssputs_r+0x8a>
	...

08009eac <_svfiprintf_r>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	4698      	mov	r8, r3
 8009eb2:	898b      	ldrh	r3, [r1, #12]
 8009eb4:	061b      	lsls	r3, r3, #24
 8009eb6:	b09d      	sub	sp, #116	@ 0x74
 8009eb8:	4607      	mov	r7, r0
 8009eba:	460d      	mov	r5, r1
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	d510      	bpl.n	8009ee2 <_svfiprintf_r+0x36>
 8009ec0:	690b      	ldr	r3, [r1, #16]
 8009ec2:	b973      	cbnz	r3, 8009ee2 <_svfiprintf_r+0x36>
 8009ec4:	2140      	movs	r1, #64	@ 0x40
 8009ec6:	f7fc fc01 	bl	80066cc <_malloc_r>
 8009eca:	6028      	str	r0, [r5, #0]
 8009ecc:	6128      	str	r0, [r5, #16]
 8009ece:	b930      	cbnz	r0, 8009ede <_svfiprintf_r+0x32>
 8009ed0:	230c      	movs	r3, #12
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	b01d      	add	sp, #116	@ 0x74
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	2340      	movs	r3, #64	@ 0x40
 8009ee0:	616b      	str	r3, [r5, #20]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ee6:	2320      	movs	r3, #32
 8009ee8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef0:	2330      	movs	r3, #48	@ 0x30
 8009ef2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a090 <_svfiprintf_r+0x1e4>
 8009ef6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009efa:	f04f 0901 	mov.w	r9, #1
 8009efe:	4623      	mov	r3, r4
 8009f00:	469a      	mov	sl, r3
 8009f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f06:	b10a      	cbz	r2, 8009f0c <_svfiprintf_r+0x60>
 8009f08:	2a25      	cmp	r2, #37	@ 0x25
 8009f0a:	d1f9      	bne.n	8009f00 <_svfiprintf_r+0x54>
 8009f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f10:	d00b      	beq.n	8009f2a <_svfiprintf_r+0x7e>
 8009f12:	465b      	mov	r3, fp
 8009f14:	4622      	mov	r2, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f7ff ff6b 	bl	8009df4 <__ssputs_r>
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f000 80a7 	beq.w	800a072 <_svfiprintf_r+0x1c6>
 8009f24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f26:	445a      	add	r2, fp
 8009f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 809f 	beq.w	800a072 <_svfiprintf_r+0x1c6>
 8009f34:	2300      	movs	r3, #0
 8009f36:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f3e:	f10a 0a01 	add.w	sl, sl, #1
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	9307      	str	r3, [sp, #28]
 8009f46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f4c:	4654      	mov	r4, sl
 8009f4e:	2205      	movs	r2, #5
 8009f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f54:	484e      	ldr	r0, [pc, #312]	@ (800a090 <_svfiprintf_r+0x1e4>)
 8009f56:	f7f6 f963 	bl	8000220 <memchr>
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	b9d8      	cbnz	r0, 8009f96 <_svfiprintf_r+0xea>
 8009f5e:	06d0      	lsls	r0, r2, #27
 8009f60:	bf44      	itt	mi
 8009f62:	2320      	movmi	r3, #32
 8009f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f68:	0711      	lsls	r1, r2, #28
 8009f6a:	bf44      	itt	mi
 8009f6c:	232b      	movmi	r3, #43	@ 0x2b
 8009f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f72:	f89a 3000 	ldrb.w	r3, [sl]
 8009f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f78:	d015      	beq.n	8009fa6 <_svfiprintf_r+0xfa>
 8009f7a:	9a07      	ldr	r2, [sp, #28]
 8009f7c:	4654      	mov	r4, sl
 8009f7e:	2000      	movs	r0, #0
 8009f80:	f04f 0c0a 	mov.w	ip, #10
 8009f84:	4621      	mov	r1, r4
 8009f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f8a:	3b30      	subs	r3, #48	@ 0x30
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d94b      	bls.n	800a028 <_svfiprintf_r+0x17c>
 8009f90:	b1b0      	cbz	r0, 8009fc0 <_svfiprintf_r+0x114>
 8009f92:	9207      	str	r2, [sp, #28]
 8009f94:	e014      	b.n	8009fc0 <_svfiprintf_r+0x114>
 8009f96:	eba0 0308 	sub.w	r3, r0, r8
 8009f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	9304      	str	r3, [sp, #16]
 8009fa2:	46a2      	mov	sl, r4
 8009fa4:	e7d2      	b.n	8009f4c <_svfiprintf_r+0xa0>
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	1d19      	adds	r1, r3, #4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	9103      	str	r1, [sp, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfbb      	ittet	lt
 8009fb2:	425b      	neglt	r3, r3
 8009fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fb8:	9307      	strge	r3, [sp, #28]
 8009fba:	9307      	strlt	r3, [sp, #28]
 8009fbc:	bfb8      	it	lt
 8009fbe:	9204      	strlt	r2, [sp, #16]
 8009fc0:	7823      	ldrb	r3, [r4, #0]
 8009fc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fc4:	d10a      	bne.n	8009fdc <_svfiprintf_r+0x130>
 8009fc6:	7863      	ldrb	r3, [r4, #1]
 8009fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fca:	d132      	bne.n	800a032 <_svfiprintf_r+0x186>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	1d1a      	adds	r2, r3, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	9203      	str	r2, [sp, #12]
 8009fd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fd8:	3402      	adds	r4, #2
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a0a0 <_svfiprintf_r+0x1f4>
 8009fe0:	7821      	ldrb	r1, [r4, #0]
 8009fe2:	2203      	movs	r2, #3
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	f7f6 f91b 	bl	8000220 <memchr>
 8009fea:	b138      	cbz	r0, 8009ffc <_svfiprintf_r+0x150>
 8009fec:	9b04      	ldr	r3, [sp, #16]
 8009fee:	eba0 000a 	sub.w	r0, r0, sl
 8009ff2:	2240      	movs	r2, #64	@ 0x40
 8009ff4:	4082      	lsls	r2, r0
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	3401      	adds	r4, #1
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a000:	4824      	ldr	r0, [pc, #144]	@ (800a094 <_svfiprintf_r+0x1e8>)
 800a002:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a006:	2206      	movs	r2, #6
 800a008:	f7f6 f90a 	bl	8000220 <memchr>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d036      	beq.n	800a07e <_svfiprintf_r+0x1d2>
 800a010:	4b21      	ldr	r3, [pc, #132]	@ (800a098 <_svfiprintf_r+0x1ec>)
 800a012:	bb1b      	cbnz	r3, 800a05c <_svfiprintf_r+0x1b0>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	3307      	adds	r3, #7
 800a018:	f023 0307 	bic.w	r3, r3, #7
 800a01c:	3308      	adds	r3, #8
 800a01e:	9303      	str	r3, [sp, #12]
 800a020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a022:	4433      	add	r3, r6
 800a024:	9309      	str	r3, [sp, #36]	@ 0x24
 800a026:	e76a      	b.n	8009efe <_svfiprintf_r+0x52>
 800a028:	fb0c 3202 	mla	r2, ip, r2, r3
 800a02c:	460c      	mov	r4, r1
 800a02e:	2001      	movs	r0, #1
 800a030:	e7a8      	b.n	8009f84 <_svfiprintf_r+0xd8>
 800a032:	2300      	movs	r3, #0
 800a034:	3401      	adds	r4, #1
 800a036:	9305      	str	r3, [sp, #20]
 800a038:	4619      	mov	r1, r3
 800a03a:	f04f 0c0a 	mov.w	ip, #10
 800a03e:	4620      	mov	r0, r4
 800a040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a044:	3a30      	subs	r2, #48	@ 0x30
 800a046:	2a09      	cmp	r2, #9
 800a048:	d903      	bls.n	800a052 <_svfiprintf_r+0x1a6>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0c6      	beq.n	8009fdc <_svfiprintf_r+0x130>
 800a04e:	9105      	str	r1, [sp, #20]
 800a050:	e7c4      	b.n	8009fdc <_svfiprintf_r+0x130>
 800a052:	fb0c 2101 	mla	r1, ip, r1, r2
 800a056:	4604      	mov	r4, r0
 800a058:	2301      	movs	r3, #1
 800a05a:	e7f0      	b.n	800a03e <_svfiprintf_r+0x192>
 800a05c:	ab03      	add	r3, sp, #12
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	462a      	mov	r2, r5
 800a062:	4b0e      	ldr	r3, [pc, #56]	@ (800a09c <_svfiprintf_r+0x1f0>)
 800a064:	a904      	add	r1, sp, #16
 800a066:	4638      	mov	r0, r7
 800a068:	f7fc fc5c 	bl	8006924 <_printf_float>
 800a06c:	1c42      	adds	r2, r0, #1
 800a06e:	4606      	mov	r6, r0
 800a070:	d1d6      	bne.n	800a020 <_svfiprintf_r+0x174>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	065b      	lsls	r3, r3, #25
 800a076:	f53f af2d 	bmi.w	8009ed4 <_svfiprintf_r+0x28>
 800a07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a07c:	e72c      	b.n	8009ed8 <_svfiprintf_r+0x2c>
 800a07e:	ab03      	add	r3, sp, #12
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	462a      	mov	r2, r5
 800a084:	4b05      	ldr	r3, [pc, #20]	@ (800a09c <_svfiprintf_r+0x1f0>)
 800a086:	a904      	add	r1, sp, #16
 800a088:	4638      	mov	r0, r7
 800a08a:	f7fc fee3 	bl	8006e54 <_printf_i>
 800a08e:	e7ed      	b.n	800a06c <_svfiprintf_r+0x1c0>
 800a090:	0800c0f9 	.word	0x0800c0f9
 800a094:	0800c103 	.word	0x0800c103
 800a098:	08006925 	.word	0x08006925
 800a09c:	08009df5 	.word	0x08009df5
 800a0a0:	0800c0ff 	.word	0x0800c0ff

0800a0a4 <__sfputc_r>:
 800a0a4:	6893      	ldr	r3, [r2, #8]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	b410      	push	{r4}
 800a0ac:	6093      	str	r3, [r2, #8]
 800a0ae:	da08      	bge.n	800a0c2 <__sfputc_r+0x1e>
 800a0b0:	6994      	ldr	r4, [r2, #24]
 800a0b2:	42a3      	cmp	r3, r4
 800a0b4:	db01      	blt.n	800a0ba <__sfputc_r+0x16>
 800a0b6:	290a      	cmp	r1, #10
 800a0b8:	d103      	bne.n	800a0c2 <__sfputc_r+0x1e>
 800a0ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0be:	f7fd bb92 	b.w	80077e6 <__swbuf_r>
 800a0c2:	6813      	ldr	r3, [r2, #0]
 800a0c4:	1c58      	adds	r0, r3, #1
 800a0c6:	6010      	str	r0, [r2, #0]
 800a0c8:	7019      	strb	r1, [r3, #0]
 800a0ca:	4608      	mov	r0, r1
 800a0cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <__sfputs_r>:
 800a0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	460f      	mov	r7, r1
 800a0d8:	4614      	mov	r4, r2
 800a0da:	18d5      	adds	r5, r2, r3
 800a0dc:	42ac      	cmp	r4, r5
 800a0de:	d101      	bne.n	800a0e4 <__sfputs_r+0x12>
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e007      	b.n	800a0f4 <__sfputs_r+0x22>
 800a0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e8:	463a      	mov	r2, r7
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7ff ffda 	bl	800a0a4 <__sfputc_r>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d1f3      	bne.n	800a0dc <__sfputs_r+0xa>
 800a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0f8 <_vfiprintf_r>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	460d      	mov	r5, r1
 800a0fe:	b09d      	sub	sp, #116	@ 0x74
 800a100:	4614      	mov	r4, r2
 800a102:	4698      	mov	r8, r3
 800a104:	4606      	mov	r6, r0
 800a106:	b118      	cbz	r0, 800a110 <_vfiprintf_r+0x18>
 800a108:	6a03      	ldr	r3, [r0, #32]
 800a10a:	b90b      	cbnz	r3, 800a110 <_vfiprintf_r+0x18>
 800a10c:	f7fd fa62 	bl	80075d4 <__sinit>
 800a110:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a112:	07d9      	lsls	r1, r3, #31
 800a114:	d405      	bmi.n	800a122 <_vfiprintf_r+0x2a>
 800a116:	89ab      	ldrh	r3, [r5, #12]
 800a118:	059a      	lsls	r2, r3, #22
 800a11a:	d402      	bmi.n	800a122 <_vfiprintf_r+0x2a>
 800a11c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a11e:	f7fd fc84 	bl	8007a2a <__retarget_lock_acquire_recursive>
 800a122:	89ab      	ldrh	r3, [r5, #12]
 800a124:	071b      	lsls	r3, r3, #28
 800a126:	d501      	bpl.n	800a12c <_vfiprintf_r+0x34>
 800a128:	692b      	ldr	r3, [r5, #16]
 800a12a:	b99b      	cbnz	r3, 800a154 <_vfiprintf_r+0x5c>
 800a12c:	4629      	mov	r1, r5
 800a12e:	4630      	mov	r0, r6
 800a130:	f7fd fb98 	bl	8007864 <__swsetup_r>
 800a134:	b170      	cbz	r0, 800a154 <_vfiprintf_r+0x5c>
 800a136:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a138:	07dc      	lsls	r4, r3, #31
 800a13a:	d504      	bpl.n	800a146 <_vfiprintf_r+0x4e>
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295
 800a140:	b01d      	add	sp, #116	@ 0x74
 800a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a146:	89ab      	ldrh	r3, [r5, #12]
 800a148:	0598      	lsls	r0, r3, #22
 800a14a:	d4f7      	bmi.n	800a13c <_vfiprintf_r+0x44>
 800a14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a14e:	f7fd fc6d 	bl	8007a2c <__retarget_lock_release_recursive>
 800a152:	e7f3      	b.n	800a13c <_vfiprintf_r+0x44>
 800a154:	2300      	movs	r3, #0
 800a156:	9309      	str	r3, [sp, #36]	@ 0x24
 800a158:	2320      	movs	r3, #32
 800a15a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a15e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a162:	2330      	movs	r3, #48	@ 0x30
 800a164:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a314 <_vfiprintf_r+0x21c>
 800a168:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a16c:	f04f 0901 	mov.w	r9, #1
 800a170:	4623      	mov	r3, r4
 800a172:	469a      	mov	sl, r3
 800a174:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a178:	b10a      	cbz	r2, 800a17e <_vfiprintf_r+0x86>
 800a17a:	2a25      	cmp	r2, #37	@ 0x25
 800a17c:	d1f9      	bne.n	800a172 <_vfiprintf_r+0x7a>
 800a17e:	ebba 0b04 	subs.w	fp, sl, r4
 800a182:	d00b      	beq.n	800a19c <_vfiprintf_r+0xa4>
 800a184:	465b      	mov	r3, fp
 800a186:	4622      	mov	r2, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff ffa1 	bl	800a0d2 <__sfputs_r>
 800a190:	3001      	adds	r0, #1
 800a192:	f000 80a7 	beq.w	800a2e4 <_vfiprintf_r+0x1ec>
 800a196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a198:	445a      	add	r2, fp
 800a19a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a19c:	f89a 3000 	ldrb.w	r3, [sl]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 809f 	beq.w	800a2e4 <_vfiprintf_r+0x1ec>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1b0:	f10a 0a01 	add.w	sl, sl, #1
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	9307      	str	r3, [sp, #28]
 800a1b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1be:	4654      	mov	r4, sl
 800a1c0:	2205      	movs	r2, #5
 800a1c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c6:	4853      	ldr	r0, [pc, #332]	@ (800a314 <_vfiprintf_r+0x21c>)
 800a1c8:	f7f6 f82a 	bl	8000220 <memchr>
 800a1cc:	9a04      	ldr	r2, [sp, #16]
 800a1ce:	b9d8      	cbnz	r0, 800a208 <_vfiprintf_r+0x110>
 800a1d0:	06d1      	lsls	r1, r2, #27
 800a1d2:	bf44      	itt	mi
 800a1d4:	2320      	movmi	r3, #32
 800a1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1da:	0713      	lsls	r3, r2, #28
 800a1dc:	bf44      	itt	mi
 800a1de:	232b      	movmi	r3, #43	@ 0x2b
 800a1e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ea:	d015      	beq.n	800a218 <_vfiprintf_r+0x120>
 800a1ec:	9a07      	ldr	r2, [sp, #28]
 800a1ee:	4654      	mov	r4, sl
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	f04f 0c0a 	mov.w	ip, #10
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1fc:	3b30      	subs	r3, #48	@ 0x30
 800a1fe:	2b09      	cmp	r3, #9
 800a200:	d94b      	bls.n	800a29a <_vfiprintf_r+0x1a2>
 800a202:	b1b0      	cbz	r0, 800a232 <_vfiprintf_r+0x13a>
 800a204:	9207      	str	r2, [sp, #28]
 800a206:	e014      	b.n	800a232 <_vfiprintf_r+0x13a>
 800a208:	eba0 0308 	sub.w	r3, r0, r8
 800a20c:	fa09 f303 	lsl.w	r3, r9, r3
 800a210:	4313      	orrs	r3, r2
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	46a2      	mov	sl, r4
 800a216:	e7d2      	b.n	800a1be <_vfiprintf_r+0xc6>
 800a218:	9b03      	ldr	r3, [sp, #12]
 800a21a:	1d19      	adds	r1, r3, #4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	9103      	str	r1, [sp, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	bfbb      	ittet	lt
 800a224:	425b      	neglt	r3, r3
 800a226:	f042 0202 	orrlt.w	r2, r2, #2
 800a22a:	9307      	strge	r3, [sp, #28]
 800a22c:	9307      	strlt	r3, [sp, #28]
 800a22e:	bfb8      	it	lt
 800a230:	9204      	strlt	r2, [sp, #16]
 800a232:	7823      	ldrb	r3, [r4, #0]
 800a234:	2b2e      	cmp	r3, #46	@ 0x2e
 800a236:	d10a      	bne.n	800a24e <_vfiprintf_r+0x156>
 800a238:	7863      	ldrb	r3, [r4, #1]
 800a23a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a23c:	d132      	bne.n	800a2a4 <_vfiprintf_r+0x1ac>
 800a23e:	9b03      	ldr	r3, [sp, #12]
 800a240:	1d1a      	adds	r2, r3, #4
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	9203      	str	r2, [sp, #12]
 800a246:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a24a:	3402      	adds	r4, #2
 800a24c:	9305      	str	r3, [sp, #20]
 800a24e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a324 <_vfiprintf_r+0x22c>
 800a252:	7821      	ldrb	r1, [r4, #0]
 800a254:	2203      	movs	r2, #3
 800a256:	4650      	mov	r0, sl
 800a258:	f7f5 ffe2 	bl	8000220 <memchr>
 800a25c:	b138      	cbz	r0, 800a26e <_vfiprintf_r+0x176>
 800a25e:	9b04      	ldr	r3, [sp, #16]
 800a260:	eba0 000a 	sub.w	r0, r0, sl
 800a264:	2240      	movs	r2, #64	@ 0x40
 800a266:	4082      	lsls	r2, r0
 800a268:	4313      	orrs	r3, r2
 800a26a:	3401      	adds	r4, #1
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a272:	4829      	ldr	r0, [pc, #164]	@ (800a318 <_vfiprintf_r+0x220>)
 800a274:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a278:	2206      	movs	r2, #6
 800a27a:	f7f5 ffd1 	bl	8000220 <memchr>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d03f      	beq.n	800a302 <_vfiprintf_r+0x20a>
 800a282:	4b26      	ldr	r3, [pc, #152]	@ (800a31c <_vfiprintf_r+0x224>)
 800a284:	bb1b      	cbnz	r3, 800a2ce <_vfiprintf_r+0x1d6>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	3307      	adds	r3, #7
 800a28a:	f023 0307 	bic.w	r3, r3, #7
 800a28e:	3308      	adds	r3, #8
 800a290:	9303      	str	r3, [sp, #12]
 800a292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a294:	443b      	add	r3, r7
 800a296:	9309      	str	r3, [sp, #36]	@ 0x24
 800a298:	e76a      	b.n	800a170 <_vfiprintf_r+0x78>
 800a29a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a29e:	460c      	mov	r4, r1
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	e7a8      	b.n	800a1f6 <_vfiprintf_r+0xfe>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	3401      	adds	r4, #1
 800a2a8:	9305      	str	r3, [sp, #20]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	f04f 0c0a 	mov.w	ip, #10
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b6:	3a30      	subs	r2, #48	@ 0x30
 800a2b8:	2a09      	cmp	r2, #9
 800a2ba:	d903      	bls.n	800a2c4 <_vfiprintf_r+0x1cc>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0c6      	beq.n	800a24e <_vfiprintf_r+0x156>
 800a2c0:	9105      	str	r1, [sp, #20]
 800a2c2:	e7c4      	b.n	800a24e <_vfiprintf_r+0x156>
 800a2c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e7f0      	b.n	800a2b0 <_vfiprintf_r+0x1b8>
 800a2ce:	ab03      	add	r3, sp, #12
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4b12      	ldr	r3, [pc, #72]	@ (800a320 <_vfiprintf_r+0x228>)
 800a2d6:	a904      	add	r1, sp, #16
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f7fc fb23 	bl	8006924 <_printf_float>
 800a2de:	4607      	mov	r7, r0
 800a2e0:	1c78      	adds	r0, r7, #1
 800a2e2:	d1d6      	bne.n	800a292 <_vfiprintf_r+0x19a>
 800a2e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2e6:	07d9      	lsls	r1, r3, #31
 800a2e8:	d405      	bmi.n	800a2f6 <_vfiprintf_r+0x1fe>
 800a2ea:	89ab      	ldrh	r3, [r5, #12]
 800a2ec:	059a      	lsls	r2, r3, #22
 800a2ee:	d402      	bmi.n	800a2f6 <_vfiprintf_r+0x1fe>
 800a2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2f2:	f7fd fb9b 	bl	8007a2c <__retarget_lock_release_recursive>
 800a2f6:	89ab      	ldrh	r3, [r5, #12]
 800a2f8:	065b      	lsls	r3, r3, #25
 800a2fa:	f53f af1f 	bmi.w	800a13c <_vfiprintf_r+0x44>
 800a2fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a300:	e71e      	b.n	800a140 <_vfiprintf_r+0x48>
 800a302:	ab03      	add	r3, sp, #12
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	462a      	mov	r2, r5
 800a308:	4b05      	ldr	r3, [pc, #20]	@ (800a320 <_vfiprintf_r+0x228>)
 800a30a:	a904      	add	r1, sp, #16
 800a30c:	4630      	mov	r0, r6
 800a30e:	f7fc fda1 	bl	8006e54 <_printf_i>
 800a312:	e7e4      	b.n	800a2de <_vfiprintf_r+0x1e6>
 800a314:	0800c0f9 	.word	0x0800c0f9
 800a318:	0800c103 	.word	0x0800c103
 800a31c:	08006925 	.word	0x08006925
 800a320:	0800a0d3 	.word	0x0800a0d3
 800a324:	0800c0ff 	.word	0x0800c0ff

0800a328 <__sflush_r>:
 800a328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a330:	0716      	lsls	r6, r2, #28
 800a332:	4605      	mov	r5, r0
 800a334:	460c      	mov	r4, r1
 800a336:	d454      	bmi.n	800a3e2 <__sflush_r+0xba>
 800a338:	684b      	ldr	r3, [r1, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	dc02      	bgt.n	800a344 <__sflush_r+0x1c>
 800a33e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a340:	2b00      	cmp	r3, #0
 800a342:	dd48      	ble.n	800a3d6 <__sflush_r+0xae>
 800a344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a346:	2e00      	cmp	r6, #0
 800a348:	d045      	beq.n	800a3d6 <__sflush_r+0xae>
 800a34a:	2300      	movs	r3, #0
 800a34c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a350:	682f      	ldr	r7, [r5, #0]
 800a352:	6a21      	ldr	r1, [r4, #32]
 800a354:	602b      	str	r3, [r5, #0]
 800a356:	d030      	beq.n	800a3ba <__sflush_r+0x92>
 800a358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	0759      	lsls	r1, r3, #29
 800a35e:	d505      	bpl.n	800a36c <__sflush_r+0x44>
 800a360:	6863      	ldr	r3, [r4, #4]
 800a362:	1ad2      	subs	r2, r2, r3
 800a364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a366:	b10b      	cbz	r3, 800a36c <__sflush_r+0x44>
 800a368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a36a:	1ad2      	subs	r2, r2, r3
 800a36c:	2300      	movs	r3, #0
 800a36e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a370:	6a21      	ldr	r1, [r4, #32]
 800a372:	4628      	mov	r0, r5
 800a374:	47b0      	blx	r6
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	d106      	bne.n	800a38a <__sflush_r+0x62>
 800a37c:	6829      	ldr	r1, [r5, #0]
 800a37e:	291d      	cmp	r1, #29
 800a380:	d82b      	bhi.n	800a3da <__sflush_r+0xb2>
 800a382:	4a2a      	ldr	r2, [pc, #168]	@ (800a42c <__sflush_r+0x104>)
 800a384:	410a      	asrs	r2, r1
 800a386:	07d6      	lsls	r6, r2, #31
 800a388:	d427      	bmi.n	800a3da <__sflush_r+0xb2>
 800a38a:	2200      	movs	r2, #0
 800a38c:	6062      	str	r2, [r4, #4]
 800a38e:	04d9      	lsls	r1, r3, #19
 800a390:	6922      	ldr	r2, [r4, #16]
 800a392:	6022      	str	r2, [r4, #0]
 800a394:	d504      	bpl.n	800a3a0 <__sflush_r+0x78>
 800a396:	1c42      	adds	r2, r0, #1
 800a398:	d101      	bne.n	800a39e <__sflush_r+0x76>
 800a39a:	682b      	ldr	r3, [r5, #0]
 800a39c:	b903      	cbnz	r3, 800a3a0 <__sflush_r+0x78>
 800a39e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a3a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3a2:	602f      	str	r7, [r5, #0]
 800a3a4:	b1b9      	cbz	r1, 800a3d6 <__sflush_r+0xae>
 800a3a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3aa:	4299      	cmp	r1, r3
 800a3ac:	d002      	beq.n	800a3b4 <__sflush_r+0x8c>
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f7fe f99e 	bl	80086f0 <_free_r>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3b8:	e00d      	b.n	800a3d6 <__sflush_r+0xae>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b0      	blx	r6
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	1c50      	adds	r0, r2, #1
 800a3c4:	d1c9      	bne.n	800a35a <__sflush_r+0x32>
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d0c6      	beq.n	800a35a <__sflush_r+0x32>
 800a3cc:	2b1d      	cmp	r3, #29
 800a3ce:	d001      	beq.n	800a3d4 <__sflush_r+0xac>
 800a3d0:	2b16      	cmp	r3, #22
 800a3d2:	d11e      	bne.n	800a412 <__sflush_r+0xea>
 800a3d4:	602f      	str	r7, [r5, #0]
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e022      	b.n	800a420 <__sflush_r+0xf8>
 800a3da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3de:	b21b      	sxth	r3, r3
 800a3e0:	e01b      	b.n	800a41a <__sflush_r+0xf2>
 800a3e2:	690f      	ldr	r7, [r1, #16]
 800a3e4:	2f00      	cmp	r7, #0
 800a3e6:	d0f6      	beq.n	800a3d6 <__sflush_r+0xae>
 800a3e8:	0793      	lsls	r3, r2, #30
 800a3ea:	680e      	ldr	r6, [r1, #0]
 800a3ec:	bf08      	it	eq
 800a3ee:	694b      	ldreq	r3, [r1, #20]
 800a3f0:	600f      	str	r7, [r1, #0]
 800a3f2:	bf18      	it	ne
 800a3f4:	2300      	movne	r3, #0
 800a3f6:	eba6 0807 	sub.w	r8, r6, r7
 800a3fa:	608b      	str	r3, [r1, #8]
 800a3fc:	f1b8 0f00 	cmp.w	r8, #0
 800a400:	dde9      	ble.n	800a3d6 <__sflush_r+0xae>
 800a402:	6a21      	ldr	r1, [r4, #32]
 800a404:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a406:	4643      	mov	r3, r8
 800a408:	463a      	mov	r2, r7
 800a40a:	4628      	mov	r0, r5
 800a40c:	47b0      	blx	r6
 800a40e:	2800      	cmp	r0, #0
 800a410:	dc08      	bgt.n	800a424 <__sflush_r+0xfc>
 800a412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295
 800a420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a424:	4407      	add	r7, r0
 800a426:	eba8 0800 	sub.w	r8, r8, r0
 800a42a:	e7e7      	b.n	800a3fc <__sflush_r+0xd4>
 800a42c:	dfbffffe 	.word	0xdfbffffe

0800a430 <_fflush_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	690b      	ldr	r3, [r1, #16]
 800a434:	4605      	mov	r5, r0
 800a436:	460c      	mov	r4, r1
 800a438:	b913      	cbnz	r3, 800a440 <_fflush_r+0x10>
 800a43a:	2500      	movs	r5, #0
 800a43c:	4628      	mov	r0, r5
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	b118      	cbz	r0, 800a44a <_fflush_r+0x1a>
 800a442:	6a03      	ldr	r3, [r0, #32]
 800a444:	b90b      	cbnz	r3, 800a44a <_fflush_r+0x1a>
 800a446:	f7fd f8c5 	bl	80075d4 <__sinit>
 800a44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0f3      	beq.n	800a43a <_fflush_r+0xa>
 800a452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a454:	07d0      	lsls	r0, r2, #31
 800a456:	d404      	bmi.n	800a462 <_fflush_r+0x32>
 800a458:	0599      	lsls	r1, r3, #22
 800a45a:	d402      	bmi.n	800a462 <_fflush_r+0x32>
 800a45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a45e:	f7fd fae4 	bl	8007a2a <__retarget_lock_acquire_recursive>
 800a462:	4628      	mov	r0, r5
 800a464:	4621      	mov	r1, r4
 800a466:	f7ff ff5f 	bl	800a328 <__sflush_r>
 800a46a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a46c:	07da      	lsls	r2, r3, #31
 800a46e:	4605      	mov	r5, r0
 800a470:	d4e4      	bmi.n	800a43c <_fflush_r+0xc>
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	059b      	lsls	r3, r3, #22
 800a476:	d4e1      	bmi.n	800a43c <_fflush_r+0xc>
 800a478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a47a:	f7fd fad7 	bl	8007a2c <__retarget_lock_release_recursive>
 800a47e:	e7dd      	b.n	800a43c <_fflush_r+0xc>

0800a480 <__swhatbuf_r>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	460c      	mov	r4, r1
 800a484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a488:	2900      	cmp	r1, #0
 800a48a:	b096      	sub	sp, #88	@ 0x58
 800a48c:	4615      	mov	r5, r2
 800a48e:	461e      	mov	r6, r3
 800a490:	da0d      	bge.n	800a4ae <__swhatbuf_r+0x2e>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a498:	f04f 0100 	mov.w	r1, #0
 800a49c:	bf14      	ite	ne
 800a49e:	2340      	movne	r3, #64	@ 0x40
 800a4a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	6031      	str	r1, [r6, #0]
 800a4a8:	602b      	str	r3, [r5, #0]
 800a4aa:	b016      	add	sp, #88	@ 0x58
 800a4ac:	bd70      	pop	{r4, r5, r6, pc}
 800a4ae:	466a      	mov	r2, sp
 800a4b0:	f000 f874 	bl	800a59c <_fstat_r>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	dbec      	blt.n	800a492 <__swhatbuf_r+0x12>
 800a4b8:	9901      	ldr	r1, [sp, #4]
 800a4ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4c2:	4259      	negs	r1, r3
 800a4c4:	4159      	adcs	r1, r3
 800a4c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ca:	e7eb      	b.n	800a4a4 <__swhatbuf_r+0x24>

0800a4cc <__smakebuf_r>:
 800a4cc:	898b      	ldrh	r3, [r1, #12]
 800a4ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4d0:	079d      	lsls	r5, r3, #30
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	d507      	bpl.n	800a4e8 <__smakebuf_r+0x1c>
 800a4d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	6123      	str	r3, [r4, #16]
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	6163      	str	r3, [r4, #20]
 800a4e4:	b003      	add	sp, #12
 800a4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e8:	ab01      	add	r3, sp, #4
 800a4ea:	466a      	mov	r2, sp
 800a4ec:	f7ff ffc8 	bl	800a480 <__swhatbuf_r>
 800a4f0:	9f00      	ldr	r7, [sp, #0]
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	4639      	mov	r1, r7
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f7fc f8e8 	bl	80066cc <_malloc_r>
 800a4fc:	b948      	cbnz	r0, 800a512 <__smakebuf_r+0x46>
 800a4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a502:	059a      	lsls	r2, r3, #22
 800a504:	d4ee      	bmi.n	800a4e4 <__smakebuf_r+0x18>
 800a506:	f023 0303 	bic.w	r3, r3, #3
 800a50a:	f043 0302 	orr.w	r3, r3, #2
 800a50e:	81a3      	strh	r3, [r4, #12]
 800a510:	e7e2      	b.n	800a4d8 <__smakebuf_r+0xc>
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	6020      	str	r0, [r4, #0]
 800a516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	9b01      	ldr	r3, [sp, #4]
 800a51e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a522:	b15b      	cbz	r3, 800a53c <__smakebuf_r+0x70>
 800a524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a528:	4630      	mov	r0, r6
 800a52a:	f000 f849 	bl	800a5c0 <_isatty_r>
 800a52e:	b128      	cbz	r0, 800a53c <__smakebuf_r+0x70>
 800a530:	89a3      	ldrh	r3, [r4, #12]
 800a532:	f023 0303 	bic.w	r3, r3, #3
 800a536:	f043 0301 	orr.w	r3, r3, #1
 800a53a:	81a3      	strh	r3, [r4, #12]
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	431d      	orrs	r5, r3
 800a540:	81a5      	strh	r5, [r4, #12]
 800a542:	e7cf      	b.n	800a4e4 <__smakebuf_r+0x18>

0800a544 <memmove>:
 800a544:	4288      	cmp	r0, r1
 800a546:	b510      	push	{r4, lr}
 800a548:	eb01 0402 	add.w	r4, r1, r2
 800a54c:	d902      	bls.n	800a554 <memmove+0x10>
 800a54e:	4284      	cmp	r4, r0
 800a550:	4623      	mov	r3, r4
 800a552:	d807      	bhi.n	800a564 <memmove+0x20>
 800a554:	1e43      	subs	r3, r0, #1
 800a556:	42a1      	cmp	r1, r4
 800a558:	d008      	beq.n	800a56c <memmove+0x28>
 800a55a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a55e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a562:	e7f8      	b.n	800a556 <memmove+0x12>
 800a564:	4402      	add	r2, r0
 800a566:	4601      	mov	r1, r0
 800a568:	428a      	cmp	r2, r1
 800a56a:	d100      	bne.n	800a56e <memmove+0x2a>
 800a56c:	bd10      	pop	{r4, pc}
 800a56e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a576:	e7f7      	b.n	800a568 <memmove+0x24>

0800a578 <strncmp>:
 800a578:	b510      	push	{r4, lr}
 800a57a:	b16a      	cbz	r2, 800a598 <strncmp+0x20>
 800a57c:	3901      	subs	r1, #1
 800a57e:	1884      	adds	r4, r0, r2
 800a580:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a584:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a588:	429a      	cmp	r2, r3
 800a58a:	d103      	bne.n	800a594 <strncmp+0x1c>
 800a58c:	42a0      	cmp	r0, r4
 800a58e:	d001      	beq.n	800a594 <strncmp+0x1c>
 800a590:	2a00      	cmp	r2, #0
 800a592:	d1f5      	bne.n	800a580 <strncmp+0x8>
 800a594:	1ad0      	subs	r0, r2, r3
 800a596:	bd10      	pop	{r4, pc}
 800a598:	4610      	mov	r0, r2
 800a59a:	e7fc      	b.n	800a596 <strncmp+0x1e>

0800a59c <_fstat_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d07      	ldr	r5, [pc, #28]	@ (800a5bc <_fstat_r+0x20>)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	f7f7 f992 	bl	80018d2 <_fstat>
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	d102      	bne.n	800a5b8 <_fstat_r+0x1c>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	b103      	cbz	r3, 800a5b8 <_fstat_r+0x1c>
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ba:	bf00      	nop
 800a5bc:	2000050c 	.word	0x2000050c

0800a5c0 <_isatty_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4d06      	ldr	r5, [pc, #24]	@ (800a5dc <_isatty_r+0x1c>)
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	602b      	str	r3, [r5, #0]
 800a5cc:	f7f7 f991 	bl	80018f2 <_isatty>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d102      	bne.n	800a5da <_isatty_r+0x1a>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	b103      	cbz	r3, 800a5da <_isatty_r+0x1a>
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	2000050c 	.word	0x2000050c

0800a5e0 <nan>:
 800a5e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a5e8 <nan+0x8>
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	00000000 	.word	0x00000000
 800a5ec:	7ff80000 	.word	0x7ff80000

0800a5f0 <__assert_func>:
 800a5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5f2:	4614      	mov	r4, r2
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4b09      	ldr	r3, [pc, #36]	@ (800a61c <__assert_func+0x2c>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	68d8      	ldr	r0, [r3, #12]
 800a5fe:	b954      	cbnz	r4, 800a616 <__assert_func+0x26>
 800a600:	4b07      	ldr	r3, [pc, #28]	@ (800a620 <__assert_func+0x30>)
 800a602:	461c      	mov	r4, r3
 800a604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a608:	9100      	str	r1, [sp, #0]
 800a60a:	462b      	mov	r3, r5
 800a60c:	4905      	ldr	r1, [pc, #20]	@ (800a624 <__assert_func+0x34>)
 800a60e:	f000 fba7 	bl	800ad60 <fiprintf>
 800a612:	f000 fbb7 	bl	800ad84 <abort>
 800a616:	4b04      	ldr	r3, [pc, #16]	@ (800a628 <__assert_func+0x38>)
 800a618:	e7f4      	b.n	800a604 <__assert_func+0x14>
 800a61a:	bf00      	nop
 800a61c:	20000020 	.word	0x20000020
 800a620:	0800c14d 	.word	0x0800c14d
 800a624:	0800c11f 	.word	0x0800c11f
 800a628:	0800c112 	.word	0x0800c112

0800a62c <_calloc_r>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	fba1 5402 	umull	r5, r4, r1, r2
 800a632:	b93c      	cbnz	r4, 800a644 <_calloc_r+0x18>
 800a634:	4629      	mov	r1, r5
 800a636:	f7fc f849 	bl	80066cc <_malloc_r>
 800a63a:	4606      	mov	r6, r0
 800a63c:	b928      	cbnz	r0, 800a64a <_calloc_r+0x1e>
 800a63e:	2600      	movs	r6, #0
 800a640:	4630      	mov	r0, r6
 800a642:	bd70      	pop	{r4, r5, r6, pc}
 800a644:	220c      	movs	r2, #12
 800a646:	6002      	str	r2, [r0, #0]
 800a648:	e7f9      	b.n	800a63e <_calloc_r+0x12>
 800a64a:	462a      	mov	r2, r5
 800a64c:	4621      	mov	r1, r4
 800a64e:	f7fd f95f 	bl	8007910 <memset>
 800a652:	e7f5      	b.n	800a640 <_calloc_r+0x14>

0800a654 <rshift>:
 800a654:	6903      	ldr	r3, [r0, #16]
 800a656:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a65a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a65e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a662:	f100 0414 	add.w	r4, r0, #20
 800a666:	dd45      	ble.n	800a6f4 <rshift+0xa0>
 800a668:	f011 011f 	ands.w	r1, r1, #31
 800a66c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a670:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a674:	d10c      	bne.n	800a690 <rshift+0x3c>
 800a676:	f100 0710 	add.w	r7, r0, #16
 800a67a:	4629      	mov	r1, r5
 800a67c:	42b1      	cmp	r1, r6
 800a67e:	d334      	bcc.n	800a6ea <rshift+0x96>
 800a680:	1a9b      	subs	r3, r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	1eea      	subs	r2, r5, #3
 800a686:	4296      	cmp	r6, r2
 800a688:	bf38      	it	cc
 800a68a:	2300      	movcc	r3, #0
 800a68c:	4423      	add	r3, r4
 800a68e:	e015      	b.n	800a6bc <rshift+0x68>
 800a690:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a694:	f1c1 0820 	rsb	r8, r1, #32
 800a698:	40cf      	lsrs	r7, r1
 800a69a:	f105 0e04 	add.w	lr, r5, #4
 800a69e:	46a1      	mov	r9, r4
 800a6a0:	4576      	cmp	r6, lr
 800a6a2:	46f4      	mov	ip, lr
 800a6a4:	d815      	bhi.n	800a6d2 <rshift+0x7e>
 800a6a6:	1a9a      	subs	r2, r3, r2
 800a6a8:	0092      	lsls	r2, r2, #2
 800a6aa:	3a04      	subs	r2, #4
 800a6ac:	3501      	adds	r5, #1
 800a6ae:	42ae      	cmp	r6, r5
 800a6b0:	bf38      	it	cc
 800a6b2:	2200      	movcc	r2, #0
 800a6b4:	18a3      	adds	r3, r4, r2
 800a6b6:	50a7      	str	r7, [r4, r2]
 800a6b8:	b107      	cbz	r7, 800a6bc <rshift+0x68>
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	1b1a      	subs	r2, r3, r4
 800a6be:	42a3      	cmp	r3, r4
 800a6c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6c4:	bf08      	it	eq
 800a6c6:	2300      	moveq	r3, #0
 800a6c8:	6102      	str	r2, [r0, #16]
 800a6ca:	bf08      	it	eq
 800a6cc:	6143      	streq	r3, [r0, #20]
 800a6ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6d2:	f8dc c000 	ldr.w	ip, [ip]
 800a6d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6da:	ea4c 0707 	orr.w	r7, ip, r7
 800a6de:	f849 7b04 	str.w	r7, [r9], #4
 800a6e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6e6:	40cf      	lsrs	r7, r1
 800a6e8:	e7da      	b.n	800a6a0 <rshift+0x4c>
 800a6ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800a6f2:	e7c3      	b.n	800a67c <rshift+0x28>
 800a6f4:	4623      	mov	r3, r4
 800a6f6:	e7e1      	b.n	800a6bc <rshift+0x68>

0800a6f8 <__hexdig_fun>:
 800a6f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a6fc:	2b09      	cmp	r3, #9
 800a6fe:	d802      	bhi.n	800a706 <__hexdig_fun+0xe>
 800a700:	3820      	subs	r0, #32
 800a702:	b2c0      	uxtb	r0, r0
 800a704:	4770      	bx	lr
 800a706:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a70a:	2b05      	cmp	r3, #5
 800a70c:	d801      	bhi.n	800a712 <__hexdig_fun+0x1a>
 800a70e:	3847      	subs	r0, #71	@ 0x47
 800a710:	e7f7      	b.n	800a702 <__hexdig_fun+0xa>
 800a712:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a716:	2b05      	cmp	r3, #5
 800a718:	d801      	bhi.n	800a71e <__hexdig_fun+0x26>
 800a71a:	3827      	subs	r0, #39	@ 0x27
 800a71c:	e7f1      	b.n	800a702 <__hexdig_fun+0xa>
 800a71e:	2000      	movs	r0, #0
 800a720:	4770      	bx	lr
	...

0800a724 <__gethex>:
 800a724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a728:	b085      	sub	sp, #20
 800a72a:	468a      	mov	sl, r1
 800a72c:	9302      	str	r3, [sp, #8]
 800a72e:	680b      	ldr	r3, [r1, #0]
 800a730:	9001      	str	r0, [sp, #4]
 800a732:	4690      	mov	r8, r2
 800a734:	1c9c      	adds	r4, r3, #2
 800a736:	46a1      	mov	r9, r4
 800a738:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a73c:	2830      	cmp	r0, #48	@ 0x30
 800a73e:	d0fa      	beq.n	800a736 <__gethex+0x12>
 800a740:	eba9 0303 	sub.w	r3, r9, r3
 800a744:	f1a3 0b02 	sub.w	fp, r3, #2
 800a748:	f7ff ffd6 	bl	800a6f8 <__hexdig_fun>
 800a74c:	4605      	mov	r5, r0
 800a74e:	2800      	cmp	r0, #0
 800a750:	d168      	bne.n	800a824 <__gethex+0x100>
 800a752:	49a0      	ldr	r1, [pc, #640]	@ (800a9d4 <__gethex+0x2b0>)
 800a754:	2201      	movs	r2, #1
 800a756:	4648      	mov	r0, r9
 800a758:	f7ff ff0e 	bl	800a578 <strncmp>
 800a75c:	4607      	mov	r7, r0
 800a75e:	2800      	cmp	r0, #0
 800a760:	d167      	bne.n	800a832 <__gethex+0x10e>
 800a762:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a766:	4626      	mov	r6, r4
 800a768:	f7ff ffc6 	bl	800a6f8 <__hexdig_fun>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d062      	beq.n	800a836 <__gethex+0x112>
 800a770:	4623      	mov	r3, r4
 800a772:	7818      	ldrb	r0, [r3, #0]
 800a774:	2830      	cmp	r0, #48	@ 0x30
 800a776:	4699      	mov	r9, r3
 800a778:	f103 0301 	add.w	r3, r3, #1
 800a77c:	d0f9      	beq.n	800a772 <__gethex+0x4e>
 800a77e:	f7ff ffbb 	bl	800a6f8 <__hexdig_fun>
 800a782:	fab0 f580 	clz	r5, r0
 800a786:	096d      	lsrs	r5, r5, #5
 800a788:	f04f 0b01 	mov.w	fp, #1
 800a78c:	464a      	mov	r2, r9
 800a78e:	4616      	mov	r6, r2
 800a790:	3201      	adds	r2, #1
 800a792:	7830      	ldrb	r0, [r6, #0]
 800a794:	f7ff ffb0 	bl	800a6f8 <__hexdig_fun>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d1f8      	bne.n	800a78e <__gethex+0x6a>
 800a79c:	498d      	ldr	r1, [pc, #564]	@ (800a9d4 <__gethex+0x2b0>)
 800a79e:	2201      	movs	r2, #1
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7ff fee9 	bl	800a578 <strncmp>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d13f      	bne.n	800a82a <__gethex+0x106>
 800a7aa:	b944      	cbnz	r4, 800a7be <__gethex+0x9a>
 800a7ac:	1c74      	adds	r4, r6, #1
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	4616      	mov	r6, r2
 800a7b2:	3201      	adds	r2, #1
 800a7b4:	7830      	ldrb	r0, [r6, #0]
 800a7b6:	f7ff ff9f 	bl	800a6f8 <__hexdig_fun>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d1f8      	bne.n	800a7b0 <__gethex+0x8c>
 800a7be:	1ba4      	subs	r4, r4, r6
 800a7c0:	00a7      	lsls	r7, r4, #2
 800a7c2:	7833      	ldrb	r3, [r6, #0]
 800a7c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a7c8:	2b50      	cmp	r3, #80	@ 0x50
 800a7ca:	d13e      	bne.n	800a84a <__gethex+0x126>
 800a7cc:	7873      	ldrb	r3, [r6, #1]
 800a7ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800a7d0:	d033      	beq.n	800a83a <__gethex+0x116>
 800a7d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a7d4:	d034      	beq.n	800a840 <__gethex+0x11c>
 800a7d6:	1c71      	adds	r1, r6, #1
 800a7d8:	2400      	movs	r4, #0
 800a7da:	7808      	ldrb	r0, [r1, #0]
 800a7dc:	f7ff ff8c 	bl	800a6f8 <__hexdig_fun>
 800a7e0:	1e43      	subs	r3, r0, #1
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b18      	cmp	r3, #24
 800a7e6:	d830      	bhi.n	800a84a <__gethex+0x126>
 800a7e8:	f1a0 0210 	sub.w	r2, r0, #16
 800a7ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a7f0:	f7ff ff82 	bl	800a6f8 <__hexdig_fun>
 800a7f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a7f8:	fa5f fc8c 	uxtb.w	ip, ip
 800a7fc:	f1bc 0f18 	cmp.w	ip, #24
 800a800:	f04f 030a 	mov.w	r3, #10
 800a804:	d91e      	bls.n	800a844 <__gethex+0x120>
 800a806:	b104      	cbz	r4, 800a80a <__gethex+0xe6>
 800a808:	4252      	negs	r2, r2
 800a80a:	4417      	add	r7, r2
 800a80c:	f8ca 1000 	str.w	r1, [sl]
 800a810:	b1ed      	cbz	r5, 800a84e <__gethex+0x12a>
 800a812:	f1bb 0f00 	cmp.w	fp, #0
 800a816:	bf0c      	ite	eq
 800a818:	2506      	moveq	r5, #6
 800a81a:	2500      	movne	r5, #0
 800a81c:	4628      	mov	r0, r5
 800a81e:	b005      	add	sp, #20
 800a820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a824:	2500      	movs	r5, #0
 800a826:	462c      	mov	r4, r5
 800a828:	e7b0      	b.n	800a78c <__gethex+0x68>
 800a82a:	2c00      	cmp	r4, #0
 800a82c:	d1c7      	bne.n	800a7be <__gethex+0x9a>
 800a82e:	4627      	mov	r7, r4
 800a830:	e7c7      	b.n	800a7c2 <__gethex+0x9e>
 800a832:	464e      	mov	r6, r9
 800a834:	462f      	mov	r7, r5
 800a836:	2501      	movs	r5, #1
 800a838:	e7c3      	b.n	800a7c2 <__gethex+0x9e>
 800a83a:	2400      	movs	r4, #0
 800a83c:	1cb1      	adds	r1, r6, #2
 800a83e:	e7cc      	b.n	800a7da <__gethex+0xb6>
 800a840:	2401      	movs	r4, #1
 800a842:	e7fb      	b.n	800a83c <__gethex+0x118>
 800a844:	fb03 0002 	mla	r0, r3, r2, r0
 800a848:	e7ce      	b.n	800a7e8 <__gethex+0xc4>
 800a84a:	4631      	mov	r1, r6
 800a84c:	e7de      	b.n	800a80c <__gethex+0xe8>
 800a84e:	eba6 0309 	sub.w	r3, r6, r9
 800a852:	3b01      	subs	r3, #1
 800a854:	4629      	mov	r1, r5
 800a856:	2b07      	cmp	r3, #7
 800a858:	dc0a      	bgt.n	800a870 <__gethex+0x14c>
 800a85a:	9801      	ldr	r0, [sp, #4]
 800a85c:	f7fd ff92 	bl	8008784 <_Balloc>
 800a860:	4604      	mov	r4, r0
 800a862:	b940      	cbnz	r0, 800a876 <__gethex+0x152>
 800a864:	4b5c      	ldr	r3, [pc, #368]	@ (800a9d8 <__gethex+0x2b4>)
 800a866:	4602      	mov	r2, r0
 800a868:	21e4      	movs	r1, #228	@ 0xe4
 800a86a:	485c      	ldr	r0, [pc, #368]	@ (800a9dc <__gethex+0x2b8>)
 800a86c:	f7ff fec0 	bl	800a5f0 <__assert_func>
 800a870:	3101      	adds	r1, #1
 800a872:	105b      	asrs	r3, r3, #1
 800a874:	e7ef      	b.n	800a856 <__gethex+0x132>
 800a876:	f100 0a14 	add.w	sl, r0, #20
 800a87a:	2300      	movs	r3, #0
 800a87c:	4655      	mov	r5, sl
 800a87e:	469b      	mov	fp, r3
 800a880:	45b1      	cmp	r9, r6
 800a882:	d337      	bcc.n	800a8f4 <__gethex+0x1d0>
 800a884:	f845 bb04 	str.w	fp, [r5], #4
 800a888:	eba5 050a 	sub.w	r5, r5, sl
 800a88c:	10ad      	asrs	r5, r5, #2
 800a88e:	6125      	str	r5, [r4, #16]
 800a890:	4658      	mov	r0, fp
 800a892:	f7fe f869 	bl	8008968 <__hi0bits>
 800a896:	016d      	lsls	r5, r5, #5
 800a898:	f8d8 6000 	ldr.w	r6, [r8]
 800a89c:	1a2d      	subs	r5, r5, r0
 800a89e:	42b5      	cmp	r5, r6
 800a8a0:	dd54      	ble.n	800a94c <__gethex+0x228>
 800a8a2:	1bad      	subs	r5, r5, r6
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7fe fbfd 	bl	80090a6 <__any_on>
 800a8ac:	4681      	mov	r9, r0
 800a8ae:	b178      	cbz	r0, 800a8d0 <__gethex+0x1ac>
 800a8b0:	1e6b      	subs	r3, r5, #1
 800a8b2:	1159      	asrs	r1, r3, #5
 800a8b4:	f003 021f 	and.w	r2, r3, #31
 800a8b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a8bc:	f04f 0901 	mov.w	r9, #1
 800a8c0:	fa09 f202 	lsl.w	r2, r9, r2
 800a8c4:	420a      	tst	r2, r1
 800a8c6:	d003      	beq.n	800a8d0 <__gethex+0x1ac>
 800a8c8:	454b      	cmp	r3, r9
 800a8ca:	dc36      	bgt.n	800a93a <__gethex+0x216>
 800a8cc:	f04f 0902 	mov.w	r9, #2
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f7ff febe 	bl	800a654 <rshift>
 800a8d8:	442f      	add	r7, r5
 800a8da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8de:	42bb      	cmp	r3, r7
 800a8e0:	da42      	bge.n	800a968 <__gethex+0x244>
 800a8e2:	9801      	ldr	r0, [sp, #4]
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	f7fd ff8d 	bl	8008804 <_Bfree>
 800a8ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	25a3      	movs	r5, #163	@ 0xa3
 800a8f2:	e793      	b.n	800a81c <__gethex+0xf8>
 800a8f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a8f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a8fa:	d012      	beq.n	800a922 <__gethex+0x1fe>
 800a8fc:	2b20      	cmp	r3, #32
 800a8fe:	d104      	bne.n	800a90a <__gethex+0x1e6>
 800a900:	f845 bb04 	str.w	fp, [r5], #4
 800a904:	f04f 0b00 	mov.w	fp, #0
 800a908:	465b      	mov	r3, fp
 800a90a:	7830      	ldrb	r0, [r6, #0]
 800a90c:	9303      	str	r3, [sp, #12]
 800a90e:	f7ff fef3 	bl	800a6f8 <__hexdig_fun>
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	f000 000f 	and.w	r0, r0, #15
 800a918:	4098      	lsls	r0, r3
 800a91a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a91e:	3304      	adds	r3, #4
 800a920:	e7ae      	b.n	800a880 <__gethex+0x15c>
 800a922:	45b1      	cmp	r9, r6
 800a924:	d8ea      	bhi.n	800a8fc <__gethex+0x1d8>
 800a926:	492b      	ldr	r1, [pc, #172]	@ (800a9d4 <__gethex+0x2b0>)
 800a928:	9303      	str	r3, [sp, #12]
 800a92a:	2201      	movs	r2, #1
 800a92c:	4630      	mov	r0, r6
 800a92e:	f7ff fe23 	bl	800a578 <strncmp>
 800a932:	9b03      	ldr	r3, [sp, #12]
 800a934:	2800      	cmp	r0, #0
 800a936:	d1e1      	bne.n	800a8fc <__gethex+0x1d8>
 800a938:	e7a2      	b.n	800a880 <__gethex+0x15c>
 800a93a:	1ea9      	subs	r1, r5, #2
 800a93c:	4620      	mov	r0, r4
 800a93e:	f7fe fbb2 	bl	80090a6 <__any_on>
 800a942:	2800      	cmp	r0, #0
 800a944:	d0c2      	beq.n	800a8cc <__gethex+0x1a8>
 800a946:	f04f 0903 	mov.w	r9, #3
 800a94a:	e7c1      	b.n	800a8d0 <__gethex+0x1ac>
 800a94c:	da09      	bge.n	800a962 <__gethex+0x23e>
 800a94e:	1b75      	subs	r5, r6, r5
 800a950:	4621      	mov	r1, r4
 800a952:	9801      	ldr	r0, [sp, #4]
 800a954:	462a      	mov	r2, r5
 800a956:	f7fe f96d 	bl	8008c34 <__lshift>
 800a95a:	1b7f      	subs	r7, r7, r5
 800a95c:	4604      	mov	r4, r0
 800a95e:	f100 0a14 	add.w	sl, r0, #20
 800a962:	f04f 0900 	mov.w	r9, #0
 800a966:	e7b8      	b.n	800a8da <__gethex+0x1b6>
 800a968:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a96c:	42bd      	cmp	r5, r7
 800a96e:	dd6f      	ble.n	800aa50 <__gethex+0x32c>
 800a970:	1bed      	subs	r5, r5, r7
 800a972:	42ae      	cmp	r6, r5
 800a974:	dc34      	bgt.n	800a9e0 <__gethex+0x2bc>
 800a976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d022      	beq.n	800a9c4 <__gethex+0x2a0>
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d024      	beq.n	800a9cc <__gethex+0x2a8>
 800a982:	2b01      	cmp	r3, #1
 800a984:	d115      	bne.n	800a9b2 <__gethex+0x28e>
 800a986:	42ae      	cmp	r6, r5
 800a988:	d113      	bne.n	800a9b2 <__gethex+0x28e>
 800a98a:	2e01      	cmp	r6, #1
 800a98c:	d10b      	bne.n	800a9a6 <__gethex+0x282>
 800a98e:	9a02      	ldr	r2, [sp, #8]
 800a990:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a994:	6013      	str	r3, [r2, #0]
 800a996:	2301      	movs	r3, #1
 800a998:	6123      	str	r3, [r4, #16]
 800a99a:	f8ca 3000 	str.w	r3, [sl]
 800a99e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9a0:	2562      	movs	r5, #98	@ 0x62
 800a9a2:	601c      	str	r4, [r3, #0]
 800a9a4:	e73a      	b.n	800a81c <__gethex+0xf8>
 800a9a6:	1e71      	subs	r1, r6, #1
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f7fe fb7c 	bl	80090a6 <__any_on>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d1ed      	bne.n	800a98e <__gethex+0x26a>
 800a9b2:	9801      	ldr	r0, [sp, #4]
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	f7fd ff25 	bl	8008804 <_Bfree>
 800a9ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	2550      	movs	r5, #80	@ 0x50
 800a9c2:	e72b      	b.n	800a81c <__gethex+0xf8>
 800a9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1f3      	bne.n	800a9b2 <__gethex+0x28e>
 800a9ca:	e7e0      	b.n	800a98e <__gethex+0x26a>
 800a9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1dd      	bne.n	800a98e <__gethex+0x26a>
 800a9d2:	e7ee      	b.n	800a9b2 <__gethex+0x28e>
 800a9d4:	0800bfa0 	.word	0x0800bfa0
 800a9d8:	0800be35 	.word	0x0800be35
 800a9dc:	0800c14e 	.word	0x0800c14e
 800a9e0:	1e6f      	subs	r7, r5, #1
 800a9e2:	f1b9 0f00 	cmp.w	r9, #0
 800a9e6:	d130      	bne.n	800aa4a <__gethex+0x326>
 800a9e8:	b127      	cbz	r7, 800a9f4 <__gethex+0x2d0>
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7fe fb5a 	bl	80090a6 <__any_on>
 800a9f2:	4681      	mov	r9, r0
 800a9f4:	117a      	asrs	r2, r7, #5
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a9fc:	f007 071f 	and.w	r7, r7, #31
 800aa00:	40bb      	lsls	r3, r7
 800aa02:	4213      	tst	r3, r2
 800aa04:	4629      	mov	r1, r5
 800aa06:	4620      	mov	r0, r4
 800aa08:	bf18      	it	ne
 800aa0a:	f049 0902 	orrne.w	r9, r9, #2
 800aa0e:	f7ff fe21 	bl	800a654 <rshift>
 800aa12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aa16:	1b76      	subs	r6, r6, r5
 800aa18:	2502      	movs	r5, #2
 800aa1a:	f1b9 0f00 	cmp.w	r9, #0
 800aa1e:	d047      	beq.n	800aab0 <__gethex+0x38c>
 800aa20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d015      	beq.n	800aa54 <__gethex+0x330>
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d017      	beq.n	800aa5c <__gethex+0x338>
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d109      	bne.n	800aa44 <__gethex+0x320>
 800aa30:	f019 0f02 	tst.w	r9, #2
 800aa34:	d006      	beq.n	800aa44 <__gethex+0x320>
 800aa36:	f8da 3000 	ldr.w	r3, [sl]
 800aa3a:	ea49 0903 	orr.w	r9, r9, r3
 800aa3e:	f019 0f01 	tst.w	r9, #1
 800aa42:	d10e      	bne.n	800aa62 <__gethex+0x33e>
 800aa44:	f045 0510 	orr.w	r5, r5, #16
 800aa48:	e032      	b.n	800aab0 <__gethex+0x38c>
 800aa4a:	f04f 0901 	mov.w	r9, #1
 800aa4e:	e7d1      	b.n	800a9f4 <__gethex+0x2d0>
 800aa50:	2501      	movs	r5, #1
 800aa52:	e7e2      	b.n	800aa1a <__gethex+0x2f6>
 800aa54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa56:	f1c3 0301 	rsb	r3, r3, #1
 800aa5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0f0      	beq.n	800aa44 <__gethex+0x320>
 800aa62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aa66:	f104 0314 	add.w	r3, r4, #20
 800aa6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aa6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aa72:	f04f 0c00 	mov.w	ip, #0
 800aa76:	4618      	mov	r0, r3
 800aa78:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa80:	d01b      	beq.n	800aaba <__gethex+0x396>
 800aa82:	3201      	adds	r2, #1
 800aa84:	6002      	str	r2, [r0, #0]
 800aa86:	2d02      	cmp	r5, #2
 800aa88:	f104 0314 	add.w	r3, r4, #20
 800aa8c:	d13c      	bne.n	800ab08 <__gethex+0x3e4>
 800aa8e:	f8d8 2000 	ldr.w	r2, [r8]
 800aa92:	3a01      	subs	r2, #1
 800aa94:	42b2      	cmp	r2, r6
 800aa96:	d109      	bne.n	800aaac <__gethex+0x388>
 800aa98:	1171      	asrs	r1, r6, #5
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaa0:	f006 061f 	and.w	r6, r6, #31
 800aaa4:	fa02 f606 	lsl.w	r6, r2, r6
 800aaa8:	421e      	tst	r6, r3
 800aaaa:	d13a      	bne.n	800ab22 <__gethex+0x3fe>
 800aaac:	f045 0520 	orr.w	r5, r5, #32
 800aab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aab2:	601c      	str	r4, [r3, #0]
 800aab4:	9b02      	ldr	r3, [sp, #8]
 800aab6:	601f      	str	r7, [r3, #0]
 800aab8:	e6b0      	b.n	800a81c <__gethex+0xf8>
 800aaba:	4299      	cmp	r1, r3
 800aabc:	f843 cc04 	str.w	ip, [r3, #-4]
 800aac0:	d8d9      	bhi.n	800aa76 <__gethex+0x352>
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	459b      	cmp	fp, r3
 800aac6:	db17      	blt.n	800aaf8 <__gethex+0x3d4>
 800aac8:	6861      	ldr	r1, [r4, #4]
 800aaca:	9801      	ldr	r0, [sp, #4]
 800aacc:	3101      	adds	r1, #1
 800aace:	f7fd fe59 	bl	8008784 <_Balloc>
 800aad2:	4681      	mov	r9, r0
 800aad4:	b918      	cbnz	r0, 800aade <__gethex+0x3ba>
 800aad6:	4b1a      	ldr	r3, [pc, #104]	@ (800ab40 <__gethex+0x41c>)
 800aad8:	4602      	mov	r2, r0
 800aada:	2184      	movs	r1, #132	@ 0x84
 800aadc:	e6c5      	b.n	800a86a <__gethex+0x146>
 800aade:	6922      	ldr	r2, [r4, #16]
 800aae0:	3202      	adds	r2, #2
 800aae2:	f104 010c 	add.w	r1, r4, #12
 800aae6:	0092      	lsls	r2, r2, #2
 800aae8:	300c      	adds	r0, #12
 800aaea:	f7fc ffa0 	bl	8007a2e <memcpy>
 800aaee:	4621      	mov	r1, r4
 800aaf0:	9801      	ldr	r0, [sp, #4]
 800aaf2:	f7fd fe87 	bl	8008804 <_Bfree>
 800aaf6:	464c      	mov	r4, r9
 800aaf8:	6923      	ldr	r3, [r4, #16]
 800aafa:	1c5a      	adds	r2, r3, #1
 800aafc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab00:	6122      	str	r2, [r4, #16]
 800ab02:	2201      	movs	r2, #1
 800ab04:	615a      	str	r2, [r3, #20]
 800ab06:	e7be      	b.n	800aa86 <__gethex+0x362>
 800ab08:	6922      	ldr	r2, [r4, #16]
 800ab0a:	455a      	cmp	r2, fp
 800ab0c:	dd0b      	ble.n	800ab26 <__gethex+0x402>
 800ab0e:	2101      	movs	r1, #1
 800ab10:	4620      	mov	r0, r4
 800ab12:	f7ff fd9f 	bl	800a654 <rshift>
 800ab16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab1a:	3701      	adds	r7, #1
 800ab1c:	42bb      	cmp	r3, r7
 800ab1e:	f6ff aee0 	blt.w	800a8e2 <__gethex+0x1be>
 800ab22:	2501      	movs	r5, #1
 800ab24:	e7c2      	b.n	800aaac <__gethex+0x388>
 800ab26:	f016 061f 	ands.w	r6, r6, #31
 800ab2a:	d0fa      	beq.n	800ab22 <__gethex+0x3fe>
 800ab2c:	4453      	add	r3, sl
 800ab2e:	f1c6 0620 	rsb	r6, r6, #32
 800ab32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab36:	f7fd ff17 	bl	8008968 <__hi0bits>
 800ab3a:	42b0      	cmp	r0, r6
 800ab3c:	dbe7      	blt.n	800ab0e <__gethex+0x3ea>
 800ab3e:	e7f0      	b.n	800ab22 <__gethex+0x3fe>
 800ab40:	0800be35 	.word	0x0800be35

0800ab44 <L_shift>:
 800ab44:	f1c2 0208 	rsb	r2, r2, #8
 800ab48:	0092      	lsls	r2, r2, #2
 800ab4a:	b570      	push	{r4, r5, r6, lr}
 800ab4c:	f1c2 0620 	rsb	r6, r2, #32
 800ab50:	6843      	ldr	r3, [r0, #4]
 800ab52:	6804      	ldr	r4, [r0, #0]
 800ab54:	fa03 f506 	lsl.w	r5, r3, r6
 800ab58:	432c      	orrs	r4, r5
 800ab5a:	40d3      	lsrs	r3, r2
 800ab5c:	6004      	str	r4, [r0, #0]
 800ab5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab62:	4288      	cmp	r0, r1
 800ab64:	d3f4      	bcc.n	800ab50 <L_shift+0xc>
 800ab66:	bd70      	pop	{r4, r5, r6, pc}

0800ab68 <__match>:
 800ab68:	b530      	push	{r4, r5, lr}
 800ab6a:	6803      	ldr	r3, [r0, #0]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab72:	b914      	cbnz	r4, 800ab7a <__match+0x12>
 800ab74:	6003      	str	r3, [r0, #0]
 800ab76:	2001      	movs	r0, #1
 800ab78:	bd30      	pop	{r4, r5, pc}
 800ab7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ab82:	2d19      	cmp	r5, #25
 800ab84:	bf98      	it	ls
 800ab86:	3220      	addls	r2, #32
 800ab88:	42a2      	cmp	r2, r4
 800ab8a:	d0f0      	beq.n	800ab6e <__match+0x6>
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	e7f3      	b.n	800ab78 <__match+0x10>

0800ab90 <__hexnan>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	680b      	ldr	r3, [r1, #0]
 800ab96:	6801      	ldr	r1, [r0, #0]
 800ab98:	115e      	asrs	r6, r3, #5
 800ab9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab9e:	f013 031f 	ands.w	r3, r3, #31
 800aba2:	b087      	sub	sp, #28
 800aba4:	bf18      	it	ne
 800aba6:	3604      	addne	r6, #4
 800aba8:	2500      	movs	r5, #0
 800abaa:	1f37      	subs	r7, r6, #4
 800abac:	4682      	mov	sl, r0
 800abae:	4690      	mov	r8, r2
 800abb0:	9301      	str	r3, [sp, #4]
 800abb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800abb6:	46b9      	mov	r9, r7
 800abb8:	463c      	mov	r4, r7
 800abba:	9502      	str	r5, [sp, #8]
 800abbc:	46ab      	mov	fp, r5
 800abbe:	784a      	ldrb	r2, [r1, #1]
 800abc0:	1c4b      	adds	r3, r1, #1
 800abc2:	9303      	str	r3, [sp, #12]
 800abc4:	b342      	cbz	r2, 800ac18 <__hexnan+0x88>
 800abc6:	4610      	mov	r0, r2
 800abc8:	9105      	str	r1, [sp, #20]
 800abca:	9204      	str	r2, [sp, #16]
 800abcc:	f7ff fd94 	bl	800a6f8 <__hexdig_fun>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d151      	bne.n	800ac78 <__hexnan+0xe8>
 800abd4:	9a04      	ldr	r2, [sp, #16]
 800abd6:	9905      	ldr	r1, [sp, #20]
 800abd8:	2a20      	cmp	r2, #32
 800abda:	d818      	bhi.n	800ac0e <__hexnan+0x7e>
 800abdc:	9b02      	ldr	r3, [sp, #8]
 800abde:	459b      	cmp	fp, r3
 800abe0:	dd13      	ble.n	800ac0a <__hexnan+0x7a>
 800abe2:	454c      	cmp	r4, r9
 800abe4:	d206      	bcs.n	800abf4 <__hexnan+0x64>
 800abe6:	2d07      	cmp	r5, #7
 800abe8:	dc04      	bgt.n	800abf4 <__hexnan+0x64>
 800abea:	462a      	mov	r2, r5
 800abec:	4649      	mov	r1, r9
 800abee:	4620      	mov	r0, r4
 800abf0:	f7ff ffa8 	bl	800ab44 <L_shift>
 800abf4:	4544      	cmp	r4, r8
 800abf6:	d952      	bls.n	800ac9e <__hexnan+0x10e>
 800abf8:	2300      	movs	r3, #0
 800abfa:	f1a4 0904 	sub.w	r9, r4, #4
 800abfe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac02:	f8cd b008 	str.w	fp, [sp, #8]
 800ac06:	464c      	mov	r4, r9
 800ac08:	461d      	mov	r5, r3
 800ac0a:	9903      	ldr	r1, [sp, #12]
 800ac0c:	e7d7      	b.n	800abbe <__hexnan+0x2e>
 800ac0e:	2a29      	cmp	r2, #41	@ 0x29
 800ac10:	d157      	bne.n	800acc2 <__hexnan+0x132>
 800ac12:	3102      	adds	r1, #2
 800ac14:	f8ca 1000 	str.w	r1, [sl]
 800ac18:	f1bb 0f00 	cmp.w	fp, #0
 800ac1c:	d051      	beq.n	800acc2 <__hexnan+0x132>
 800ac1e:	454c      	cmp	r4, r9
 800ac20:	d206      	bcs.n	800ac30 <__hexnan+0xa0>
 800ac22:	2d07      	cmp	r5, #7
 800ac24:	dc04      	bgt.n	800ac30 <__hexnan+0xa0>
 800ac26:	462a      	mov	r2, r5
 800ac28:	4649      	mov	r1, r9
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f7ff ff8a 	bl	800ab44 <L_shift>
 800ac30:	4544      	cmp	r4, r8
 800ac32:	d936      	bls.n	800aca2 <__hexnan+0x112>
 800ac34:	f1a8 0204 	sub.w	r2, r8, #4
 800ac38:	4623      	mov	r3, r4
 800ac3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac42:	429f      	cmp	r7, r3
 800ac44:	d2f9      	bcs.n	800ac3a <__hexnan+0xaa>
 800ac46:	1b3b      	subs	r3, r7, r4
 800ac48:	f023 0303 	bic.w	r3, r3, #3
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	3401      	adds	r4, #1
 800ac50:	3e03      	subs	r6, #3
 800ac52:	42b4      	cmp	r4, r6
 800ac54:	bf88      	it	hi
 800ac56:	2304      	movhi	r3, #4
 800ac58:	4443      	add	r3, r8
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f843 2b04 	str.w	r2, [r3], #4
 800ac60:	429f      	cmp	r7, r3
 800ac62:	d2fb      	bcs.n	800ac5c <__hexnan+0xcc>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	b91b      	cbnz	r3, 800ac70 <__hexnan+0xe0>
 800ac68:	4547      	cmp	r7, r8
 800ac6a:	d128      	bne.n	800acbe <__hexnan+0x12e>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	603b      	str	r3, [r7, #0]
 800ac70:	2005      	movs	r0, #5
 800ac72:	b007      	add	sp, #28
 800ac74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac78:	3501      	adds	r5, #1
 800ac7a:	2d08      	cmp	r5, #8
 800ac7c:	f10b 0b01 	add.w	fp, fp, #1
 800ac80:	dd06      	ble.n	800ac90 <__hexnan+0x100>
 800ac82:	4544      	cmp	r4, r8
 800ac84:	d9c1      	bls.n	800ac0a <__hexnan+0x7a>
 800ac86:	2300      	movs	r3, #0
 800ac88:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac8c:	2501      	movs	r5, #1
 800ac8e:	3c04      	subs	r4, #4
 800ac90:	6822      	ldr	r2, [r4, #0]
 800ac92:	f000 000f 	and.w	r0, r0, #15
 800ac96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac9a:	6020      	str	r0, [r4, #0]
 800ac9c:	e7b5      	b.n	800ac0a <__hexnan+0x7a>
 800ac9e:	2508      	movs	r5, #8
 800aca0:	e7b3      	b.n	800ac0a <__hexnan+0x7a>
 800aca2:	9b01      	ldr	r3, [sp, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0dd      	beq.n	800ac64 <__hexnan+0xd4>
 800aca8:	f1c3 0320 	rsb	r3, r3, #32
 800acac:	f04f 32ff 	mov.w	r2, #4294967295
 800acb0:	40da      	lsrs	r2, r3
 800acb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800acb6:	4013      	ands	r3, r2
 800acb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800acbc:	e7d2      	b.n	800ac64 <__hexnan+0xd4>
 800acbe:	3f04      	subs	r7, #4
 800acc0:	e7d0      	b.n	800ac64 <__hexnan+0xd4>
 800acc2:	2004      	movs	r0, #4
 800acc4:	e7d5      	b.n	800ac72 <__hexnan+0xe2>

0800acc6 <__ascii_mbtowc>:
 800acc6:	b082      	sub	sp, #8
 800acc8:	b901      	cbnz	r1, 800accc <__ascii_mbtowc+0x6>
 800acca:	a901      	add	r1, sp, #4
 800accc:	b142      	cbz	r2, 800ace0 <__ascii_mbtowc+0x1a>
 800acce:	b14b      	cbz	r3, 800ace4 <__ascii_mbtowc+0x1e>
 800acd0:	7813      	ldrb	r3, [r2, #0]
 800acd2:	600b      	str	r3, [r1, #0]
 800acd4:	7812      	ldrb	r2, [r2, #0]
 800acd6:	1e10      	subs	r0, r2, #0
 800acd8:	bf18      	it	ne
 800acda:	2001      	movne	r0, #1
 800acdc:	b002      	add	sp, #8
 800acde:	4770      	bx	lr
 800ace0:	4610      	mov	r0, r2
 800ace2:	e7fb      	b.n	800acdc <__ascii_mbtowc+0x16>
 800ace4:	f06f 0001 	mvn.w	r0, #1
 800ace8:	e7f8      	b.n	800acdc <__ascii_mbtowc+0x16>

0800acea <_realloc_r>:
 800acea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acee:	4680      	mov	r8, r0
 800acf0:	4615      	mov	r5, r2
 800acf2:	460c      	mov	r4, r1
 800acf4:	b921      	cbnz	r1, 800ad00 <_realloc_r+0x16>
 800acf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acfa:	4611      	mov	r1, r2
 800acfc:	f7fb bce6 	b.w	80066cc <_malloc_r>
 800ad00:	b92a      	cbnz	r2, 800ad0e <_realloc_r+0x24>
 800ad02:	f7fd fcf5 	bl	80086f0 <_free_r>
 800ad06:	2400      	movs	r4, #0
 800ad08:	4620      	mov	r0, r4
 800ad0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad0e:	f000 f840 	bl	800ad92 <_malloc_usable_size_r>
 800ad12:	4285      	cmp	r5, r0
 800ad14:	4606      	mov	r6, r0
 800ad16:	d802      	bhi.n	800ad1e <_realloc_r+0x34>
 800ad18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad1c:	d8f4      	bhi.n	800ad08 <_realloc_r+0x1e>
 800ad1e:	4629      	mov	r1, r5
 800ad20:	4640      	mov	r0, r8
 800ad22:	f7fb fcd3 	bl	80066cc <_malloc_r>
 800ad26:	4607      	mov	r7, r0
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d0ec      	beq.n	800ad06 <_realloc_r+0x1c>
 800ad2c:	42b5      	cmp	r5, r6
 800ad2e:	462a      	mov	r2, r5
 800ad30:	4621      	mov	r1, r4
 800ad32:	bf28      	it	cs
 800ad34:	4632      	movcs	r2, r6
 800ad36:	f7fc fe7a 	bl	8007a2e <memcpy>
 800ad3a:	4621      	mov	r1, r4
 800ad3c:	4640      	mov	r0, r8
 800ad3e:	f7fd fcd7 	bl	80086f0 <_free_r>
 800ad42:	463c      	mov	r4, r7
 800ad44:	e7e0      	b.n	800ad08 <_realloc_r+0x1e>

0800ad46 <__ascii_wctomb>:
 800ad46:	4603      	mov	r3, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	b141      	cbz	r1, 800ad5e <__ascii_wctomb+0x18>
 800ad4c:	2aff      	cmp	r2, #255	@ 0xff
 800ad4e:	d904      	bls.n	800ad5a <__ascii_wctomb+0x14>
 800ad50:	228a      	movs	r2, #138	@ 0x8a
 800ad52:	601a      	str	r2, [r3, #0]
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	4770      	bx	lr
 800ad5a:	700a      	strb	r2, [r1, #0]
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	4770      	bx	lr

0800ad60 <fiprintf>:
 800ad60:	b40e      	push	{r1, r2, r3}
 800ad62:	b503      	push	{r0, r1, lr}
 800ad64:	4601      	mov	r1, r0
 800ad66:	ab03      	add	r3, sp, #12
 800ad68:	4805      	ldr	r0, [pc, #20]	@ (800ad80 <fiprintf+0x20>)
 800ad6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6e:	6800      	ldr	r0, [r0, #0]
 800ad70:	9301      	str	r3, [sp, #4]
 800ad72:	f7ff f9c1 	bl	800a0f8 <_vfiprintf_r>
 800ad76:	b002      	add	sp, #8
 800ad78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad7c:	b003      	add	sp, #12
 800ad7e:	4770      	bx	lr
 800ad80:	20000020 	.word	0x20000020

0800ad84 <abort>:
 800ad84:	b508      	push	{r3, lr}
 800ad86:	2006      	movs	r0, #6
 800ad88:	f000 f834 	bl	800adf4 <raise>
 800ad8c:	2001      	movs	r0, #1
 800ad8e:	f7f6 fd50 	bl	8001832 <_exit>

0800ad92 <_malloc_usable_size_r>:
 800ad92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad96:	1f18      	subs	r0, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	bfbc      	itt	lt
 800ad9c:	580b      	ldrlt	r3, [r1, r0]
 800ad9e:	18c0      	addlt	r0, r0, r3
 800ada0:	4770      	bx	lr

0800ada2 <_raise_r>:
 800ada2:	291f      	cmp	r1, #31
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4605      	mov	r5, r0
 800ada8:	460c      	mov	r4, r1
 800adaa:	d904      	bls.n	800adb6 <_raise_r+0x14>
 800adac:	2316      	movs	r3, #22
 800adae:	6003      	str	r3, [r0, #0]
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295
 800adb4:	bd38      	pop	{r3, r4, r5, pc}
 800adb6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800adb8:	b112      	cbz	r2, 800adc0 <_raise_r+0x1e>
 800adba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adbe:	b94b      	cbnz	r3, 800add4 <_raise_r+0x32>
 800adc0:	4628      	mov	r0, r5
 800adc2:	f000 f831 	bl	800ae28 <_getpid_r>
 800adc6:	4622      	mov	r2, r4
 800adc8:	4601      	mov	r1, r0
 800adca:	4628      	mov	r0, r5
 800adcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add0:	f000 b818 	b.w	800ae04 <_kill_r>
 800add4:	2b01      	cmp	r3, #1
 800add6:	d00a      	beq.n	800adee <_raise_r+0x4c>
 800add8:	1c59      	adds	r1, r3, #1
 800adda:	d103      	bne.n	800ade4 <_raise_r+0x42>
 800addc:	2316      	movs	r3, #22
 800adde:	6003      	str	r3, [r0, #0]
 800ade0:	2001      	movs	r0, #1
 800ade2:	e7e7      	b.n	800adb4 <_raise_r+0x12>
 800ade4:	2100      	movs	r1, #0
 800ade6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800adea:	4620      	mov	r0, r4
 800adec:	4798      	blx	r3
 800adee:	2000      	movs	r0, #0
 800adf0:	e7e0      	b.n	800adb4 <_raise_r+0x12>
	...

0800adf4 <raise>:
 800adf4:	4b02      	ldr	r3, [pc, #8]	@ (800ae00 <raise+0xc>)
 800adf6:	4601      	mov	r1, r0
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	f7ff bfd2 	b.w	800ada2 <_raise_r>
 800adfe:	bf00      	nop
 800ae00:	20000020 	.word	0x20000020

0800ae04 <_kill_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d07      	ldr	r5, [pc, #28]	@ (800ae24 <_kill_r+0x20>)
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	4611      	mov	r1, r2
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	f7f6 fcfe 	bl	8001812 <_kill>
 800ae16:	1c43      	adds	r3, r0, #1
 800ae18:	d102      	bne.n	800ae20 <_kill_r+0x1c>
 800ae1a:	682b      	ldr	r3, [r5, #0]
 800ae1c:	b103      	cbz	r3, 800ae20 <_kill_r+0x1c>
 800ae1e:	6023      	str	r3, [r4, #0]
 800ae20:	bd38      	pop	{r3, r4, r5, pc}
 800ae22:	bf00      	nop
 800ae24:	2000050c 	.word	0x2000050c

0800ae28 <_getpid_r>:
 800ae28:	f7f6 bceb 	b.w	8001802 <_getpid>

0800ae2c <_init>:
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	bf00      	nop
 800ae30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae32:	bc08      	pop	{r3}
 800ae34:	469e      	mov	lr, r3
 800ae36:	4770      	bx	lr

0800ae38 <_fini>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	bf00      	nop
 800ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3e:	bc08      	pop	{r3}
 800ae40:	469e      	mov	lr, r3
 800ae42:	4770      	bx	lr
