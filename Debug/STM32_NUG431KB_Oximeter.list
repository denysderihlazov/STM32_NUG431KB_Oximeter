
STM32_NUG431KB_Oximeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e68  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a60  08006048  08006048  00007048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa8  08008aa8  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa8  08008aa8  00009aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab0  08008ab0  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab0  08008ab0  00009ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ab4  08008ab4  00009ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008ab8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000078  08008b30  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08008b30  0000a3a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ab5  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e60  00000000  00000000  0001fb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  000229c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8d  00000000  00000000  00023de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020496  00000000  00000000  00024d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182a3  00000000  00000000  00045203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb132  00000000  00000000  0005d4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001285d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c64  00000000  00000000  0012861c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0012e280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006030 	.word	0x08006030

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08006030 	.word	0x08006030

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <initLCD>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Initialize LCD IPS 1.47"
void initLCD()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	LCD_1IN47_SetBackLight(1000);
 80005b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b8:	f004 fd9c 	bl	80050f4 <LCD_1IN47_SetBackLight>
	LCD_1IN47_Init(VERTICAL);
 80005bc:	2001      	movs	r0, #1
 80005be:	f004 fca7 	bl	8004f10 <LCD_1IN47_Init>
	LCD_1IN47_Clear(WHITE);
 80005c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80005c6:	f004 fd43 	bl	8005050 <LCD_1IN47_Clear>
//	Paint_DrawRectangle(0, 0, 172, 50, WHITE, 1, 1);

	// Set screen perspective as VERTICAL
	Paint_NewImage(LCD_1IN47_HEIGHT,LCD_1IN47_WIDTH, ROTATE_90, WHITE);
 80005ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005ce:	225a      	movs	r2, #90	@ 0x5a
 80005d0:	21ac      	movs	r1, #172	@ 0xac
 80005d2:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80005d6:	f004 f911 	bl	80047fc <Paint_NewImage>

	Paint_SetClearFuntion(LCD_1IN47_Clear);
 80005da:	4804      	ldr	r0, [pc, #16]	@ (80005ec <initLCD+0x3c>)
 80005dc:	f004 f95a 	bl	8004894 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN47_DrawPoint);
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <initLCD+0x40>)
 80005e2:	f004 f967 	bl	80048b4 <Paint_SetDisplayFuntion>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08005051 	.word	0x08005051
 80005f0:	080050c5 	.word	0x080050c5

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fcdc 	bl	8000fb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f8b1 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 fa2d 	bl	8000a60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f9df 	bl	80009c8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800060a:	f000 f8f7 	bl	80007fc <MX_SPI1_Init>
  MX_TIM2_Init();
 800060e:	f000 f933 	bl	8000878 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000612:	f000 f97f 	bl	8000914 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  initLCD();
 8000616:	f7ff ffcb 	bl	80005b0 <initLCD>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Draw text at different coordinates to test the LCD
	  Paint_DrawString_EN(0, 50, "dwd1", &Font16, BLACK, WHITE);
 800061a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2300      	movs	r3, #0
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	4b41      	ldr	r3, [pc, #260]	@ (800072c <main+0x138>)
 8000626:	4a42      	ldr	r2, [pc, #264]	@ (8000730 <main+0x13c>)
 8000628:	2132      	movs	r1, #50	@ 0x32
 800062a:	2000      	movs	r0, #0
 800062c:	f004 faae 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(125, 20, "dwd2", &Font16, BLACK, WHITE);
 8000630:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2300      	movs	r3, #0
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	4b3c      	ldr	r3, [pc, #240]	@ (800072c <main+0x138>)
 800063c:	4a3d      	ldr	r2, [pc, #244]	@ (8000734 <main+0x140>)
 800063e:	2114      	movs	r1, #20
 8000640:	207d      	movs	r0, #125	@ 0x7d
 8000642:	f004 faa3 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(0, 30, "dwd3", &Font16, BLACK, WHITE);
 8000646:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2300      	movs	r3, #0
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	4b36      	ldr	r3, [pc, #216]	@ (800072c <main+0x138>)
 8000652:	4a39      	ldr	r2, [pc, #228]	@ (8000738 <main+0x144>)
 8000654:	211e      	movs	r1, #30
 8000656:	2000      	movs	r0, #0
 8000658:	f004 fa98 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(65, 80, "dwd4", &Font16, BLACK, WHITE);
 800065c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2300      	movs	r3, #0
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	4b31      	ldr	r3, [pc, #196]	@ (800072c <main+0x138>)
 8000668:	4a34      	ldr	r2, [pc, #208]	@ (800073c <main+0x148>)
 800066a:	2150      	movs	r1, #80	@ 0x50
 800066c:	2041      	movs	r0, #65	@ 0x41
 800066e:	f004 fa8d 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(70, 120, "dwd5", &Font16, BLACK, WHITE);
 8000672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2300      	movs	r3, #0
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	4b2b      	ldr	r3, [pc, #172]	@ (800072c <main+0x138>)
 800067e:	4a30      	ldr	r2, [pc, #192]	@ (8000740 <main+0x14c>)
 8000680:	2178      	movs	r1, #120	@ 0x78
 8000682:	2046      	movs	r0, #70	@ 0x46
 8000684:	f004 fa82 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(70, 140, "dwd6", &Font16, BLACK, WHITE);
 8000688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2300      	movs	r3, #0
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	4b26      	ldr	r3, [pc, #152]	@ (800072c <main+0x138>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <main+0x150>)
 8000696:	218c      	movs	r1, #140	@ 0x8c
 8000698:	2046      	movs	r0, #70	@ 0x46
 800069a:	f004 fa77 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(70, 170, "dwd7", &Font16, BLACK, WHITE);
 800069e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2300      	movs	r3, #0
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4b20      	ldr	r3, [pc, #128]	@ (800072c <main+0x138>)
 80006aa:	4a27      	ldr	r2, [pc, #156]	@ (8000748 <main+0x154>)
 80006ac:	21aa      	movs	r1, #170	@ 0xaa
 80006ae:	2046      	movs	r0, #70	@ 0x46
 80006b0:	f004 fa6c 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(70, 190, "dwd8", &Font16, BLACK, WHITE);
 80006b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2300      	movs	r3, #0
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <main+0x138>)
 80006c0:	4a22      	ldr	r2, [pc, #136]	@ (800074c <main+0x158>)
 80006c2:	21be      	movs	r1, #190	@ 0xbe
 80006c4:	2046      	movs	r0, #70	@ 0x46
 80006c6:	f004 fa61 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(70, 200, "dwd9", &Font16, BLACK, WHITE);
 80006ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	2300      	movs	r3, #0
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <main+0x138>)
 80006d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000750 <main+0x15c>)
 80006d8:	21c8      	movs	r1, #200	@ 0xc8
 80006da:	2046      	movs	r0, #70	@ 0x46
 80006dc:	f004 fa56 	bl	8004b8c <Paint_DrawString_EN>

	  Paint_DrawString_EN(70, 240, "dwd10", &Font16, BLACK, WHITE);
 80006e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2300      	movs	r3, #0
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <main+0x138>)
 80006ec:	4a19      	ldr	r2, [pc, #100]	@ (8000754 <main+0x160>)
 80006ee:	21f0      	movs	r1, #240	@ 0xf0
 80006f0:	2046      	movs	r0, #70	@ 0x46
 80006f2:	f004 fa4b 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(70, 260, "dwd11", &Font24, BLACK, WHITE);
 80006f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <main+0x164>)
 8000702:	4a16      	ldr	r2, [pc, #88]	@ (800075c <main+0x168>)
 8000704:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000708:	2046      	movs	r0, #70	@ 0x46
 800070a:	f004 fa3f 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(60, 290, "dwd12", &Font24, BLACK, WHITE);
 800070e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	2300      	movs	r3, #0
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <main+0x164>)
 800071a:	4a11      	ldr	r2, [pc, #68]	@ (8000760 <main+0x16c>)
 800071c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000720:	203c      	movs	r0, #60	@ 0x3c
 8000722:	f004 fa33 	bl	8004b8c <Paint_DrawString_EN>
	  Paint_DrawString_EN(0, 50, "dwd1", &Font16, BLACK, WHITE);
 8000726:	bf00      	nop
 8000728:	e777      	b.n	800061a <main+0x26>
 800072a:	bf00      	nop
 800072c:	2000000c 	.word	0x2000000c
 8000730:	08006048 	.word	0x08006048
 8000734:	08006050 	.word	0x08006050
 8000738:	08006058 	.word	0x08006058
 800073c:	08006060 	.word	0x08006060
 8000740:	08006068 	.word	0x08006068
 8000744:	08006070 	.word	0x08006070
 8000748:	08006078 	.word	0x08006078
 800074c:	08006080 	.word	0x08006080
 8000750:	08006088 	.word	0x08006088
 8000754:	08006090 	.word	0x08006090
 8000758:	20000014 	.word	0x20000014
 800075c:	08006098 	.word	0x08006098
 8000760:	080060a0 	.word	0x080060a0

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	2238      	movs	r2, #56	@ 0x38
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 ff86 	bl	8005684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 ff26 	bl	80015d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2340      	movs	r3, #64	@ 0x40
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007a6:	2355      	movs	r3, #85	@ 0x55
 80007a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 ffc0 	bl	8001740 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007c6:	f000 f9af 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2104      	movs	r1, #4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fabe 	bl	8001d64 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ee:	f000 f99b 	bl	8000b28 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	@ 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_SPI1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000808:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000816:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800081a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_SPI1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_SPI1_Init+0x74>)
 800082a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000832:	2210      	movs	r2, #16
 8000834:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_SPI1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_SPI1_Init+0x74>)
 800084a:	2207      	movs	r2, #7
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_SPI1_Init+0x74>)
 8000856:	2208      	movs	r2, #8
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_SPI1_Init+0x74>)
 800085c:	f001 fe8e 	bl	800257c <HAL_SPI_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 f95f 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000094 	.word	0x20000094
 8000874:	40013000 	.word	0x40013000

08000878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000896:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <MX_TIM2_Init+0x98>)
 8000898:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800089c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800089e:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <MX_TIM2_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_TIM2_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_TIM2_Init+0x98>)
 80008ac:	f04f 32ff 	mov.w	r2, #4294967295
 80008b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_TIM2_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_TIM2_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008be:	4814      	ldr	r0, [pc, #80]	@ (8000910 <MX_TIM2_Init+0x98>)
 80008c0:	f002 f9e0 	bl	8002c84 <HAL_TIM_Base_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008ca:	f000 f92d 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	480d      	ldr	r0, [pc, #52]	@ (8000910 <MX_TIM2_Init+0x98>)
 80008dc:	f002 fb94 	bl	8003008 <HAL_TIM_ConfigClockSource>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008e6:	f000 f91f 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <MX_TIM2_Init+0x98>)
 80008f8:	f003 f8ae 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000902:	f000 f911 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000f8 	.word	0x200000f8

08000914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_TIM3_Init+0xac>)
 800093a:	4a22      	ldr	r2, [pc, #136]	@ (80009c4 <MX_TIM3_Init+0xb0>)
 800093c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <MX_TIM3_Init+0xac>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_TIM3_Init+0xac>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_TIM3_Init+0xac>)
 800094c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_TIM3_Init+0xac>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_TIM3_Init+0xac>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800095e:	4818      	ldr	r0, [pc, #96]	@ (80009c0 <MX_TIM3_Init+0xac>)
 8000960:	f002 f9e7 	bl	8002d32 <HAL_TIM_PWM_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800096a:	f000 f8dd 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4810      	ldr	r0, [pc, #64]	@ (80009c0 <MX_TIM3_Init+0xac>)
 800097e:	f003 f86b 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000988:	f000 f8ce 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098c:	2360      	movs	r3, #96	@ 0x60
 800098e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	2204      	movs	r2, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <MX_TIM3_Init+0xac>)
 80009a4:	f002 fa1c 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80009ae:	f000 f8bb 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009b2:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <MX_TIM3_Init+0xac>)
 80009b4:	f000 f962 	bl	8000c7c <HAL_TIM_MspPostInit>

}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	@ 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000144 	.word	0x20000144
 80009c4:	40000400 	.word	0x40000400

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <MX_USART2_UART_Init+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a10:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a12:	f003 f8a3 	bl	8003b5c <HAL_UART_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f000 f884 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a24:	f003 fe0e 	bl	8004644 <HAL_UARTEx_SetTxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2e:	f000 f87b 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a36:	f003 fe43 	bl	80046c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f000 f872 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a46:	f003 fdc4 	bl	80045d2 <HAL_UARTEx_DisableFifoMode>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f86a 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000190 	.word	0x20000190
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <MX_GPIO_Init+0xc0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	4a29      	ldr	r2, [pc, #164]	@ (8000b20 <MX_GPIO_Init+0xc0>)
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a82:	4b27      	ldr	r3, [pc, #156]	@ (8000b20 <MX_GPIO_Init+0xc0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	f003 0320 	and.w	r3, r3, #32
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <MX_GPIO_Init+0xc0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	4a23      	ldr	r2, [pc, #140]	@ (8000b20 <MX_GPIO_Init+0xc0>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9a:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <MX_GPIO_Init+0xc0>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <MX_GPIO_Init+0xc0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8000b20 <MX_GPIO_Init+0xc0>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <MX_GPIO_Init+0xc0>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac8:	f000 fd6e 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000ad2:	4814      	ldr	r0, [pc, #80]	@ (8000b24 <MX_GPIO_Init+0xc4>)
 8000ad4:	f000 fd68 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = DC_Pin|RST_Pin;
 8000ad8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f000 fbd6 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = CS_Pin|LD2_Pin;
 8000af8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_GPIO_Init+0xc4>)
 8000b12:	f000 fbc7 	bl	80012a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48000400 	.word	0x48000400

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b56:	4a08      	ldr	r2, [pc, #32]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b6a:	f000 fdd9 	bl	8001720 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a17      	ldr	r2, [pc, #92]	@ (8000bf8 <HAL_SPI_MspInit+0x7c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d128      	bne.n	8000bf0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b9e:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <HAL_SPI_MspInit+0x80>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba2:	4a16      	ldr	r2, [pc, #88]	@ (8000bfc <HAL_SPI_MspInit+0x80>)
 8000ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <HAL_SPI_MspInit+0x80>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <HAL_SPI_MspInit+0x80>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <HAL_SPI_MspInit+0x80>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_SPI_MspInit+0x80>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bce:	23e0      	movs	r3, #224	@ 0xe0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bec:	f000 fb5a 	bl	80012a4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	@ 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c10:	d10b      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_TIM_Base_MspInit+0x38>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_TIM_Base_MspInit+0x38>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_TIM_Base_MspInit+0x38>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <HAL_TIM_PWM_MspInit+0x38>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d10b      	bne.n	8000c66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	4a09      	ldr	r2, [pc, #36]	@ (8000c78 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40000400 	.word	0x40000400
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <HAL_TIM_MspPostInit+0x64>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d11b      	bne.n	8000cd6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <HAL_TIM_MspPostInit+0x68>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	4a10      	ldr	r2, [pc, #64]	@ (8000ce4 <HAL_TIM_MspPostInit+0x68>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <HAL_TIM_MspPostInit+0x68>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <HAL_TIM_MspPostInit+0x6c>)
 8000cd2:	f000 fae7 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40000400 	.word	0x40000400
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000400 	.word	0x48000400

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b09a      	sub	sp, #104	@ 0x68
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	2244      	movs	r2, #68	@ 0x44
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 fcb9 	bl	8005684 <memset>
  if(huart->Instance==USART2)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a1f      	ldr	r2, [pc, #124]	@ (8000d94 <HAL_UART_MspInit+0xa8>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d136      	bne.n	8000d8a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fa37 	bl	800219c <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d34:	f7ff fef8 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <HAL_UART_MspInit+0xac>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3c:	4a16      	ldr	r2, [pc, #88]	@ (8000d98 <HAL_UART_MspInit+0xac>)
 8000d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <HAL_UART_MspInit+0xac>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_UART_MspInit+0xac>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d54:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <HAL_UART_MspInit+0xac>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_UART_MspInit+0xac>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d68:	230c      	movs	r3, #12
 8000d6a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d86:	f000 fa8d 	bl	80012a4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3768      	adds	r7, #104	@ 0x68
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40021000 	.word	0x40021000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <NMI_Handler+0x4>

08000da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <MemManage_Handler+0x4>

08000db4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df2:	f000 f933 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e00a      	b.n	8000e22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e0c:	f3af 8000 	nop.w
 8000e10:	4601      	mov	r1, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	60ba      	str	r2, [r7, #8]
 8000e18:	b2ca      	uxtb	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	dbf0      	blt.n	8000e0c <_read+0x12>
  }

  return len;
 8000e2a:	687b      	ldr	r3, [r7, #4]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	e009      	b.n	8000e5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	60ba      	str	r2, [r7, #8]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3301      	adds	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dbf1      	blt.n	8000e46 <_write+0x12>
  }
  return len;
 8000e62:	687b      	ldr	r3, [r7, #4]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_close>:

int _close(int file)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e94:	605a      	str	r2, [r3, #4]
  return 0;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_isatty>:

int _isatty(int file)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f004 fc1c 	bl	8005740 <__errno>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20008000 	.word	0x20008000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	20000224 	.word	0x20000224
 8000f3c:	200003a0 	.word	0x200003a0

08000f40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f64:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f68:	f7ff ffea 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	@ (8000fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <LoopForever+0xe>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb0 <LoopForever+0x16>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f004 fbdb 	bl	800574c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f96:	f7ff fb2d 	bl	80005f4 <main>

08000f9a <LoopForever>:

LoopForever:
    b LoopForever
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
  ldr   r0, =_estack
 8000f9c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000fa8:	08008ab8 	.word	0x08008ab8
  ldr r2, =_sbss
 8000fac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000fb0:	200003a0 	.word	0x200003a0

08000fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_2_IRQHandler>

08000fb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f93d 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f80e 	bl	8000fe8 <HAL_InitTick>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	e001      	b.n	8000fdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fd8:	f7ff fdac 	bl	8000b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fdc:	79fb      	ldrb	r3, [r7, #7]

}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_InitTick+0x68>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d022      	beq.n	8001042 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <HAL_InitTick+0x6c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <HAL_InitTick+0x68>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001008:	fbb1 f3f3 	udiv	r3, r1, r3
 800100c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f93a 	bl	800128a <HAL_SYSTICK_Config>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10f      	bne.n	800103c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	d809      	bhi.n	8001036 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001022:	2200      	movs	r2, #0
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	f04f 30ff 	mov.w	r0, #4294967295
 800102a:	f000 f914 	bl	8001256 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <HAL_InitTick+0x70>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	e007      	b.n	8001046 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e004      	b.n	8001046 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e001      	b.n	8001046 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000008 	.word	0x20000008
 8001054:	20000000 	.word	0x20000000
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <HAL_IncTick+0x1c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <HAL_IncTick+0x20>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4413      	add	r3, r2
 800106a:	4a03      	ldr	r2, [pc, #12]	@ (8001078 <HAL_IncTick+0x1c>)
 800106c:	6013      	str	r3, [r2, #0]
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000228 	.word	0x20000228
 800107c:	20000008 	.word	0x20000008

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000228 	.word	0x20000228

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d004      	beq.n	80010bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <HAL_Delay+0x40>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010bc:	bf00      	nop
 80010be:	f7ff ffdf 	bl	8001080 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d8f7      	bhi.n	80010be <HAL_Delay+0x26>
  {
  }
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000008 	.word	0x20000008

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	@ (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	@ (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	@ 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff47 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff5e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff90 	bl	8001194 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5f 	bl	8001140 <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffb2 	bl	80011fc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012b2:	e15a      	b.n	800156a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 814c 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0203 	and.w	r2, r3, #3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80a6 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b5b      	ldr	r3, [pc, #364]	@ (8001588 <HAL_GPIO_Init+0x2e4>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141c:	4a5a      	ldr	r2, [pc, #360]	@ (8001588 <HAL_GPIO_Init+0x2e4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6613      	str	r3, [r2, #96]	@ 0x60
 8001424:	4b58      	ldr	r3, [pc, #352]	@ (8001588 <HAL_GPIO_Init+0x2e4>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001430:	4a56      	ldr	r2, [pc, #344]	@ (800158c <HAL_GPIO_Init+0x2e8>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800145a:	d01f      	beq.n	800149c <HAL_GPIO_Init+0x1f8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4c      	ldr	r2, [pc, #304]	@ (8001590 <HAL_GPIO_Init+0x2ec>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d019      	beq.n	8001498 <HAL_GPIO_Init+0x1f4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4b      	ldr	r2, [pc, #300]	@ (8001594 <HAL_GPIO_Init+0x2f0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d013      	beq.n	8001494 <HAL_GPIO_Init+0x1f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4a      	ldr	r2, [pc, #296]	@ (8001598 <HAL_GPIO_Init+0x2f4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d00d      	beq.n	8001490 <HAL_GPIO_Init+0x1ec>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a49      	ldr	r2, [pc, #292]	@ (800159c <HAL_GPIO_Init+0x2f8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x1e8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a48      	ldr	r2, [pc, #288]	@ (80015a0 <HAL_GPIO_Init+0x2fc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001484:	2305      	movs	r3, #5
 8001486:	e00a      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001488:	2306      	movs	r3, #6
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800148c:	2304      	movs	r3, #4
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001494:	2302      	movs	r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800149c:	2300      	movs	r3, #0
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	f002 0203 	and.w	r2, r2, #3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	4093      	lsls	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ae:	4937      	ldr	r1, [pc, #220]	@ (800158c <HAL_GPIO_Init+0x2e8>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014bc:	4b39      	ldr	r3, [pc, #228]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e0:	4a30      	ldr	r2, [pc, #192]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150a:	4a26      	ldr	r2, [pc, #152]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001510:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001534:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153a:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155e:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	f47f ae9d 	bne.w	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d141      	bne.n	800166a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015f2:	d131      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f4:	4b47      	ldr	r3, [pc, #284]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015fa:	4a46      	ldr	r2, [pc, #280]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001600:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	4b43      	ldr	r3, [pc, #268]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800160c:	4a41      	ldr	r2, [pc, #260]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001614:	4b40      	ldr	r3, [pc, #256]	@ (8001718 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2232      	movs	r2, #50	@ 0x32
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	4a3f      	ldr	r2, [pc, #252]	@ (800171c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162a:	e002      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001632:	4b38      	ldr	r3, [pc, #224]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800163e:	d102      	bne.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f2      	bne.n	800162c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001646:	4b33      	ldr	r3, [pc, #204]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001652:	d158      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e057      	b.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001658:	4b2e      	ldr	r3, [pc, #184]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800165e:	4a2d      	ldr	r2, [pc, #180]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001664:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001668:	e04d      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001670:	d141      	bne.n	80016f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001672:	4b28      	ldr	r3, [pc, #160]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800167e:	d131      	bne.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001680:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001686:	4a23      	ldr	r2, [pc, #140]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001698:	4a1e      	ldr	r2, [pc, #120]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800169e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2232      	movs	r2, #50	@ 0x32
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9b      	lsrs	r3, r3, #18
 80016b2:	3301      	adds	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b6:	e002      	b.n	80016be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016ca:	d102      	bne.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f2      	bne.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016de:	d112      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e011      	b.n	8001708 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80016f4:	e007      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001704:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40007000 	.word	0x40007000
 8001718:	20000000 	.word	0x20000000
 800171c:	431bde83 	.word	0x431bde83

08001720 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001724:	4b05      	ldr	r3, [pc, #20]	@ (800173c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800172a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172e:	6093      	str	r3, [r2, #8]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40007000 	.word	0x40007000

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e2fe      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d075      	beq.n	800184a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175e:	4b97      	ldr	r3, [pc, #604]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001768:	4b94      	ldr	r3, [pc, #592]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2b0c      	cmp	r3, #12
 8001776:	d102      	bne.n	800177e <HAL_RCC_OscConfig+0x3e>
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d002      	beq.n	8001784 <HAL_RCC_OscConfig+0x44>
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b08      	cmp	r3, #8
 8001782:	d10b      	bne.n	800179c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	4b8d      	ldr	r3, [pc, #564]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d05b      	beq.n	8001848 <HAL_RCC_OscConfig+0x108>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d157      	bne.n	8001848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e2d9      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x74>
 80017a6:	4b85      	ldr	r3, [pc, #532]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a84      	ldr	r2, [pc, #528]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e01d      	b.n	80017f0 <HAL_RCC_OscConfig+0xb0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x98>
 80017be:	4b7f      	ldr	r3, [pc, #508]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7e      	ldr	r2, [pc, #504]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b7c      	ldr	r3, [pc, #496]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7b      	ldr	r2, [pc, #492]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0xb0>
 80017d8:	4b78      	ldr	r3, [pc, #480]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a77      	ldr	r2, [pc, #476]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b75      	ldr	r3, [pc, #468]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a74      	ldr	r2, [pc, #464]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fc42 	bl	8001080 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fc3e 	bl	8001080 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e29e      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	4b6a      	ldr	r3, [pc, #424]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0xc0>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fc2e 	bl	8001080 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fc2a 	bl	8001080 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e28a      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	4b60      	ldr	r3, [pc, #384]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0xe8>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d075      	beq.n	8001942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001856:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001860:	4b56      	ldr	r3, [pc, #344]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d102      	bne.n	8001876 <HAL_RCC_OscConfig+0x136>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d002      	beq.n	800187c <HAL_RCC_OscConfig+0x13c>
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b04      	cmp	r3, #4
 800187a:	d11f      	bne.n	80018bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187c:	4b4f      	ldr	r3, [pc, #316]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_OscConfig+0x154>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e25d      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	4946      	ldr	r1, [pc, #280]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018a8:	4b45      	ldr	r3, [pc, #276]	@ (80019c0 <HAL_RCC_OscConfig+0x280>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fb9b 	bl	8000fe8 <HAL_InitTick>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d043      	beq.n	8001940 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e249      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d023      	beq.n	800190c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a3c      	ldr	r2, [pc, #240]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fbd6 	bl	8001080 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff fbd2 	bl	8001080 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e232      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ea:	4b34      	ldr	r3, [pc, #208]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	061b      	lsls	r3, r3, #24
 8001904:	492d      	ldr	r1, [pc, #180]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
 800190a:	e01a      	b.n	8001942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190c:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fbb2 	bl	8001080 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff fbae 	bl	8001080 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e20e      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001932:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x1e0>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d041      	beq.n	80019d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01c      	beq.n	8001990 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800195c:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff fb8b 	bl	8001080 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff fb87 	bl	8001080 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1e7      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001980:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0ef      	beq.n	800196e <HAL_RCC_OscConfig+0x22e>
 800198e:	e020      	b.n	80019d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001990:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001996:	4a09      	ldr	r2, [pc, #36]	@ (80019bc <HAL_RCC_OscConfig+0x27c>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fb6e 	bl	8001080 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a6:	e00d      	b.n	80019c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fb6a 	bl	8001080 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d906      	bls.n	80019c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1ca      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c4:	4b8c      	ldr	r3, [pc, #560]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ea      	bne.n	80019a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80a6 	beq.w	8001b2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019e4:	4b84      	ldr	r3, [pc, #528]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2b4>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x2b6>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00d      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	4a7e      	ldr	r2, [pc, #504]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a06:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a12:	2301      	movs	r3, #1
 8001a14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a16:	4b79      	ldr	r3, [pc, #484]	@ (8001bfc <HAL_RCC_OscConfig+0x4bc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d118      	bne.n	8001a54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a22:	4b76      	ldr	r3, [pc, #472]	@ (8001bfc <HAL_RCC_OscConfig+0x4bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a75      	ldr	r2, [pc, #468]	@ (8001bfc <HAL_RCC_OscConfig+0x4bc>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fb27 	bl	8001080 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a36:	f7ff fb23 	bl	8001080 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e183      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a48:	4b6c      	ldr	r3, [pc, #432]	@ (8001bfc <HAL_RCC_OscConfig+0x4bc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_RCC_OscConfig+0x32e>
 8001a5c:	4b66      	ldr	r3, [pc, #408]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a62:	4a65      	ldr	r2, [pc, #404]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a6c:	e024      	b.n	8001ab8 <HAL_RCC_OscConfig+0x378>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d110      	bne.n	8001a98 <HAL_RCC_OscConfig+0x358>
 8001a76:	4b60      	ldr	r3, [pc, #384]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a7c:	4a5e      	ldr	r2, [pc, #376]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a86:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x378>
 8001a98:	4b57      	ldr	r3, [pc, #348]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9e:	4a56      	ldr	r2, [pc, #344]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aa8:	4b53      	ldr	r3, [pc, #332]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aae:	4a52      	ldr	r2, [pc, #328]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d016      	beq.n	8001aee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fade 	bl	8001080 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fada 	bl	8001080 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e138      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ade:	4b46      	ldr	r3, [pc, #280]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ed      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x388>
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aee:	f7ff fac7 	bl	8001080 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fac3 	bl	8001080 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e121      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ed      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4b35      	ldr	r3, [pc, #212]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b24:	4a34      	ldr	r2, [pc, #208]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b40:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b46:	4a2c      	ldr	r2, [pc, #176]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff fa96 	bl	8001080 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b58:	f7ff fa92 	bl	8001080 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0f2      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b6a:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ef      	beq.n	8001b58 <HAL_RCC_OscConfig+0x418>
 8001b78:	e01b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b80:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fa79 	bl	8001080 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b92:	f7ff fa75 	bl	8001080 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0d5      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ba4:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ef      	bne.n	8001b92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80c9 	beq.w	8001d4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	f000 8083 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d15e      	bne.n	8001c90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a08      	ldr	r2, [pc, #32]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b8>)
 8001bd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff fa4f 	bl	8001080 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	e00c      	b.n	8001c00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff fa4b 	bl	8001080 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d905      	bls.n	8001c00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e0ab      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	4b55      	ldr	r3, [pc, #340]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ec      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0c:	4b52      	ldr	r3, [pc, #328]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4b52      	ldr	r3, [pc, #328]	@ (8001d5c <HAL_RCC_OscConfig+0x61c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6a11      	ldr	r1, [r2, #32]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	4311      	orrs	r1, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001c26:	0212      	lsls	r2, r2, #8
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c2e:	0852      	lsrs	r2, r2, #1
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0552      	lsls	r2, r2, #21
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c3a:	0852      	lsrs	r2, r2, #1
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	0652      	lsls	r2, r2, #25
 8001c40:	4311      	orrs	r1, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c46:	06d2      	lsls	r2, r2, #27
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	4943      	ldr	r1, [pc, #268]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b41      	ldr	r3, [pc, #260]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a40      	ldr	r2, [pc, #256]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a3d      	ldr	r2, [pc, #244]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fa0a 	bl	8001080 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fa06 	bl	8001080 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e066      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x530>
 8001c8e:	e05e      	b.n	8001d4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a30      	ldr	r2, [pc, #192]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f9f0 	bl	8001080 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff f9ec 	bl	8001080 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e04c      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb6:	4b28      	ldr	r3, [pc, #160]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001cc2:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	4924      	ldr	r1, [pc, #144]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <HAL_RCC_OscConfig+0x620>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60cb      	str	r3, [r1, #12]
 8001cce:	e03e      	b.n	8001d4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e039      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <HAL_RCC_OscConfig+0x618>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d12c      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d123      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d11b      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d113      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	3b01      	subs	r3, #1
 8001d44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	019f800c 	.word	0x019f800c
 8001d60:	feeefffc 	.word	0xfeeefffc

08001d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e11e      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b91      	ldr	r3, [pc, #580]	@ (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d910      	bls.n	8001dac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b8e      	ldr	r3, [pc, #568]	@ (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 020f 	bic.w	r2, r3, #15
 8001d92:	498c      	ldr	r1, [pc, #560]	@ (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b8a      	ldr	r3, [pc, #552]	@ (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e106      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d073      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d129      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc0:	4b81      	ldr	r3, [pc, #516]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0f4      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001dd0:	f000 f99e 	bl	8002110 <RCC_GetSysClockFreqFromPLLSource>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4a7c      	ldr	r2, [pc, #496]	@ (8001fcc <HAL_RCC_ClockConfig+0x268>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d93f      	bls.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dde:	4b7a      	ldr	r3, [pc, #488]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d033      	beq.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d12f      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dfe:	4b72      	ldr	r3, [pc, #456]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e06:	4a70      	ldr	r2, [pc, #448]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e024      	b.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0c6      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2c:	4b66      	ldr	r3, [pc, #408]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0be      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e3c:	f000 f8ce 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4a61      	ldr	r2, [pc, #388]	@ (8001fcc <HAL_RCC_ClockConfig+0x268>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d909      	bls.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e52:	4a5d      	ldr	r2, [pc, #372]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e5a:	2380      	movs	r3, #128	@ 0x80
 8001e5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4957      	ldr	r1, [pc, #348]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e70:	f7ff f906 	bl	8001080 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff f902 	bl	8001080 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e095      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d023      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb8:	4b43      	ldr	r3, [pc, #268]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a42      	ldr	r2, [pc, #264]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001ebe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ec2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001ed8:	4a3b      	ldr	r2, [pc, #236]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001eda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ede:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b39      	ldr	r3, [pc, #228]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4936      	ldr	r1, [pc, #216]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b80      	cmp	r3, #128	@ 0x80
 8001ef8:	d105      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001efa:	4b33      	ldr	r3, [pc, #204]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	4a32      	ldr	r2, [pc, #200]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f06:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d21d      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f14:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 020f 	bic.w	r2, r3, #15
 8001f1c:	4929      	ldr	r1, [pc, #164]	@ (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f24:	f7ff f8ac 	bl	8001080 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7ff f8a8 	bl	8001080 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e03b      	b.n	8001fba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <HAL_RCC_ClockConfig+0x260>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1ed      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4917      	ldr	r1, [pc, #92]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490f      	ldr	r1, [pc, #60]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8e:	f000 f825 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <HAL_RCC_ClockConfig+0x264>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	490c      	ldr	r1, [pc, #48]	@ (8001fd0 <HAL_RCC_ClockConfig+0x26c>)
 8001fa0:	5ccb      	ldrb	r3, [r1, r3]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_RCC_ClockConfig+0x270>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_RCC_ClockConfig+0x274>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f818 	bl	8000fe8 <HAL_InitTick>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	04c4b400 	.word	0x04c4b400
 8001fd0:	0800639c 	.word	0x0800639c
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d102      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fee:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	e047      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ff4:	4b27      	ldr	r3, [pc, #156]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d102      	bne.n	8002006 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002000:	4b26      	ldr	r3, [pc, #152]	@ (800209c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	e03e      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d136      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800201c:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3301      	adds	r3, #1
 8002028:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d10c      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002030:	4a1a      	ldr	r2, [pc, #104]	@ (800209c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	4a16      	ldr	r2, [pc, #88]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 800203a:	68d2      	ldr	r2, [r2, #12]
 800203c:	0a12      	lsrs	r2, r2, #8
 800203e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
      break;
 8002048:	e00c      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800204a:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <HAL_RCC_GetSysClockFreq+0xbc>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4a10      	ldr	r2, [pc, #64]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	0a12      	lsrs	r2, r2, #8
 8002058:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	617b      	str	r3, [r7, #20]
      break;
 8002062:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0e5b      	lsrs	r3, r3, #25
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	e001      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002084:	693b      	ldr	r3, [r7, #16]
}
 8002086:	4618      	mov	r0, r3
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200

080020a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4904      	ldr	r1, [pc, #16]	@ (80020e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080063ac 	.word	0x080063ac

080020e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020e8:	f7ff ffda 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0adb      	lsrs	r3, r3, #11
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4904      	ldr	r1, [pc, #16]	@ (800210c <HAL_RCC_GetPCLK2Freq+0x28>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	080063ac 	.word	0x080063ac

08002110 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3301      	adds	r3, #1
 800212c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d10c      	bne.n	800214e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002134:	4a17      	ldr	r2, [pc, #92]	@ (8002194 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	4a14      	ldr	r2, [pc, #80]	@ (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800213e:	68d2      	ldr	r2, [r2, #12]
 8002140:	0a12      	lsrs	r2, r2, #8
 8002142:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
    break;
 800214c:	e00c      	b.n	8002168 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800214e:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4a0e      	ldr	r2, [pc, #56]	@ (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002158:	68d2      	ldr	r2, [r2, #12]
 800215a:	0a12      	lsrs	r2, r2, #8
 800215c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    break;
 8002166:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0e5b      	lsrs	r3, r3, #25
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	00f42400 	.word	0x00f42400

0800219c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021a4:	2300      	movs	r3, #0
 80021a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021a8:	2300      	movs	r3, #0
 80021aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8098 	beq.w	80022ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b43      	ldr	r3, [pc, #268]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b40      	ldr	r3, [pc, #256]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ce:	4a3f      	ldr	r2, [pc, #252]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021d6:	4b3d      	ldr	r3, [pc, #244]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e6:	4b3a      	ldr	r3, [pc, #232]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a39      	ldr	r2, [pc, #228]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021f2:	f7fe ff45 	bl	8001080 <HAL_GetTick>
 80021f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021f8:	e009      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fa:	f7fe ff41 	bl	8001080 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d902      	bls.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	74fb      	strb	r3, [r7, #19]
        break;
 800220c:	e005      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800220e:	4b30      	ldr	r3, [pc, #192]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0ef      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800221a:	7cfb      	ldrb	r3, [r7, #19]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d159      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002220:	4b2a      	ldr	r3, [pc, #168]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800222a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01e      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d019      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800223c:	4b23      	ldr	r3, [pc, #140]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002248:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224e:	4a1f      	ldr	r2, [pc, #124]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002258:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225e:	4a1b      	ldr	r2, [pc, #108]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002268:	4a18      	ldr	r2, [pc, #96]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe ff01 	bl	8001080 <HAL_GetTick>
 800227e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002280:	e00b      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fefd 	bl	8001080 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d902      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	74fb      	strb	r3, [r7, #19]
            break;
 8002298:	e006      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ec      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10b      	bne.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ae:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	4903      	ldr	r1, [pc, #12]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022c4:	e008      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	74bb      	strb	r3, [r7, #18]
 80022ca:	e005      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d8:	7c7b      	ldrb	r3, [r7, #17]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d105      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022de:	4ba6      	ldr	r3, [pc, #664]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e2:	4aa5      	ldr	r2, [pc, #660]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f6:	4ba0      	ldr	r3, [pc, #640]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fc:	f023 0203 	bic.w	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	499c      	ldr	r1, [pc, #624]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002318:	4b97      	ldr	r3, [pc, #604]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	f023 020c 	bic.w	r2, r3, #12
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4994      	ldr	r1, [pc, #592]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800233a:	4b8f      	ldr	r3, [pc, #572]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002340:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	498b      	ldr	r1, [pc, #556]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800235c:	4b86      	ldr	r3, [pc, #536]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	4983      	ldr	r1, [pc, #524]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800237e:	4b7e      	ldr	r3, [pc, #504]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002384:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	497a      	ldr	r1, [pc, #488]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a0:	4b75      	ldr	r3, [pc, #468]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	4972      	ldr	r1, [pc, #456]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	4969      	ldr	r1, [pc, #420]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023e4:	4b64      	ldr	r3, [pc, #400]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4961      	ldr	r1, [pc, #388]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002406:	4b5c      	ldr	r3, [pc, #368]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	4958      	ldr	r1, [pc, #352]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002428:	4b53      	ldr	r3, [pc, #332]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002436:	4950      	ldr	r1, [pc, #320]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002446:	d105      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002448:	4b4b      	ldr	r3, [pc, #300]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4a4a      	ldr	r2, [pc, #296]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002452:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800245c:	2b00      	cmp	r3, #0
 800245e:	d015      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002460:	4b45      	ldr	r3, [pc, #276]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002466:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	4942      	ldr	r1, [pc, #264]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800247e:	d105      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002480:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a3c      	ldr	r2, [pc, #240]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800248a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d015      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002498:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4934      	ldr	r1, [pc, #208]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b6:	d105      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024d0:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024de:	4926      	ldr	r1, [pc, #152]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024ee:	d105      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f0:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a20      	ldr	r2, [pc, #128]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002516:	4918      	ldr	r1, [pc, #96]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002526:	d105      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002528:	4b13      	ldr	r3, [pc, #76]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002532:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d015      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002540:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254e:	490a      	ldr	r1, [pc, #40]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800255e:	d105      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800256c:	7cbb      	ldrb	r3, [r7, #18]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000

0800257c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e09d      	b.n	80026ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800259e:	d009      	beq.n	80025b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	61da      	str	r2, [r3, #28]
 80025a6:	e005      	b.n	80025b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fad4 	bl	8000b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025f4:	d902      	bls.n	80025fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e002      	b.n	8002602 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002600:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800260a:	d007      	beq.n	800261c <HAL_SPI_Init+0xa0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002614:	d002      	beq.n	800261c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265e:	ea42 0103 	orr.w	r1, r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	f003 0204 	and.w	r2, r3, #4
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002698:	ea42 0103 	orr.w	r1, r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b088      	sub	sp, #32
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_SPI_Transmit+0x22>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e15f      	b.n	80029b4 <HAL_SPI_Transmit+0x2e2>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026fc:	f7fe fcc0 	bl	8001080 <HAL_GetTick>
 8002700:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d002      	beq.n	8002718 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002712:	2302      	movs	r3, #2
 8002714:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002716:	e148      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_SPI_Transmit+0x52>
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002728:	e13f      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002774:	d10f      	bne.n	8002796 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002784:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002794:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a0:	2b40      	cmp	r3, #64	@ 0x40
 80027a2:	d007      	beq.n	80027b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027bc:	d94f      	bls.n	800285e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_SPI_Transmit+0xfa>
 80027c6:	8afb      	ldrh	r3, [r7, #22]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d142      	bne.n	8002852 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d0:	881a      	ldrh	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027dc:	1c9a      	adds	r2, r3, #2
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027f0:	e02f      	b.n	8002852 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d112      	bne.n	8002826 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	1c9a      	adds	r2, r3, #2
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002824:	e015      	b.n	8002852 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002826:	f7fe fc2b 	bl	8001080 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d803      	bhi.n	800283e <HAL_SPI_Transmit+0x16c>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d102      	bne.n	8002844 <HAL_SPI_Transmit+0x172>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002850:	e0ab      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ca      	bne.n	80027f2 <HAL_SPI_Transmit+0x120>
 800285c:	e080      	b.n	8002960 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_SPI_Transmit+0x19a>
 8002866:	8afb      	ldrh	r3, [r7, #22]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d174      	bne.n	8002956 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d912      	bls.n	800289c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002886:	1c9a      	adds	r2, r3, #2
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b02      	subs	r3, #2
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800289a:	e05c      	b.n	8002956 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80028c2:	e048      	b.n	8002956 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d12b      	bne.n	800292a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d912      	bls.n	8002902 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	1c9a      	adds	r2, r3, #2
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b02      	subs	r3, #2
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002900:	e029      	b.n	8002956 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	7812      	ldrb	r2, [r2, #0]
 800290e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002928:	e015      	b.n	8002956 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800292a:	f7fe fba9 	bl	8001080 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d803      	bhi.n	8002942 <HAL_SPI_Transmit+0x270>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d102      	bne.n	8002948 <HAL_SPI_Transmit+0x276>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002954:	e029      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1b1      	bne.n	80028c4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f947 	bl	8002bf8 <SPI_EndRxTxTransaction>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e003      	b.n	80029aa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80029b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029cc:	f7fe fb58 	bl	8001080 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029dc:	f7fe fb50 	bl	8001080 <HAL_GetTick>
 80029e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029e2:	4b39      	ldr	r3, [pc, #228]	@ (8002ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	015b      	lsls	r3, r3, #5
 80029e8:	0d1b      	lsrs	r3, r3, #20
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029f2:	e054      	b.n	8002a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d050      	beq.n	8002a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029fc:	f7fe fb40 	bl	8001080 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d902      	bls.n	8002a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d13d      	bne.n	8002a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a2a:	d111      	bne.n	8002a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a34:	d004      	beq.n	8002a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3e:	d107      	bne.n	8002a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a58:	d10f      	bne.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e017      	b.n	8002abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d19b      	bne.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000000 	.word	0x20000000

08002acc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ade:	f7fe facf 	bl	8001080 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002aee:	f7fe fac7 	bl	8001080 <HAL_GetTick>
 8002af2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002afc:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00da      	lsls	r2, r3, #3
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	0d1b      	lsrs	r3, r3, #20
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b14:	e060      	b.n	8002bd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002b1c:	d107      	bne.n	8002b2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d104      	bne.n	8002b2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d050      	beq.n	8002bd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b36:	f7fe faa3 	bl	8001080 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d902      	bls.n	8002b4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d13d      	bne.n	8002bc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b64:	d111      	bne.n	8002b8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b6e:	d004      	beq.n	8002b7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b78:	d107      	bne.n	8002b8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b92:	d10f      	bne.n	8002bb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e010      	b.n	8002bea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d196      	bne.n	8002b16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3728      	adds	r7, #40	@ 0x28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000000 	.word	0x20000000

08002bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff ff5b 	bl	8002acc <SPI_WaitFifoStateUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e027      	b.n	8002c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	2180      	movs	r1, #128	@ 0x80
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff fec0 	bl	80029bc <SPI_WaitFlagStateUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d007      	beq.n	8002c52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c46:	f043 0220 	orr.w	r2, r3, #32
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e014      	b.n	8002c7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff ff34 	bl	8002acc <SPI_WaitFifoStateUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6e:	f043 0220 	orr.w	r2, r3, #32
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e000      	b.n	8002c7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e049      	b.n	8002d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fd ffa8 	bl	8000c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 fa9a 	bl	80031fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e049      	b.n	8002dd8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7fd ff6f 	bl	8000c3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2202      	movs	r2, #2
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f000 fa43 	bl	80031fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0ff      	b.n	8002ffe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b14      	cmp	r3, #20
 8002e0a:	f200 80f0 	bhi.w	8002fee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e69 	.word	0x08002e69
 8002e18:	08002fef 	.word	0x08002fef
 8002e1c:	08002fef 	.word	0x08002fef
 8002e20:	08002fef 	.word	0x08002fef
 8002e24:	08002ea9 	.word	0x08002ea9
 8002e28:	08002fef 	.word	0x08002fef
 8002e2c:	08002fef 	.word	0x08002fef
 8002e30:	08002fef 	.word	0x08002fef
 8002e34:	08002eeb 	.word	0x08002eeb
 8002e38:	08002fef 	.word	0x08002fef
 8002e3c:	08002fef 	.word	0x08002fef
 8002e40:	08002fef 	.word	0x08002fef
 8002e44:	08002f2b 	.word	0x08002f2b
 8002e48:	08002fef 	.word	0x08002fef
 8002e4c:	08002fef 	.word	0x08002fef
 8002e50:	08002fef 	.word	0x08002fef
 8002e54:	08002f6d 	.word	0x08002f6d
 8002e58:	08002fef 	.word	0x08002fef
 8002e5c:	08002fef 	.word	0x08002fef
 8002e60:	08002fef 	.word	0x08002fef
 8002e64:	08002fad 	.word	0x08002fad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fa60 	bl	8003334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0208 	orr.w	r2, r2, #8
 8002e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0204 	bic.w	r2, r2, #4
 8002e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6999      	ldr	r1, [r3, #24]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	619a      	str	r2, [r3, #24]
      break;
 8002ea6:	e0a5      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fad0 	bl	8003454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6999      	ldr	r1, [r3, #24]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	021a      	lsls	r2, r3, #8
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	619a      	str	r2, [r3, #24]
      break;
 8002ee8:	e084      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fb39 	bl	8003568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0208 	orr.w	r2, r2, #8
 8002f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0204 	bic.w	r2, r2, #4
 8002f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69d9      	ldr	r1, [r3, #28]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	61da      	str	r2, [r3, #28]
      break;
 8002f28:	e064      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fba1 	bl	8003678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69d9      	ldr	r1, [r3, #28]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	021a      	lsls	r2, r3, #8
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	61da      	str	r2, [r3, #28]
      break;
 8002f6a:	e043      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fc0a 	bl	800378c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0208 	orr.w	r2, r2, #8
 8002f86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002faa:	e023      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fc4e 	bl	8003854 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	021a      	lsls	r2, r3, #8
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002fec:	e002      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop

08003008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_TIM_ConfigClockSource+0x1c>
 8003020:	2302      	movs	r3, #2
 8003022:	e0de      	b.n	80031e2 <HAL_TIM_ConfigClockSource+0x1da>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003042:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800304e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a63      	ldr	r2, [pc, #396]	@ (80031ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	f000 80a9 	beq.w	80031b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003064:	4a61      	ldr	r2, [pc, #388]	@ (80031ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	f200 80ae 	bhi.w	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800306c:	4a60      	ldr	r2, [pc, #384]	@ (80031f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	f000 80a1 	beq.w	80031b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003074:	4a5e      	ldr	r2, [pc, #376]	@ (80031f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	f200 80a6 	bhi.w	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800307c:	4a5d      	ldr	r2, [pc, #372]	@ (80031f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800307e:	4293      	cmp	r3, r2
 8003080:	f000 8099 	beq.w	80031b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003084:	4a5b      	ldr	r2, [pc, #364]	@ (80031f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003086:	4293      	cmp	r3, r2
 8003088:	f200 809e 	bhi.w	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800308c:	4a5a      	ldr	r2, [pc, #360]	@ (80031f8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	f000 8091 	beq.w	80031b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003094:	4a58      	ldr	r2, [pc, #352]	@ (80031f8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	f200 8096 	bhi.w	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800309c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80030a0:	f000 8089 	beq.w	80031b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80030a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80030a8:	f200 808e 	bhi.w	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80030ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b0:	d03e      	beq.n	8003130 <HAL_TIM_ConfigClockSource+0x128>
 80030b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b6:	f200 8087 	bhi.w	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80030ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030be:	f000 8086 	beq.w	80031ce <HAL_TIM_ConfigClockSource+0x1c6>
 80030c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c6:	d87f      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80030c8:	2b70      	cmp	r3, #112	@ 0x70
 80030ca:	d01a      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0xfa>
 80030cc:	2b70      	cmp	r3, #112	@ 0x70
 80030ce:	d87b      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80030d0:	2b60      	cmp	r3, #96	@ 0x60
 80030d2:	d050      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0x16e>
 80030d4:	2b60      	cmp	r3, #96	@ 0x60
 80030d6:	d877      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80030d8:	2b50      	cmp	r3, #80	@ 0x50
 80030da:	d03c      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x14e>
 80030dc:	2b50      	cmp	r3, #80	@ 0x50
 80030de:	d873      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80030e0:	2b40      	cmp	r3, #64	@ 0x40
 80030e2:	d058      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x18e>
 80030e4:	2b40      	cmp	r3, #64	@ 0x40
 80030e6:	d86f      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80030e8:	2b30      	cmp	r3, #48	@ 0x30
 80030ea:	d064      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80030ec:	2b30      	cmp	r3, #48	@ 0x30
 80030ee:	d86b      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d060      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d867      	bhi.n	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d05c      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d05a      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8003100:	e062      	b.n	80031c8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003112:	f000 fc81 	bl	8003a18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003124:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	609a      	str	r2, [r3, #8]
      break;
 800312e:	e04f      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003140:	f000 fc6a 	bl	8003a18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003152:	609a      	str	r2, [r3, #8]
      break;
 8003154:	e03c      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003162:	461a      	mov	r2, r3
 8003164:	f000 fbdc 	bl	8003920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2150      	movs	r1, #80	@ 0x50
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fc35 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 8003174:	e02c      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003182:	461a      	mov	r2, r3
 8003184:	f000 fbfb 	bl	800397e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2160      	movs	r1, #96	@ 0x60
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fc25 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 8003194:	e01c      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a2:	461a      	mov	r2, r3
 80031a4:	f000 fbbc 	bl	8003920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2140      	movs	r1, #64	@ 0x40
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fc15 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 80031b4:	e00c      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f000 fc0c 	bl	80039de <TIM_ITRx_SetConfig>
      break;
 80031c6:	e003      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      break;
 80031cc:	e000      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80031ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	00100070 	.word	0x00100070
 80031f0:	00100040 	.word	0x00100040
 80031f4:	00100030 	.word	0x00100030
 80031f8:	00100020 	.word	0x00100020

080031fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a42      	ldr	r2, [pc, #264]	@ (8003318 <TIM_Base_SetConfig+0x11c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00f      	beq.n	8003234 <TIM_Base_SetConfig+0x38>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800321a:	d00b      	beq.n	8003234 <TIM_Base_SetConfig+0x38>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3f      	ldr	r2, [pc, #252]	@ (800331c <TIM_Base_SetConfig+0x120>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_Base_SetConfig+0x38>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3e      	ldr	r2, [pc, #248]	@ (8003320 <TIM_Base_SetConfig+0x124>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0x38>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3d      	ldr	r2, [pc, #244]	@ (8003324 <TIM_Base_SetConfig+0x128>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d108      	bne.n	8003246 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800323a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a33      	ldr	r2, [pc, #204]	@ (8003318 <TIM_Base_SetConfig+0x11c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01b      	beq.n	8003286 <TIM_Base_SetConfig+0x8a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003254:	d017      	beq.n	8003286 <TIM_Base_SetConfig+0x8a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a30      	ldr	r2, [pc, #192]	@ (800331c <TIM_Base_SetConfig+0x120>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <TIM_Base_SetConfig+0x8a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2f      	ldr	r2, [pc, #188]	@ (8003320 <TIM_Base_SetConfig+0x124>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00f      	beq.n	8003286 <TIM_Base_SetConfig+0x8a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2e      	ldr	r2, [pc, #184]	@ (8003324 <TIM_Base_SetConfig+0x128>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00b      	beq.n	8003286 <TIM_Base_SetConfig+0x8a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2d      	ldr	r2, [pc, #180]	@ (8003328 <TIM_Base_SetConfig+0x12c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <TIM_Base_SetConfig+0x8a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2c      	ldr	r2, [pc, #176]	@ (800332c <TIM_Base_SetConfig+0x130>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d003      	beq.n	8003286 <TIM_Base_SetConfig+0x8a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <TIM_Base_SetConfig+0x134>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d108      	bne.n	8003298 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800328c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a16      	ldr	r2, [pc, #88]	@ (8003318 <TIM_Base_SetConfig+0x11c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00f      	beq.n	80032e4 <TIM_Base_SetConfig+0xe8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <TIM_Base_SetConfig+0x128>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0xe8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a16      	ldr	r2, [pc, #88]	@ (8003328 <TIM_Base_SetConfig+0x12c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0xe8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a15      	ldr	r2, [pc, #84]	@ (800332c <TIM_Base_SetConfig+0x130>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0xe8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a14      	ldr	r2, [pc, #80]	@ (8003330 <TIM_Base_SetConfig+0x134>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d103      	bne.n	80032ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f023 0201 	bic.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	611a      	str	r2, [r3, #16]
  }
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40013400 	.word	0x40013400
 8003328:	40014000 	.word	0x40014000
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800

08003334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f023 0201 	bic.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0302 	bic.w	r3, r3, #2
 8003380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a2c      	ldr	r2, [pc, #176]	@ (8003440 <TIM_OC1_SetConfig+0x10c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00f      	beq.n	80033b4 <TIM_OC1_SetConfig+0x80>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <TIM_OC1_SetConfig+0x110>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <TIM_OC1_SetConfig+0x80>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a2a      	ldr	r2, [pc, #168]	@ (8003448 <TIM_OC1_SetConfig+0x114>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <TIM_OC1_SetConfig+0x80>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a29      	ldr	r2, [pc, #164]	@ (800344c <TIM_OC1_SetConfig+0x118>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_OC1_SetConfig+0x80>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a28      	ldr	r2, [pc, #160]	@ (8003450 <TIM_OC1_SetConfig+0x11c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10c      	bne.n	80033ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0308 	bic.w	r3, r3, #8
 80033ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <TIM_OC1_SetConfig+0x10c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00f      	beq.n	80033f6 <TIM_OC1_SetConfig+0xc2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003444 <TIM_OC1_SetConfig+0x110>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00b      	beq.n	80033f6 <TIM_OC1_SetConfig+0xc2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <TIM_OC1_SetConfig+0x114>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <TIM_OC1_SetConfig+0xc2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a18      	ldr	r2, [pc, #96]	@ (800344c <TIM_OC1_SetConfig+0x118>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d003      	beq.n	80033f6 <TIM_OC1_SetConfig+0xc2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a17      	ldr	r2, [pc, #92]	@ (8003450 <TIM_OC1_SetConfig+0x11c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40013400 	.word	0x40013400
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800

08003454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f023 0210 	bic.w	r2, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800348e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0320 	bic.w	r3, r3, #32
 80034a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a28      	ldr	r2, [pc, #160]	@ (8003554 <TIM_OC2_SetConfig+0x100>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_OC2_SetConfig+0x6c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a27      	ldr	r2, [pc, #156]	@ (8003558 <TIM_OC2_SetConfig+0x104>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10d      	bne.n	80034dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a1d      	ldr	r2, [pc, #116]	@ (8003554 <TIM_OC2_SetConfig+0x100>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00f      	beq.n	8003504 <TIM_OC2_SetConfig+0xb0>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003558 <TIM_OC2_SetConfig+0x104>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00b      	beq.n	8003504 <TIM_OC2_SetConfig+0xb0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a1b      	ldr	r2, [pc, #108]	@ (800355c <TIM_OC2_SetConfig+0x108>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d007      	beq.n	8003504 <TIM_OC2_SetConfig+0xb0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003560 <TIM_OC2_SetConfig+0x10c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_OC2_SetConfig+0xb0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a19      	ldr	r2, [pc, #100]	@ (8003564 <TIM_OC2_SetConfig+0x110>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d113      	bne.n	800352c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800350a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	621a      	str	r2, [r3, #32]
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40013400 	.word	0x40013400
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800

08003568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a27      	ldr	r2, [pc, #156]	@ (8003664 <TIM_OC3_SetConfig+0xfc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <TIM_OC3_SetConfig+0x6a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a26      	ldr	r2, [pc, #152]	@ (8003668 <TIM_OC3_SetConfig+0x100>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10d      	bne.n	80035ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003664 <TIM_OC3_SetConfig+0xfc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00f      	beq.n	8003616 <TIM_OC3_SetConfig+0xae>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003668 <TIM_OC3_SetConfig+0x100>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00b      	beq.n	8003616 <TIM_OC3_SetConfig+0xae>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a1a      	ldr	r2, [pc, #104]	@ (800366c <TIM_OC3_SetConfig+0x104>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <TIM_OC3_SetConfig+0xae>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a19      	ldr	r2, [pc, #100]	@ (8003670 <TIM_OC3_SetConfig+0x108>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_OC3_SetConfig+0xae>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a18      	ldr	r2, [pc, #96]	@ (8003674 <TIM_OC3_SetConfig+0x10c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d113      	bne.n	800363e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800361c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40013400 	.word	0x40013400
 800366c:	40014000 	.word	0x40014000
 8003670:	40014400 	.word	0x40014400
 8003674:	40014800 	.word	0x40014800

08003678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	031b      	lsls	r3, r3, #12
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a28      	ldr	r2, [pc, #160]	@ (8003778 <TIM_OC4_SetConfig+0x100>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_OC4_SetConfig+0x6c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a27      	ldr	r2, [pc, #156]	@ (800377c <TIM_OC4_SetConfig+0x104>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d10d      	bne.n	8003700 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80036ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	031b      	lsls	r3, r3, #12
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a1d      	ldr	r2, [pc, #116]	@ (8003778 <TIM_OC4_SetConfig+0x100>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00f      	beq.n	8003728 <TIM_OC4_SetConfig+0xb0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <TIM_OC4_SetConfig+0x104>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_OC4_SetConfig+0xb0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <TIM_OC4_SetConfig+0x108>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_OC4_SetConfig+0xb0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a1a      	ldr	r2, [pc, #104]	@ (8003784 <TIM_OC4_SetConfig+0x10c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_OC4_SetConfig+0xb0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a19      	ldr	r2, [pc, #100]	@ (8003788 <TIM_OC4_SetConfig+0x110>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d113      	bne.n	8003750 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800372e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003736:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	019b      	lsls	r3, r3, #6
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80037d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a17      	ldr	r2, [pc, #92]	@ (8003840 <TIM_OC5_SetConfig+0xb4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d00f      	beq.n	8003806 <TIM_OC5_SetConfig+0x7a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a16      	ldr	r2, [pc, #88]	@ (8003844 <TIM_OC5_SetConfig+0xb8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00b      	beq.n	8003806 <TIM_OC5_SetConfig+0x7a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a15      	ldr	r2, [pc, #84]	@ (8003848 <TIM_OC5_SetConfig+0xbc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d007      	beq.n	8003806 <TIM_OC5_SetConfig+0x7a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a14      	ldr	r2, [pc, #80]	@ (800384c <TIM_OC5_SetConfig+0xc0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d003      	beq.n	8003806 <TIM_OC5_SetConfig+0x7a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a13      	ldr	r2, [pc, #76]	@ (8003850 <TIM_OC5_SetConfig+0xc4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d109      	bne.n	800381a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	621a      	str	r2, [r3, #32]
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40013400 	.word	0x40013400
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800

08003854 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800389a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	051b      	lsls	r3, r3, #20
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a18      	ldr	r2, [pc, #96]	@ (800390c <TIM_OC6_SetConfig+0xb8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00f      	beq.n	80038d0 <TIM_OC6_SetConfig+0x7c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a17      	ldr	r2, [pc, #92]	@ (8003910 <TIM_OC6_SetConfig+0xbc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <TIM_OC6_SetConfig+0x7c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a16      	ldr	r2, [pc, #88]	@ (8003914 <TIM_OC6_SetConfig+0xc0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d007      	beq.n	80038d0 <TIM_OC6_SetConfig+0x7c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <TIM_OC6_SetConfig+0xc4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_OC6_SetConfig+0x7c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a14      	ldr	r2, [pc, #80]	@ (800391c <TIM_OC6_SetConfig+0xc8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d109      	bne.n	80038e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	029b      	lsls	r3, r3, #10
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	621a      	str	r2, [r3, #32]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40013400 	.word	0x40013400
 8003914:	40014000 	.word	0x40014000
 8003918:	40014400 	.word	0x40014400
 800391c:	40014800 	.word	0x40014800

08003920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0201 	bic.w	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f023 030a 	bic.w	r3, r3, #10
 800395c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	621a      	str	r2, [r3, #32]
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f023 0210 	bic.w	r2, r3, #16
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80039f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f043 0307 	orr.w	r3, r3, #7
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	021a      	lsls	r2, r3, #8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e065      	b.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2c      	ldr	r2, [pc, #176]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003aaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae6:	d013      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a18      	ldr	r2, [pc, #96]	@ (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a17      	ldr	r2, [pc, #92]	@ (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a13      	ldr	r2, [pc, #76]	@ (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10c      	bne.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40013400 	.word	0x40013400
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40014000 	.word	0x40014000

08003b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e042      	b.n	8003bf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fd f8b3 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2224      	movs	r2, #36	@ 0x24
 8003b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 faf4 	bl	8004194 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f825 	bl	8003bfc <UART_SetConfig>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e01b      	b.n	8003bf4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fb73 	bl	80042d8 <UART_CheckIdleState>
 8003bf2:	4603      	mov	r3, r0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c00:	b08c      	sub	sp, #48	@ 0x30
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4bab      	ldr	r3, [pc, #684]	@ (8003ed8 <UART_SetConfig+0x2dc>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4aa0      	ldr	r2, [pc, #640]	@ (8003edc <UART_SetConfig+0x2e0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c64:	4313      	orrs	r3, r2
 8003c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003c72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	f023 010f 	bic.w	r1, r3, #15
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a91      	ldr	r2, [pc, #580]	@ (8003ee0 <UART_SetConfig+0x2e4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d125      	bne.n	8003cec <UART_SetConfig+0xf0>
 8003ca0:	4b90      	ldr	r3, [pc, #576]	@ (8003ee4 <UART_SetConfig+0x2e8>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d81a      	bhi.n	8003ce4 <UART_SetConfig+0xe8>
 8003cae:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <UART_SetConfig+0xb8>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003cd5 	.word	0x08003cd5
 8003cbc:	08003ccd 	.word	0x08003ccd
 8003cc0:	08003cdd 	.word	0x08003cdd
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cca:	e0d6      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cd2:	e0d2      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cda:	e0ce      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce2:	e0ca      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cea:	e0c6      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a7d      	ldr	r2, [pc, #500]	@ (8003ee8 <UART_SetConfig+0x2ec>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d138      	bne.n	8003d68 <UART_SetConfig+0x16c>
 8003cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee4 <UART_SetConfig+0x2e8>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b0c      	cmp	r3, #12
 8003d02:	d82d      	bhi.n	8003d60 <UART_SetConfig+0x164>
 8003d04:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <UART_SetConfig+0x110>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d41 	.word	0x08003d41
 8003d10:	08003d61 	.word	0x08003d61
 8003d14:	08003d61 	.word	0x08003d61
 8003d18:	08003d61 	.word	0x08003d61
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003d61 	.word	0x08003d61
 8003d24:	08003d61 	.word	0x08003d61
 8003d28:	08003d61 	.word	0x08003d61
 8003d2c:	08003d49 	.word	0x08003d49
 8003d30:	08003d61 	.word	0x08003d61
 8003d34:	08003d61 	.word	0x08003d61
 8003d38:	08003d61 	.word	0x08003d61
 8003d3c:	08003d59 	.word	0x08003d59
 8003d40:	2300      	movs	r3, #0
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d46:	e098      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4e:	e094      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003d50:	2304      	movs	r3, #4
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d56:	e090      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003d58:	2308      	movs	r3, #8
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5e:	e08c      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003d60:	2310      	movs	r3, #16
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d66:	e088      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a5f      	ldr	r2, [pc, #380]	@ (8003eec <UART_SetConfig+0x2f0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d125      	bne.n	8003dbe <UART_SetConfig+0x1c2>
 8003d72:	4b5c      	ldr	r3, [pc, #368]	@ (8003ee4 <UART_SetConfig+0x2e8>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d7c:	2b30      	cmp	r3, #48	@ 0x30
 8003d7e:	d016      	beq.n	8003dae <UART_SetConfig+0x1b2>
 8003d80:	2b30      	cmp	r3, #48	@ 0x30
 8003d82:	d818      	bhi.n	8003db6 <UART_SetConfig+0x1ba>
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d00a      	beq.n	8003d9e <UART_SetConfig+0x1a2>
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d814      	bhi.n	8003db6 <UART_SetConfig+0x1ba>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <UART_SetConfig+0x19a>
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d008      	beq.n	8003da6 <UART_SetConfig+0x1aa>
 8003d94:	e00f      	b.n	8003db6 <UART_SetConfig+0x1ba>
 8003d96:	2300      	movs	r3, #0
 8003d98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d9c:	e06d      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003da4:	e069      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003da6:	2304      	movs	r3, #4
 8003da8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dac:	e065      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003dae:	2308      	movs	r3, #8
 8003db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db4:	e061      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003db6:	2310      	movs	r3, #16
 8003db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dbc:	e05d      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef0 <UART_SetConfig+0x2f4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d125      	bne.n	8003e14 <UART_SetConfig+0x218>
 8003dc8:	4b46      	ldr	r3, [pc, #280]	@ (8003ee4 <UART_SetConfig+0x2e8>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dd4:	d016      	beq.n	8003e04 <UART_SetConfig+0x208>
 8003dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dd8:	d818      	bhi.n	8003e0c <UART_SetConfig+0x210>
 8003dda:	2b80      	cmp	r3, #128	@ 0x80
 8003ddc:	d00a      	beq.n	8003df4 <UART_SetConfig+0x1f8>
 8003dde:	2b80      	cmp	r3, #128	@ 0x80
 8003de0:	d814      	bhi.n	8003e0c <UART_SetConfig+0x210>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <UART_SetConfig+0x1f0>
 8003de6:	2b40      	cmp	r3, #64	@ 0x40
 8003de8:	d008      	beq.n	8003dfc <UART_SetConfig+0x200>
 8003dea:	e00f      	b.n	8003e0c <UART_SetConfig+0x210>
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df2:	e042      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003df4:	2302      	movs	r3, #2
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfa:	e03e      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e02:	e03a      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003e04:	2308      	movs	r3, #8
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0a:	e036      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e12:	e032      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a30      	ldr	r2, [pc, #192]	@ (8003edc <UART_SetConfig+0x2e0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d12a      	bne.n	8003e74 <UART_SetConfig+0x278>
 8003e1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ee4 <UART_SetConfig+0x2e8>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e2c:	d01a      	beq.n	8003e64 <UART_SetConfig+0x268>
 8003e2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e32:	d81b      	bhi.n	8003e6c <UART_SetConfig+0x270>
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e38:	d00c      	beq.n	8003e54 <UART_SetConfig+0x258>
 8003e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e3e:	d815      	bhi.n	8003e6c <UART_SetConfig+0x270>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <UART_SetConfig+0x250>
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e48:	d008      	beq.n	8003e5c <UART_SetConfig+0x260>
 8003e4a:	e00f      	b.n	8003e6c <UART_SetConfig+0x270>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e52:	e012      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003e54:	2302      	movs	r3, #2
 8003e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5a:	e00e      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e62:	e00a      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003e64:	2308      	movs	r3, #8
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6a:	e006      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e72:	e002      	b.n	8003e7a <UART_SetConfig+0x27e>
 8003e74:	2310      	movs	r3, #16
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a17      	ldr	r2, [pc, #92]	@ (8003edc <UART_SetConfig+0x2e0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	f040 80a8 	bne.w	8003fd6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d834      	bhi.n	8003ef8 <UART_SetConfig+0x2fc>
 8003e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <UART_SetConfig+0x298>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003eb9 	.word	0x08003eb9
 8003e98:	08003ef9 	.word	0x08003ef9
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003ef9 	.word	0x08003ef9
 8003ea4:	08003ec7 	.word	0x08003ec7
 8003ea8:	08003ef9 	.word	0x08003ef9
 8003eac:	08003ef9 	.word	0x08003ef9
 8003eb0:	08003ef9 	.word	0x08003ef9
 8003eb4:	08003ecf 	.word	0x08003ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fe f8fe 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ebe:	e021      	b.n	8003f04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef4 <UART_SetConfig+0x2f8>)
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ec4:	e01e      	b.n	8003f04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec6:	f7fe f889 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8003eca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ecc:	e01a      	b.n	8003f04 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ed4:	e016      	b.n	8003f04 <UART_SetConfig+0x308>
 8003ed6:	bf00      	nop
 8003ed8:	cfff69f3 	.word	0xcfff69f3
 8003edc:	40008000 	.word	0x40008000
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40004400 	.word	0x40004400
 8003eec:	40004800 	.word	0x40004800
 8003ef0:	40004c00 	.word	0x40004c00
 8003ef4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 812a 	beq.w	8004160 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	4a9e      	ldr	r2, [pc, #632]	@ (800418c <UART_SetConfig+0x590>)
 8003f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f16:	461a      	mov	r2, r3
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d305      	bcc.n	8003f3c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d903      	bls.n	8003f44 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f42:	e10d      	b.n	8004160 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	2200      	movs	r2, #0
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	60fa      	str	r2, [r7, #12]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	4a8e      	ldr	r2, [pc, #568]	@ (800418c <UART_SetConfig+0x590>)
 8003f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2200      	movs	r2, #0
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f66:	f7fc f9ab 	bl	80002c0 <__aeabi_uldivmod>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	020b      	lsls	r3, r1, #8
 8003f7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f80:	0202      	lsls	r2, r0, #8
 8003f82:	6979      	ldr	r1, [r7, #20]
 8003f84:	6849      	ldr	r1, [r1, #4]
 8003f86:	0849      	lsrs	r1, r1, #1
 8003f88:	2000      	movs	r0, #0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	eb12 0804 	adds.w	r8, r2, r4
 8003f92:	eb43 0905 	adc.w	r9, r3, r5
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	469a      	mov	sl, r3
 8003f9e:	4693      	mov	fp, r2
 8003fa0:	4652      	mov	r2, sl
 8003fa2:	465b      	mov	r3, fp
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	f7fc f98a 	bl	80002c0 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fba:	d308      	bcc.n	8003fce <UART_SetConfig+0x3d2>
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fc2:	d204      	bcs.n	8003fce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	e0c8      	b.n	8004160 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fd4:	e0c4      	b.n	8004160 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fde:	d167      	bne.n	80040b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003fe0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d828      	bhi.n	800403a <UART_SetConfig+0x43e>
 8003fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff0 <UART_SetConfig+0x3f4>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	0800402b 	.word	0x0800402b
 8004004:	0800403b 	.word	0x0800403b
 8004008:	0800403b 	.word	0x0800403b
 800400c:	0800403b 	.word	0x0800403b
 8004010:	08004033 	.word	0x08004033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fe f850 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 8004018:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800401a:	e014      	b.n	8004046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fe f862 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 8004020:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004022:	e010      	b.n	8004046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b5a      	ldr	r3, [pc, #360]	@ (8004190 <UART_SetConfig+0x594>)
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004028:	e00d      	b.n	8004046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fd ffd7 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 800402e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004030:	e009      	b.n	8004046 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004038:	e005      	b.n	8004046 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8089 	beq.w	8004160 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	4a4e      	ldr	r2, [pc, #312]	@ (800418c <UART_SetConfig+0x590>)
 8004054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004058:	461a      	mov	r2, r3
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004060:	005a      	lsls	r2, r3, #1
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	441a      	add	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	2b0f      	cmp	r3, #15
 8004078:	d916      	bls.n	80040a8 <UART_SetConfig+0x4ac>
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004080:	d212      	bcs.n	80040a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f023 030f 	bic.w	r3, r3, #15
 800408a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	b29a      	uxth	r2, r3
 8004098:	8bfb      	ldrh	r3, [r7, #30]
 800409a:	4313      	orrs	r3, r2
 800409c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	8bfa      	ldrh	r2, [r7, #30]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	e05b      	b.n	8004160 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040ae:	e057      	b.n	8004160 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d828      	bhi.n	800410a <UART_SetConfig+0x50e>
 80040b8:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <UART_SetConfig+0x4c4>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	0800410b 	.word	0x0800410b
 80040d0:	080040fb 	.word	0x080040fb
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	0800410b 	.word	0x0800410b
 80040dc:	0800410b 	.word	0x0800410b
 80040e0:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7fd ffe8 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 80040e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040ea:	e014      	b.n	8004116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7fd fffa 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 80040f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040f2:	e010      	b.n	8004116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f4:	4b26      	ldr	r3, [pc, #152]	@ (8004190 <UART_SetConfig+0x594>)
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040f8:	e00d      	b.n	8004116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fa:	f7fd ff6f 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80040fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004100:	e009      	b.n	8004116 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004108:	e005      	b.n	8004116 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004114:	bf00      	nop
    }

    if (pclk != 0U)
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d021      	beq.n	8004160 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	4a1a      	ldr	r2, [pc, #104]	@ (800418c <UART_SetConfig+0x590>)
 8004122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004126:	461a      	mov	r2, r3
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	fbb3 f2f2 	udiv	r2, r3, r2
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	441a      	add	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	2b0f      	cmp	r3, #15
 8004144:	d909      	bls.n	800415a <UART_SetConfig+0x55e>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800414c:	d205      	bcs.n	800415a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	b29a      	uxth	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60da      	str	r2, [r3, #12]
 8004158:	e002      	b.n	8004160 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2201      	movs	r2, #1
 8004164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2201      	movs	r2, #1
 800416c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2200      	movs	r2, #0
 8004174:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800417c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004180:	4618      	mov	r0, r3
 8004182:	3730      	adds	r7, #48	@ 0x30
 8004184:	46bd      	mov	sp, r7
 8004186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418a:	bf00      	nop
 800418c:	080063b4 	.word	0x080063b4
 8004190:	00f42400 	.word	0x00f42400

08004194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004292:	d10a      	bne.n	80042aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b098      	sub	sp, #96	@ 0x60
 80042dc:	af02      	add	r7, sp, #8
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e8:	f7fc feca 	bl	8001080 <HAL_GetTick>
 80042ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d12f      	bne.n	800435c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	2200      	movs	r2, #0
 8004306:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f88e 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d022      	beq.n	800435c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800432a:	653b      	str	r3, [r7, #80]	@ 0x50
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004334:	647b      	str	r3, [r7, #68]	@ 0x44
 8004336:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800433a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e6      	bne.n	8004316 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e063      	b.n	8004424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b04      	cmp	r3, #4
 8004368:	d149      	bne.n	80043fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800436a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004372:	2200      	movs	r2, #0
 8004374:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f857 	bl	800442c <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d03c      	beq.n	80043fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	623b      	str	r3, [r7, #32]
   return(result);
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e6      	bne.n	8004384 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3308      	adds	r3, #8
 80043d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043d6:	61fa      	str	r2, [r7, #28]
 80043d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	69b9      	ldr	r1, [r7, #24]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	617b      	str	r3, [r7, #20]
   return(result);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e5      	bne.n	80043b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e012      	b.n	8004424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3758      	adds	r7, #88	@ 0x58
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443c:	e04f      	b.n	80044de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d04b      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fc fe1b 	bl	8001080 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <UART_WaitOnFlagUntilTimeout+0x30>
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e04e      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d037      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0xb2>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	d034      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0xb2>
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d031      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b08      	cmp	r3, #8
 8004486:	d110      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2208      	movs	r2, #8
 800448e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f838 	bl	8004506 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2208      	movs	r2, #8
 800449a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e029      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b8:	d111      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f81e 	bl	8004506 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e00f      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d0a0      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b095      	sub	sp, #84	@ 0x54
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800452c:	643b      	str	r3, [r7, #64]	@ 0x40
 800452e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004532:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800453a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e6      	bne.n	800450e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3308      	adds	r3, #8
 8004546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004564:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004566:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800456a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e3      	bne.n	8004540 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d118      	bne.n	80045b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	60bb      	str	r3, [r7, #8]
   return(result);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0310 	bic.w	r3, r3, #16
 8004594:	647b      	str	r3, [r7, #68]	@ 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6979      	ldr	r1, [r7, #20]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	613b      	str	r3, [r7, #16]
   return(result);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e6      	bne.n	8004580 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045c6:	bf00      	nop
 80045c8:	3754      	adds	r7, #84	@ 0x54
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e027      	b.n	8004638 <HAL_UARTEx_DisableFifoMode+0x66>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	@ 0x24
 80045f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004616:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004658:	2302      	movs	r3, #2
 800465a:	e02d      	b.n	80046b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2224      	movs	r2, #36	@ 0x24
 8004668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f84f 	bl	800473c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e02d      	b.n	8004734 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	@ 0x24
 80046e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f811 	bl	800473c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004748:	2b00      	cmp	r3, #0
 800474a:	d108      	bne.n	800475e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800475c:	e031      	b.n	80047c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800475e:	2308      	movs	r3, #8
 8004760:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004762:	2308      	movs	r3, #8
 8004764:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	0e5b      	lsrs	r3, r3, #25
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	0f5b      	lsrs	r3, r3, #29
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004786:	7bbb      	ldrb	r3, [r7, #14]
 8004788:	7b3a      	ldrb	r2, [r7, #12]
 800478a:	4911      	ldr	r1, [pc, #68]	@ (80047d0 <UARTEx_SetNbDataToProcess+0x94>)
 800478c:	5c8a      	ldrb	r2, [r1, r2]
 800478e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004792:	7b3a      	ldrb	r2, [r7, #12]
 8004794:	490f      	ldr	r1, [pc, #60]	@ (80047d4 <UARTEx_SetNbDataToProcess+0x98>)
 8004796:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004798:	fb93 f3f2 	sdiv	r3, r3, r2
 800479c:	b29a      	uxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	7b7a      	ldrb	r2, [r7, #13]
 80047a8:	4909      	ldr	r1, [pc, #36]	@ (80047d0 <UARTEx_SetNbDataToProcess+0x94>)
 80047aa:	5c8a      	ldrb	r2, [r1, r2]
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047b0:	7b7a      	ldrb	r2, [r7, #13]
 80047b2:	4908      	ldr	r1, [pc, #32]	@ (80047d4 <UARTEx_SetNbDataToProcess+0x98>)
 80047b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	080063cc 	.word	0x080063cc
 80047d4:	080063d4 	.word	0x080063d4

080047d8 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 80047e2:	1df9      	adds	r1, r7, #7
 80047e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80047e8:	2201      	movs	r2, #1
 80047ea:	4803      	ldr	r0, [pc, #12]	@ (80047f8 <DEV_SPI_WRite+0x20>)
 80047ec:	f7fd ff71 	bl	80026d2 <HAL_SPI_Transmit>
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000094 	.word	0x20000094

080047fc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	461a      	mov	r2, r3
 800480a:	4623      	mov	r3, r4
 800480c:	80fb      	strh	r3, [r7, #6]
 800480e:	4603      	mov	r3, r0
 8004810:	80bb      	strh	r3, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	807b      	strh	r3, [r7, #2]
 8004816:	4613      	mov	r3, r2
 8004818:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800481a:	4a1c      	ldr	r2, [pc, #112]	@ (800488c <Paint_NewImage+0x90>)
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8004820:	4a1a      	ldr	r2, [pc, #104]	@ (800488c <Paint_NewImage+0x90>)
 8004822:	88bb      	ldrh	r3, [r7, #4]
 8004824:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8004826:	4a19      	ldr	r2, [pc, #100]	@ (800488c <Paint_NewImage+0x90>)
 8004828:	883b      	ldrh	r3, [r7, #0]
 800482a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800482c:	4a17      	ldr	r2, [pc, #92]	@ (800488c <Paint_NewImage+0x90>)
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8004832:	4a16      	ldr	r2, [pc, #88]	@ (800488c <Paint_NewImage+0x90>)
 8004834:	88bb      	ldrh	r3, [r7, #4]
 8004836:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8004838:	4b14      	ldr	r3, [pc, #80]	@ (800488c <Paint_NewImage+0x90>)
 800483a:	8a5b      	ldrh	r3, [r3, #18]
 800483c:	b29b      	uxth	r3, r3
 800483e:	4619      	mov	r1, r3
 8004840:	4b12      	ldr	r3, [pc, #72]	@ (800488c <Paint_NewImage+0x90>)
 8004842:	8a9b      	ldrh	r3, [r3, #20]
 8004844:	b29b      	uxth	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	4811      	ldr	r0, [pc, #68]	@ (8004890 <Paint_NewImage+0x94>)
 800484a:	f000 fdd3 	bl	80053f4 <iprintf>
   
    Paint.Rotate = Rotate;
 800484e:	4a0f      	ldr	r2, [pc, #60]	@ (800488c <Paint_NewImage+0x90>)
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8004854:	4b0d      	ldr	r3, [pc, #52]	@ (800488c <Paint_NewImage+0x90>)
 8004856:	2200      	movs	r2, #0
 8004858:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800485a:	887b      	ldrh	r3, [r7, #2]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <Paint_NewImage+0x6a>
 8004860:	887b      	ldrh	r3, [r7, #2]
 8004862:	2bb4      	cmp	r3, #180	@ 0xb4
 8004864:	d106      	bne.n	8004874 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8004866:	4a09      	ldr	r2, [pc, #36]	@ (800488c <Paint_NewImage+0x90>)
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800486c:	4a07      	ldr	r2, [pc, #28]	@ (800488c <Paint_NewImage+0x90>)
 800486e:	88bb      	ldrh	r3, [r7, #4]
 8004870:	80d3      	strh	r3, [r2, #6]
 8004872:	e006      	b.n	8004882 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8004874:	4a05      	ldr	r2, [pc, #20]	@ (800488c <Paint_NewImage+0x90>)
 8004876:	88bb      	ldrh	r3, [r7, #4]
 8004878:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800487a:	4a04      	ldr	r2, [pc, #16]	@ (800488c <Paint_NewImage+0x90>)
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	80d3      	strh	r3, [r2, #6]
    }
}
 8004880:	bf00      	nop
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bd90      	pop	{r4, r7, pc}
 800488a:	bf00      	nop
 800488c:	2000022c 	.word	0x2000022c
 8004890:	080060a8 	.word	0x080060a8

08004894 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 800489c:	4a04      	ldr	r2, [pc, #16]	@ (80048b0 <Paint_SetClearFuntion+0x1c>)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6013      	str	r3, [r2, #0]
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20000248 	.word	0x20000248

080048b4 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80048bc:	4a04      	ldr	r2, [pc, #16]	@ (80048d0 <Paint_SetDisplayFuntion+0x1c>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6013      	str	r3, [r2, #0]
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000244 	.word	0x20000244

080048d4 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	80fb      	strh	r3, [r7, #6]
 80048de:	460b      	mov	r3, r1
 80048e0:	80bb      	strh	r3, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80048e6:	4b50      	ldr	r3, [pc, #320]	@ (8004a28 <Paint_SetPixel+0x154>)
 80048e8:	889b      	ldrh	r3, [r3, #4]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	88fa      	ldrh	r2, [r7, #6]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d805      	bhi.n	80048fe <Paint_SetPixel+0x2a>
 80048f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004a28 <Paint_SetPixel+0x154>)
 80048f4:	88db      	ldrh	r3, [r3, #6]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	88ba      	ldrh	r2, [r7, #4]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d903      	bls.n	8004906 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 80048fe:	484b      	ldr	r0, [pc, #300]	@ (8004a2c <Paint_SetPixel+0x158>)
 8004900:	f000 fde0 	bl	80054c4 <puts>
        return;
 8004904:	e08c      	b.n	8004a20 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8004906:	4b48      	ldr	r3, [pc, #288]	@ (8004a28 <Paint_SetPixel+0x154>)
 8004908:	89db      	ldrh	r3, [r3, #14]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8004910:	d02d      	beq.n	800496e <Paint_SetPixel+0x9a>
 8004912:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8004916:	f300 8080 	bgt.w	8004a1a <Paint_SetPixel+0x146>
 800491a:	2bb4      	cmp	r3, #180	@ 0xb4
 800491c:	d016      	beq.n	800494c <Paint_SetPixel+0x78>
 800491e:	2bb4      	cmp	r3, #180	@ 0xb4
 8004920:	dc7b      	bgt.n	8004a1a <Paint_SetPixel+0x146>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <Paint_SetPixel+0x58>
 8004926:	2b5a      	cmp	r3, #90	@ 0x5a
 8004928:	d005      	beq.n	8004936 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800492a:	e076      	b.n	8004a1a <Paint_SetPixel+0x146>
        X = Xpoint;
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8004930:	88bb      	ldrh	r3, [r7, #4]
 8004932:	81bb      	strh	r3, [r7, #12]
        break;
 8004934:	e026      	b.n	8004984 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8004936:	4b3c      	ldr	r3, [pc, #240]	@ (8004a28 <Paint_SetPixel+0x154>)
 8004938:	891b      	ldrh	r3, [r3, #8]
 800493a:	b29a      	uxth	r2, r3
 800493c:	88bb      	ldrh	r3, [r7, #4]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	81bb      	strh	r3, [r7, #12]
        break;
 800494a:	e01b      	b.n	8004984 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 800494c:	4b36      	ldr	r3, [pc, #216]	@ (8004a28 <Paint_SetPixel+0x154>)
 800494e:	891b      	ldrh	r3, [r3, #8]
 8004950:	b29a      	uxth	r2, r3
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800495c:	4b32      	ldr	r3, [pc, #200]	@ (8004a28 <Paint_SetPixel+0x154>)
 800495e:	895b      	ldrh	r3, [r3, #10]
 8004960:	b29a      	uxth	r2, r3
 8004962:	88bb      	ldrh	r3, [r7, #4]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	81bb      	strh	r3, [r7, #12]
        break;
 800496c:	e00a      	b.n	8004984 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800496e:	88bb      	ldrh	r3, [r7, #4]
 8004970:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8004972:	4b2d      	ldr	r3, [pc, #180]	@ (8004a28 <Paint_SetPixel+0x154>)
 8004974:	895b      	ldrh	r3, [r3, #10]
 8004976:	b29a      	uxth	r2, r3
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	81bb      	strh	r3, [r7, #12]
        break;
 8004982:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8004984:	4b28      	ldr	r3, [pc, #160]	@ (8004a28 <Paint_SetPixel+0x154>)
 8004986:	8a1b      	ldrh	r3, [r3, #16]
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b03      	cmp	r3, #3
 800498c:	d847      	bhi.n	8004a1e <Paint_SetPixel+0x14a>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <Paint_SetPixel+0xc0>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049eb 	.word	0x080049eb
 8004998:	080049a5 	.word	0x080049a5
 800499c:	080049b7 	.word	0x080049b7
 80049a0:	080049c9 	.word	0x080049c9
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80049a4:	4b20      	ldr	r3, [pc, #128]	@ (8004a28 <Paint_SetPixel+0x154>)
 80049a6:	891b      	ldrh	r3, [r3, #8]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	89fb      	ldrh	r3, [r7, #14]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	81fb      	strh	r3, [r7, #14]
        break;
 80049b4:	e01a      	b.n	80049ec <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80049b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a28 <Paint_SetPixel+0x154>)
 80049b8:	895b      	ldrh	r3, [r3, #10]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	89bb      	ldrh	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	81bb      	strh	r3, [r7, #12]
        break;
 80049c6:	e011      	b.n	80049ec <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80049c8:	4b17      	ldr	r3, [pc, #92]	@ (8004a28 <Paint_SetPixel+0x154>)
 80049ca:	891b      	ldrh	r3, [r3, #8]
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	89fb      	ldrh	r3, [r7, #14]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 80049d8:	4b13      	ldr	r3, [pc, #76]	@ (8004a28 <Paint_SetPixel+0x154>)
 80049da:	895b      	ldrh	r3, [r3, #10]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	89bb      	ldrh	r3, [r7, #12]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	81bb      	strh	r3, [r7, #12]
        break;
 80049e8:	e000      	b.n	80049ec <Paint_SetPixel+0x118>
        break;
 80049ea:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80049ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <Paint_SetPixel+0x154>)
 80049ee:	891b      	ldrh	r3, [r3, #8]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	89fa      	ldrh	r2, [r7, #14]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d805      	bhi.n	8004a04 <Paint_SetPixel+0x130>
 80049f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <Paint_SetPixel+0x154>)
 80049fa:	895b      	ldrh	r3, [r3, #10]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	89ba      	ldrh	r2, [r7, #12]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d903      	bls.n	8004a0c <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8004a04:	4809      	ldr	r0, [pc, #36]	@ (8004a2c <Paint_SetPixel+0x158>)
 8004a06:	f000 fd5d 	bl	80054c4 <puts>
        return;
 8004a0a:	e009      	b.n	8004a20 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8004a0c:	4b08      	ldr	r3, [pc, #32]	@ (8004a30 <Paint_SetPixel+0x15c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	887a      	ldrh	r2, [r7, #2]
 8004a12:	89b9      	ldrh	r1, [r7, #12]
 8004a14:	89f8      	ldrh	r0, [r7, #14]
 8004a16:	4798      	blx	r3
 8004a18:	e002      	b.n	8004a20 <Paint_SetPixel+0x14c>
        return;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <Paint_SetPixel+0x14c>
        return;
 8004a1e:	bf00      	nop
}
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	2000022c 	.word	0x2000022c
 8004a2c:	080061a8 	.word	0x080061a8
 8004a30:	20000244 	.word	0x20000244

08004a34 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	81fb      	strh	r3, [r7, #14]
 8004a40:	460b      	mov	r3, r1
 8004a42:	81bb      	strh	r3, [r7, #12]
 8004a44:	4613      	mov	r3, r2
 8004a46:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004a48:	4b4e      	ldr	r3, [pc, #312]	@ (8004b84 <Paint_DrawChar+0x150>)
 8004a4a:	889b      	ldrh	r3, [r3, #4]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	89fa      	ldrh	r2, [r7, #14]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d805      	bhi.n	8004a60 <Paint_DrawChar+0x2c>
 8004a54:	4b4b      	ldr	r3, [pc, #300]	@ (8004b84 <Paint_DrawChar+0x150>)
 8004a56:	88db      	ldrh	r3, [r3, #6]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	89ba      	ldrh	r2, [r7, #12]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d903      	bls.n	8004a68 <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8004a60:	4849      	ldr	r0, [pc, #292]	@ (8004b88 <Paint_DrawChar+0x154>)
 8004a62:	f000 fd2f 	bl	80054c4 <puts>
        return;
 8004a66:	e089      	b.n	8004b7c <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8004a68:	7afb      	ldrb	r3, [r7, #11]
 8004a6a:	3b20      	subs	r3, #32
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	88d2      	ldrh	r2, [r2, #6]
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	8892      	ldrh	r2, [r2, #4]
 8004a78:	08d2      	lsrs	r2, r2, #3
 8004a7a:	b292      	uxth	r2, r2
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	8892      	ldrh	r2, [r2, #4]
 8004a82:	f002 0207 	and.w	r2, r2, #7
 8004a86:	b292      	uxth	r2, r2
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	bf14      	ite	ne
 8004a8c:	2201      	movne	r2, #1
 8004a8e:	2200      	moveq	r2, #0
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	440a      	add	r2, r1
 8004a94:	fb02 f303 	mul.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	83fb      	strh	r3, [r7, #30]
 8004aa8:	e063      	b.n	8004b72 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004aaa:	2300      	movs	r3, #0
 8004aac:	83bb      	strh	r3, [r7, #28]
 8004aae:	e04e      	b.n	8004b4e <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8004ab0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d118      	bne.n	8004aec <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	8bbb      	ldrh	r3, [r7, #28]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2280      	movs	r2, #128	@ 0x80
 8004ac8:	fa42 f303 	asr.w	r3, r2, r3
 8004acc:	400b      	ands	r3, r1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d031      	beq.n	8004b36 <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004ad2:	89fa      	ldrh	r2, [r7, #14]
 8004ad4:	8bbb      	ldrh	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	b298      	uxth	r0, r3
 8004ada:	89ba      	ldrh	r2, [r7, #12]
 8004adc:	8bfb      	ldrh	r3, [r7, #30]
 8004ade:	4413      	add	r3, r2
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f7ff fef5 	bl	80048d4 <Paint_SetPixel>
 8004aea:	e024      	b.n	8004b36 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	4619      	mov	r1, r3
 8004af2:	8bbb      	ldrh	r3, [r7, #28]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	2280      	movs	r2, #128	@ 0x80
 8004afa:	fa42 f303 	asr.w	r3, r2, r3
 8004afe:	400b      	ands	r3, r1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8004b04:	89fa      	ldrh	r2, [r7, #14]
 8004b06:	8bbb      	ldrh	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	b298      	uxth	r0, r3
 8004b0c:	89ba      	ldrh	r2, [r7, #12]
 8004b0e:	8bfb      	ldrh	r3, [r7, #30]
 8004b10:	4413      	add	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004b16:	4619      	mov	r1, r3
 8004b18:	f7ff fedc 	bl	80048d4 <Paint_SetPixel>
 8004b1c:	e00b      	b.n	8004b36 <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8004b1e:	89fa      	ldrh	r2, [r7, #14]
 8004b20:	8bbb      	ldrh	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	b298      	uxth	r0, r3
 8004b26:	89ba      	ldrh	r2, [r7, #12]
 8004b28:	8bfb      	ldrh	r3, [r7, #30]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004b30:	4619      	mov	r1, r3
 8004b32:	f7ff fecf 	bl	80048d4 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8004b36:	8bbb      	ldrh	r3, [r7, #28]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b07      	cmp	r3, #7
 8004b40:	d102      	bne.n	8004b48 <Paint_DrawChar+0x114>
                ptr++;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	3301      	adds	r3, #1
 8004b46:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004b48:	8bbb      	ldrh	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	83bb      	strh	r3, [r7, #28]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	889b      	ldrh	r3, [r3, #4]
 8004b52:	8bba      	ldrh	r2, [r7, #28]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d3ab      	bcc.n	8004ab0 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	889b      	ldrh	r3, [r3, #4]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <Paint_DrawChar+0x138>
            ptr++;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8004b6c:	8bfb      	ldrh	r3, [r7, #30]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	83fb      	strh	r3, [r7, #30]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	88db      	ldrh	r3, [r3, #6]
 8004b76:	8bfa      	ldrh	r2, [r7, #30]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d396      	bcc.n	8004aaa <Paint_DrawChar+0x76>
    }// Write all
}
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	2000022c 	.word	0x2000022c
 8004b88:	080062c4 	.word	0x080062c4

08004b8c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60ba      	str	r2, [r7, #8]
 8004b94:	607b      	str	r3, [r7, #4]
 8004b96:	4603      	mov	r3, r0
 8004b98:	81fb      	strh	r3, [r7, #14]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8004b9e:	89fb      	ldrh	r3, [r7, #14]
 8004ba0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8004ba2:	89bb      	ldrh	r3, [r7, #12]
 8004ba4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8004ba6:	4b23      	ldr	r3, [pc, #140]	@ (8004c34 <Paint_DrawString_EN+0xa8>)
 8004ba8:	889b      	ldrh	r3, [r3, #4]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	89fa      	ldrh	r2, [r7, #14]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d805      	bhi.n	8004bbe <Paint_DrawString_EN+0x32>
 8004bb2:	4b20      	ldr	r3, [pc, #128]	@ (8004c34 <Paint_DrawString_EN+0xa8>)
 8004bb4:	88db      	ldrh	r3, [r3, #6]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	89ba      	ldrh	r2, [r7, #12]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d933      	bls.n	8004c26 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8004bbe:	481e      	ldr	r0, [pc, #120]	@ (8004c38 <Paint_DrawString_EN+0xac>)
 8004bc0:	f000 fc80 	bl	80054c4 <puts>
        return;
 8004bc4:	e033      	b.n	8004c2e <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8004bc6:	8afb      	ldrh	r3, [r7, #22]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	8892      	ldrh	r2, [r2, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	4a19      	ldr	r2, [pc, #100]	@ (8004c34 <Paint_DrawString_EN+0xa8>)
 8004bd0:	8892      	ldrh	r2, [r2, #4]
 8004bd2:	b292      	uxth	r2, r2
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	dd06      	ble.n	8004be6 <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	88da      	ldrh	r2, [r3, #6]
 8004be0:	8abb      	ldrh	r3, [r7, #20]
 8004be2:	4413      	add	r3, r2
 8004be4:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8004be6:	8abb      	ldrh	r3, [r7, #20]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	88d2      	ldrh	r2, [r2, #6]
 8004bec:	4413      	add	r3, r2
 8004bee:	4a11      	ldr	r2, [pc, #68]	@ (8004c34 <Paint_DrawString_EN+0xa8>)
 8004bf0:	88d2      	ldrh	r2, [r2, #6]
 8004bf2:	b292      	uxth	r2, r2
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	dd03      	ble.n	8004c00 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 8004bf8:	89fb      	ldrh	r3, [r7, #14]
 8004bfa:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8004bfc:	89bb      	ldrh	r3, [r7, #12]
 8004bfe:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	8ab9      	ldrh	r1, [r7, #20]
 8004c06:	8af8      	ldrh	r0, [r7, #22]
 8004c08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	8c3b      	ldrh	r3, [r7, #32]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f7ff ff0f 	bl	8004a34 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	889a      	ldrh	r2, [r3, #4]
 8004c20:	8afb      	ldrh	r3, [r7, #22]
 8004c22:	4413      	add	r3, r2
 8004c24:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1cb      	bne.n	8004bc6 <Paint_DrawString_EN+0x3a>
    }
}
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	2000022c 	.word	0x2000022c
 8004c38:	08006304 	.word	0x08006304

08004c3c <LCD_1IN47_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN47_Reset(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
	LCD_1IN47_RST_1;
 8004c40:	2201      	movs	r2, #1
 8004c42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c4a:	f7fc fcad 	bl	80015a8 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8004c4e:	2064      	movs	r0, #100	@ 0x64
 8004c50:	f7fc fa22 	bl	8001098 <HAL_Delay>
	LCD_1IN47_RST_0;
 8004c54:	2200      	movs	r2, #0
 8004c56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c5e:	f7fc fca3 	bl	80015a8 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8004c62:	2064      	movs	r0, #100	@ 0x64
 8004c64:	f7fc fa18 	bl	8001098 <HAL_Delay>
	LCD_1IN47_RST_1;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c72:	f7fc fc99 	bl	80015a8 <HAL_GPIO_WritePin>
	DEV_Delay_ms(100);
 8004c76:	2064      	movs	r0, #100	@ 0x64
 8004c78:	f7fc fa0e 	bl	8001098 <HAL_Delay>
}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <LCD_1IN47_SendCommand>:
function :	send command
parameter:
	 Reg : Command register
******************************************************************************/
static void LCD_1IN47_SendCommand(UBYTE Reg)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
	LCD_1IN47_DC_0;
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c94:	f7fc fc88 	bl	80015a8 <HAL_GPIO_WritePin>
	LCD_1IN47_CS_0;
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2140      	movs	r1, #64	@ 0x40
 8004c9c:	4805      	ldr	r0, [pc, #20]	@ (8004cb4 <LCD_1IN47_SendCommand+0x34>)
 8004c9e:	f7fc fc83 	bl	80015a8 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE(Reg);
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fd97 	bl	80047d8 <DEV_SPI_WRite>
	//LCD_1IN47_CS_1;
}
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	48000400 	.word	0x48000400

08004cb8 <LCD_1IN47_SendData_8Bit>:
function :	send data
parameter:
	Data : Write data
******************************************************************************/
static void LCD_1IN47_SendData_8Bit(UBYTE Data)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	71fb      	strb	r3, [r7, #7]
	LCD_1IN47_DC_1;
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ccc:	f7fc fc6c 	bl	80015a8 <HAL_GPIO_WritePin>
	//LCD_1IN47_CS_0;
	DEV_SPI_WRITE(Data);
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fd80 	bl	80047d8 <DEV_SPI_WRite>
	//LCD_1IN47_CS_1;
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <LCD_1IN47_SendData_16Bit>:
function :	send data
parameter:
	Data : Write data
******************************************************************************/
static void LCD_1IN47_SendData_16Bit(UWORD Data)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	80fb      	strh	r3, [r7, #6]
	LCD_1IN47_DC_1;
 8004cea:	2201      	movs	r2, #1
 8004cec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cf4:	f7fc fc58 	bl	80015a8 <HAL_GPIO_WritePin>
	LCD_1IN47_CS_0;
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2140      	movs	r1, #64	@ 0x40
 8004cfc:	480b      	ldr	r0, [pc, #44]	@ (8004d2c <LCD_1IN47_SendData_16Bit+0x4c>)
 8004cfe:	f7fc fc53 	bl	80015a8 <HAL_GPIO_WritePin>
	DEV_SPI_WRITE((Data >> 8) & 0xFF);
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	0a1b      	lsrs	r3, r3, #8
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fd64 	bl	80047d8 <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data & 0xFF);
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fd5f 	bl	80047d8 <DEV_SPI_WRite>
	LCD_1IN47_CS_1;
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	2140      	movs	r1, #64	@ 0x40
 8004d1e:	4803      	ldr	r0, [pc, #12]	@ (8004d2c <LCD_1IN47_SendData_16Bit+0x4c>)
 8004d20:	f7fc fc42 	bl	80015a8 <HAL_GPIO_WritePin>
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	48000400 	.word	0x48000400

08004d30 <LCD_1IN47_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN47_InitReg(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
	LCD_1IN47_SendCommand(0x11);
 8004d34:	2011      	movs	r0, #17
 8004d36:	f7ff ffa3 	bl	8004c80 <LCD_1IN47_SendCommand>
	DEV_Delay_ms(120);
 8004d3a:	2078      	movs	r0, #120	@ 0x78
 8004d3c:	f7fc f9ac 	bl	8001098 <HAL_Delay>

	LCD_1IN47_SendCommand(0x3A);
 8004d40:	203a      	movs	r0, #58	@ 0x3a
 8004d42:	f7ff ff9d 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x05);
 8004d46:	2005      	movs	r0, #5
 8004d48:	f7ff ffb6 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xB2);
 8004d4c:	20b2      	movs	r0, #178	@ 0xb2
 8004d4e:	f7ff ff97 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x0C);
 8004d52:	200c      	movs	r0, #12
 8004d54:	f7ff ffb0 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x0C);
 8004d58:	200c      	movs	r0, #12
 8004d5a:	f7ff ffad 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x00);
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f7ff ffaa 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x33);
 8004d64:	2033      	movs	r0, #51	@ 0x33
 8004d66:	f7ff ffa7 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x33);
 8004d6a:	2033      	movs	r0, #51	@ 0x33
 8004d6c:	f7ff ffa4 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xB7);
 8004d70:	20b7      	movs	r0, #183	@ 0xb7
 8004d72:	f7ff ff85 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x35);
 8004d76:	2035      	movs	r0, #53	@ 0x35
 8004d78:	f7ff ff9e 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xBB);
 8004d7c:	20bb      	movs	r0, #187	@ 0xbb
 8004d7e:	f7ff ff7f 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x35);
 8004d82:	2035      	movs	r0, #53	@ 0x35
 8004d84:	f7ff ff98 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC0);
 8004d88:	20c0      	movs	r0, #192	@ 0xc0
 8004d8a:	f7ff ff79 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x2C);
 8004d8e:	202c      	movs	r0, #44	@ 0x2c
 8004d90:	f7ff ff92 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC2);
 8004d94:	20c2      	movs	r0, #194	@ 0xc2
 8004d96:	f7ff ff73 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x01);
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	f7ff ff8c 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC3);
 8004da0:	20c3      	movs	r0, #195	@ 0xc3
 8004da2:	f7ff ff6d 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x13);
 8004da6:	2013      	movs	r0, #19
 8004da8:	f7ff ff86 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC4);
 8004dac:	20c4      	movs	r0, #196	@ 0xc4
 8004dae:	f7ff ff67 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x20);
 8004db2:	2020      	movs	r0, #32
 8004db4:	f7ff ff80 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xC6);
 8004db8:	20c6      	movs	r0, #198	@ 0xc6
 8004dba:	f7ff ff61 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0x0F);
 8004dbe:	200f      	movs	r0, #15
 8004dc0:	f7ff ff7a 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xD0);
 8004dc4:	20d0      	movs	r0, #208	@ 0xd0
 8004dc6:	f7ff ff5b 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0xA4);
 8004dca:	20a4      	movs	r0, #164	@ 0xa4
 8004dcc:	f7ff ff74 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0xA1);
 8004dd0:	20a1      	movs	r0, #161	@ 0xa1
 8004dd2:	f7ff ff71 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xD6);
 8004dd6:	20d6      	movs	r0, #214	@ 0xd6
 8004dd8:	f7ff ff52 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0xA1);
 8004ddc:	20a1      	movs	r0, #161	@ 0xa1
 8004dde:	f7ff ff6b 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xE0);
 8004de2:	20e0      	movs	r0, #224	@ 0xe0
 8004de4:	f7ff ff4c 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0xF0);
 8004de8:	20f0      	movs	r0, #240	@ 0xf0
 8004dea:	f7ff ff65 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x00);
 8004dee:	2000      	movs	r0, #0
 8004df0:	f7ff ff62 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x04);
 8004df4:	2004      	movs	r0, #4
 8004df6:	f7ff ff5f 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x04);
 8004dfa:	2004      	movs	r0, #4
 8004dfc:	f7ff ff5c 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x04);
 8004e00:	2004      	movs	r0, #4
 8004e02:	f7ff ff59 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x05);
 8004e06:	2005      	movs	r0, #5
 8004e08:	f7ff ff56 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x29);
 8004e0c:	2029      	movs	r0, #41	@ 0x29
 8004e0e:	f7ff ff53 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x33);
 8004e12:	2033      	movs	r0, #51	@ 0x33
 8004e14:	f7ff ff50 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x3E);
 8004e18:	203e      	movs	r0, #62	@ 0x3e
 8004e1a:	f7ff ff4d 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x38);
 8004e1e:	2038      	movs	r0, #56	@ 0x38
 8004e20:	f7ff ff4a 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x12);
 8004e24:	2012      	movs	r0, #18
 8004e26:	f7ff ff47 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x12);
 8004e2a:	2012      	movs	r0, #18
 8004e2c:	f7ff ff44 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x28);
 8004e30:	2028      	movs	r0, #40	@ 0x28
 8004e32:	f7ff ff41 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x30);
 8004e36:	2030      	movs	r0, #48	@ 0x30
 8004e38:	f7ff ff3e 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0xE1);
 8004e3c:	20e1      	movs	r0, #225	@ 0xe1
 8004e3e:	f7ff ff1f 	bl	8004c80 <LCD_1IN47_SendCommand>
	LCD_1IN47_SendData_8Bit(0xF0);
 8004e42:	20f0      	movs	r0, #240	@ 0xf0
 8004e44:	f7ff ff38 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x07);
 8004e48:	2007      	movs	r0, #7
 8004e4a:	f7ff ff35 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x0A);
 8004e4e:	200a      	movs	r0, #10
 8004e50:	f7ff ff32 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x0D);
 8004e54:	200d      	movs	r0, #13
 8004e56:	f7ff ff2f 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x0B);
 8004e5a:	200b      	movs	r0, #11
 8004e5c:	f7ff ff2c 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x07);
 8004e60:	2007      	movs	r0, #7
 8004e62:	f7ff ff29 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x28);
 8004e66:	2028      	movs	r0, #40	@ 0x28
 8004e68:	f7ff ff26 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x33);
 8004e6c:	2033      	movs	r0, #51	@ 0x33
 8004e6e:	f7ff ff23 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x3E);
 8004e72:	203e      	movs	r0, #62	@ 0x3e
 8004e74:	f7ff ff20 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x36);
 8004e78:	2036      	movs	r0, #54	@ 0x36
 8004e7a:	f7ff ff1d 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x14);
 8004e7e:	2014      	movs	r0, #20
 8004e80:	f7ff ff1a 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x14);
 8004e84:	2014      	movs	r0, #20
 8004e86:	f7ff ff17 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x29);
 8004e8a:	2029      	movs	r0, #41	@ 0x29
 8004e8c:	f7ff ff14 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	LCD_1IN47_SendData_8Bit(0x32);
 8004e90:	2032      	movs	r0, #50	@ 0x32
 8004e92:	f7ff ff11 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

	LCD_1IN47_SendCommand(0x21);
 8004e96:	2021      	movs	r0, #33	@ 0x21
 8004e98:	f7ff fef2 	bl	8004c80 <LCD_1IN47_SendCommand>

	LCD_1IN47_SendCommand(0x11);
 8004e9c:	2011      	movs	r0, #17
 8004e9e:	f7ff feef 	bl	8004c80 <LCD_1IN47_SendCommand>
	DEV_Delay_ms(120);
 8004ea2:	2078      	movs	r0, #120	@ 0x78
 8004ea4:	f7fc f8f8 	bl	8001098 <HAL_Delay>
	LCD_1IN47_SendCommand(0x29);
 8004ea8:	2029      	movs	r0, #41	@ 0x29
 8004eaa:	f7ff fee9 	bl	8004c80 <LCD_1IN47_SendCommand>
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <LCD_1IN47_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN47_SetAttributes(UBYTE Scan_dir)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	71fb      	strb	r3, [r7, #7]
	// Get the screen scan direction
	LCD_1IN47.SCAN_DIR = Scan_dir;
 8004ebe:	4a13      	ldr	r2, [pc, #76]	@ (8004f0c <LCD_1IN47_SetAttributes+0x58>)
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	7113      	strb	r3, [r2, #4]
	UBYTE MemoryAccessReg = 0x00;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]

	// Get GRAM and LCD width and height
	if (Scan_dir == HORIZONTAL)
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <LCD_1IN47_SetAttributes+0x2e>
	{
		LCD_1IN47.HEIGHT = LCD_1IN47_WIDTH;
 8004ece:	4b0f      	ldr	r3, [pc, #60]	@ (8004f0c <LCD_1IN47_SetAttributes+0x58>)
 8004ed0:	22ac      	movs	r2, #172	@ 0xac
 8004ed2:	805a      	strh	r2, [r3, #2]
		LCD_1IN47.WIDTH = LCD_1IN47_HEIGHT;
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <LCD_1IN47_SetAttributes+0x58>)
 8004ed6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004eda:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0X00;
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]
 8004ee0:	e008      	b.n	8004ef4 <LCD_1IN47_SetAttributes+0x40>
	}
	else
	{
		LCD_1IN47.HEIGHT = LCD_1IN47_HEIGHT;
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <LCD_1IN47_SetAttributes+0x58>)
 8004ee4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004ee8:	805a      	strh	r2, [r3, #2]
		LCD_1IN47.WIDTH = LCD_1IN47_WIDTH;		
 8004eea:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <LCD_1IN47_SetAttributes+0x58>)
 8004eec:	22ac      	movs	r2, #172	@ 0xac
 8004eee:	801a      	strh	r2, [r3, #0]
		MemoryAccessReg = 0X70;
 8004ef0:	2370      	movs	r3, #112	@ 0x70
 8004ef2:	73fb      	strb	r3, [r7, #15]
	}

	// Set the read / write scan direction of the frame memory
	LCD_1IN47_SendCommand(0x36); // MX, MY, RGB mode
 8004ef4:	2036      	movs	r0, #54	@ 0x36
 8004ef6:	f7ff fec3 	bl	8004c80 <LCD_1IN47_SendCommand>
	// LCD_1IN47_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
	LCD_1IN47_SendData_8Bit(MemoryAccessReg); // 0x08 set RGB
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fedb 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	2000024c 	.word	0x2000024c

08004f10 <LCD_1IN47_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN47_Init(UBYTE Scan_dir)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]
	// Hardware reset
	LCD_1IN47_Reset();
 8004f1a:	f7ff fe8f 	bl	8004c3c <LCD_1IN47_Reset>

	// Set the resolution and scanning method of the screen
	LCD_1IN47_SetAttributes(Scan_dir);
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff ffc7 	bl	8004eb4 <LCD_1IN47_SetAttributes>

	// Set the initialization register
	LCD_1IN47_InitReg();
 8004f26:	f7ff ff03 	bl	8004d30 <LCD_1IN47_InitReg>
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <LCD_1IN47_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN47_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8004f34:	b590      	push	{r4, r7, lr}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	4623      	mov	r3, r4
 8004f44:	80fb      	strh	r3, [r7, #6]
 8004f46:	4603      	mov	r3, r0
 8004f48:	80bb      	strh	r3, [r7, #4]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	807b      	strh	r3, [r7, #2]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	803b      	strh	r3, [r7, #0]
	if (LCD_1IN47.SCAN_DIR == HORIZONTAL)
 8004f52:	4b3e      	ldr	r3, [pc, #248]	@ (800504c <LCD_1IN47_SetWindows+0x118>)
 8004f54:	791b      	ldrb	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d134      	bne.n	8004fc4 <LCD_1IN47_SetWindows+0x90>
	{ 
		
		// set the X coordinates
		LCD_1IN47_SendCommand(0x2A);
 8004f5a:	202a      	movs	r0, #42	@ 0x2a
 8004f5c:	f7ff fe90 	bl	8004c80 <LCD_1IN47_SendCommand>
		LCD_1IN47_SendData_8Bit(0x00);
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7ff fea9 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Xstart + 0x22);
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	3322      	adds	r3, #34	@ 0x22
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fea2 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(((Xend + 0x22) - 1) >> 8);
 8004f74:	887b      	ldrh	r3, [r7, #2]
 8004f76:	3321      	adds	r3, #33	@ 0x21
 8004f78:	121b      	asrs	r3, r3, #8
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fe9b 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit((Xend + 0x22) - 1);
 8004f82:	887b      	ldrh	r3, [r7, #2]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	3321      	adds	r3, #33	@ 0x21
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fe94 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

		// set the Y coordinates
		LCD_1IN47_SendCommand(0x2B);
 8004f90:	202b      	movs	r0, #43	@ 0x2b
 8004f92:	f7ff fe75 	bl	8004c80 <LCD_1IN47_SendCommand>
		LCD_1IN47_SendData_8Bit(0x00);
 8004f96:	2000      	movs	r0, #0
 8004f98:	f7ff fe8e 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Ystart);
 8004f9c:	88bb      	ldrh	r3, [r7, #4]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fe89 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit((Yend - 1) >> 8);
 8004fa6:	883b      	ldrh	r3, [r7, #0]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	121b      	asrs	r3, r3, #8
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fe82 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Yend - 1);
 8004fb4:	883b      	ldrh	r3, [r7, #0]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fe7b 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
 8004fc2:	e03b      	b.n	800503c <LCD_1IN47_SetWindows+0x108>
	}
	else
	{ 
		// set the X coordinates
		LCD_1IN47_SendCommand(0x2A);
 8004fc4:	202a      	movs	r0, #42	@ 0x2a
 8004fc6:	f7ff fe5b 	bl	8004c80 <LCD_1IN47_SendCommand>
		LCD_1IN47_SendData_8Bit(Xstart >> 8);
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fe70 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Xstart);
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fe6b 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit((Xend - 1) >> 8);
 8004fe2:	887b      	ldrh	r3, [r7, #2]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	121b      	asrs	r3, r3, #8
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fe64 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Xend - 1);
 8004ff0:	887b      	ldrh	r3, [r7, #2]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fe5d 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>

		// set the Y coordinates
		LCD_1IN47_SendCommand(0x2B);
 8004ffe:	202b      	movs	r0, #43	@ 0x2b
 8005000:	f7ff fe3e 	bl	8004c80 <LCD_1IN47_SendCommand>
		LCD_1IN47_SendData_8Bit(Ystart >> 8);
 8005004:	88bb      	ldrh	r3, [r7, #4]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	b29b      	uxth	r3, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fe53 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Ystart + 0x22);
 8005012:	88bb      	ldrh	r3, [r7, #4]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	3322      	adds	r3, #34	@ 0x22
 8005018:	b2db      	uxtb	r3, r3
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fe4c 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit((Yend - 1 + 0x22) >> 8);
 8005020:	883b      	ldrh	r3, [r7, #0]
 8005022:	3321      	adds	r3, #33	@ 0x21
 8005024:	121b      	asrs	r3, r3, #8
 8005026:	b2db      	uxtb	r3, r3
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fe45 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
		LCD_1IN47_SendData_8Bit(Yend - 1 + 0x22);
 800502e:	883b      	ldrh	r3, [r7, #0]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	3321      	adds	r3, #33	@ 0x21
 8005034:	b2db      	uxtb	r3, r3
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fe3e 	bl	8004cb8 <LCD_1IN47_SendData_8Bit>
	}

	LCD_1IN47_SendCommand(0X2C);
 800503c:	202c      	movs	r0, #44	@ 0x2c
 800503e:	f7ff fe1f 	bl	8004c80 <LCD_1IN47_SendCommand>
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bd90      	pop	{r4, r7, pc}
 800504a:	bf00      	nop
 800504c:	2000024c 	.word	0x2000024c

08005050 <LCD_1IN47_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN47_Clear(UWORD Color)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	80fb      	strh	r3, [r7, #6]
	UWORD i,j;
//	  LCD_1IN47_SetWindows(0, 0, LCD_1IN47.WIDTH, LCD_1IN47.HEIGHT);
  LCD_1IN47_SetWindows(0, 0, LCD_1IN47.HEIGHT, LCD_1IN47.WIDTH);
 800505a:	4b19      	ldr	r3, [pc, #100]	@ (80050c0 <LCD_1IN47_Clear+0x70>)
 800505c:	885a      	ldrh	r2, [r3, #2]
 800505e:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <LCD_1IN47_Clear+0x70>)
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	2100      	movs	r1, #0
 8005064:	2000      	movs	r0, #0
 8005066:	f7ff ff65 	bl	8004f34 <LCD_1IN47_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 800506a:	2201      	movs	r2, #1
 800506c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005074:	f7fc fa98 	bl	80015a8 <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN47_WIDTH; i++){
 8005078:	2300      	movs	r3, #0
 800507a:	81fb      	strh	r3, [r7, #14]
 800507c:	e018      	b.n	80050b0 <LCD_1IN47_Clear+0x60>
		for(j = 0; j < LCD_1IN47_HEIGHT; j++){
 800507e:	2300      	movs	r3, #0
 8005080:	81bb      	strh	r3, [r7, #12]
 8005082:	e00e      	b.n	80050a2 <LCD_1IN47_Clear+0x52>
			DEV_SPI_WRITE((Color>>8)&0xff);
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	b29b      	uxth	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fba3 	bl	80047d8 <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fb9e 	bl	80047d8 <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN47_HEIGHT; j++){
 800509c:	89bb      	ldrh	r3, [r7, #12]
 800509e:	3301      	adds	r3, #1
 80050a0:	81bb      	strh	r3, [r7, #12]
 80050a2:	89bb      	ldrh	r3, [r7, #12]
 80050a4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80050a8:	d3ec      	bcc.n	8005084 <LCD_1IN47_Clear+0x34>
	for(i = 0; i < LCD_1IN47_WIDTH; i++){
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	3301      	adds	r3, #1
 80050ae:	81fb      	strh	r3, [r7, #14]
 80050b0:	89fb      	ldrh	r3, [r7, #14]
 80050b2:	2bab      	cmp	r3, #171	@ 0xab
 80050b4:	d9e3      	bls.n	800507e <LCD_1IN47_Clear+0x2e>
		}
	 }
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	2000024c 	.word	0x2000024c

080050c4 <LCD_1IN47_DrawPoint>:
				}  
		}
}

void LCD_1IN47_DrawPoint(UWORD X, UWORD Y, UWORD Color)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	80fb      	strh	r3, [r7, #6]
 80050ce:	460b      	mov	r3, r1
 80050d0:	80bb      	strh	r3, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	807b      	strh	r3, [r7, #2]
	LCD_1IN47_SetWindows(X, Y, X, Y);
 80050d6:	88bb      	ldrh	r3, [r7, #4]
 80050d8:	88fa      	ldrh	r2, [r7, #6]
 80050da:	88b9      	ldrh	r1, [r7, #4]
 80050dc:	88f8      	ldrh	r0, [r7, #6]
 80050de:	f7ff ff29 	bl	8004f34 <LCD_1IN47_SetWindows>
	LCD_1IN47_SendData_16Bit(Color);
 80050e2:	887b      	ldrh	r3, [r7, #2]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fdfb 	bl	8004ce0 <LCD_1IN47_SendData_16Bit>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <LCD_1IN47_SetBackLight>:

void LCD_1IN47_SetBackLight(UWORD Value)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 80050fe:	4a04      	ldr	r2, [pc, #16]	@ (8005110 <LCD_1IN47_SetBackLight+0x1c>)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40000400 	.word	0x40000400

08005114 <sbrk_aligned>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	4e0f      	ldr	r6, [pc, #60]	@ (8005154 <sbrk_aligned+0x40>)
 8005118:	460c      	mov	r4, r1
 800511a:	6831      	ldr	r1, [r6, #0]
 800511c:	4605      	mov	r5, r0
 800511e:	b911      	cbnz	r1, 8005126 <sbrk_aligned+0x12>
 8005120:	f000 faec 	bl	80056fc <_sbrk_r>
 8005124:	6030      	str	r0, [r6, #0]
 8005126:	4621      	mov	r1, r4
 8005128:	4628      	mov	r0, r5
 800512a:	f000 fae7 	bl	80056fc <_sbrk_r>
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	d103      	bne.n	800513a <sbrk_aligned+0x26>
 8005132:	f04f 34ff 	mov.w	r4, #4294967295
 8005136:	4620      	mov	r0, r4
 8005138:	bd70      	pop	{r4, r5, r6, pc}
 800513a:	1cc4      	adds	r4, r0, #3
 800513c:	f024 0403 	bic.w	r4, r4, #3
 8005140:	42a0      	cmp	r0, r4
 8005142:	d0f8      	beq.n	8005136 <sbrk_aligned+0x22>
 8005144:	1a21      	subs	r1, r4, r0
 8005146:	4628      	mov	r0, r5
 8005148:	f000 fad8 	bl	80056fc <_sbrk_r>
 800514c:	3001      	adds	r0, #1
 800514e:	d1f2      	bne.n	8005136 <sbrk_aligned+0x22>
 8005150:	e7ef      	b.n	8005132 <sbrk_aligned+0x1e>
 8005152:	bf00      	nop
 8005154:	20000254 	.word	0x20000254

08005158 <_malloc_r>:
 8005158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800515c:	1ccd      	adds	r5, r1, #3
 800515e:	f025 0503 	bic.w	r5, r5, #3
 8005162:	3508      	adds	r5, #8
 8005164:	2d0c      	cmp	r5, #12
 8005166:	bf38      	it	cc
 8005168:	250c      	movcc	r5, #12
 800516a:	2d00      	cmp	r5, #0
 800516c:	4606      	mov	r6, r0
 800516e:	db01      	blt.n	8005174 <_malloc_r+0x1c>
 8005170:	42a9      	cmp	r1, r5
 8005172:	d904      	bls.n	800517e <_malloc_r+0x26>
 8005174:	230c      	movs	r3, #12
 8005176:	6033      	str	r3, [r6, #0]
 8005178:	2000      	movs	r0, #0
 800517a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800517e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005254 <_malloc_r+0xfc>
 8005182:	f000 f869 	bl	8005258 <__malloc_lock>
 8005186:	f8d8 3000 	ldr.w	r3, [r8]
 800518a:	461c      	mov	r4, r3
 800518c:	bb44      	cbnz	r4, 80051e0 <_malloc_r+0x88>
 800518e:	4629      	mov	r1, r5
 8005190:	4630      	mov	r0, r6
 8005192:	f7ff ffbf 	bl	8005114 <sbrk_aligned>
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	4604      	mov	r4, r0
 800519a:	d158      	bne.n	800524e <_malloc_r+0xf6>
 800519c:	f8d8 4000 	ldr.w	r4, [r8]
 80051a0:	4627      	mov	r7, r4
 80051a2:	2f00      	cmp	r7, #0
 80051a4:	d143      	bne.n	800522e <_malloc_r+0xd6>
 80051a6:	2c00      	cmp	r4, #0
 80051a8:	d04b      	beq.n	8005242 <_malloc_r+0xea>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	4639      	mov	r1, r7
 80051ae:	4630      	mov	r0, r6
 80051b0:	eb04 0903 	add.w	r9, r4, r3
 80051b4:	f000 faa2 	bl	80056fc <_sbrk_r>
 80051b8:	4581      	cmp	r9, r0
 80051ba:	d142      	bne.n	8005242 <_malloc_r+0xea>
 80051bc:	6821      	ldr	r1, [r4, #0]
 80051be:	1a6d      	subs	r5, r5, r1
 80051c0:	4629      	mov	r1, r5
 80051c2:	4630      	mov	r0, r6
 80051c4:	f7ff ffa6 	bl	8005114 <sbrk_aligned>
 80051c8:	3001      	adds	r0, #1
 80051ca:	d03a      	beq.n	8005242 <_malloc_r+0xea>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	442b      	add	r3, r5
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	f8d8 3000 	ldr.w	r3, [r8]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	bb62      	cbnz	r2, 8005234 <_malloc_r+0xdc>
 80051da:	f8c8 7000 	str.w	r7, [r8]
 80051de:	e00f      	b.n	8005200 <_malloc_r+0xa8>
 80051e0:	6822      	ldr	r2, [r4, #0]
 80051e2:	1b52      	subs	r2, r2, r5
 80051e4:	d420      	bmi.n	8005228 <_malloc_r+0xd0>
 80051e6:	2a0b      	cmp	r2, #11
 80051e8:	d917      	bls.n	800521a <_malloc_r+0xc2>
 80051ea:	1961      	adds	r1, r4, r5
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	6025      	str	r5, [r4, #0]
 80051f0:	bf18      	it	ne
 80051f2:	6059      	strne	r1, [r3, #4]
 80051f4:	6863      	ldr	r3, [r4, #4]
 80051f6:	bf08      	it	eq
 80051f8:	f8c8 1000 	streq.w	r1, [r8]
 80051fc:	5162      	str	r2, [r4, r5]
 80051fe:	604b      	str	r3, [r1, #4]
 8005200:	4630      	mov	r0, r6
 8005202:	f000 f82f 	bl	8005264 <__malloc_unlock>
 8005206:	f104 000b 	add.w	r0, r4, #11
 800520a:	1d23      	adds	r3, r4, #4
 800520c:	f020 0007 	bic.w	r0, r0, #7
 8005210:	1ac2      	subs	r2, r0, r3
 8005212:	bf1c      	itt	ne
 8005214:	1a1b      	subne	r3, r3, r0
 8005216:	50a3      	strne	r3, [r4, r2]
 8005218:	e7af      	b.n	800517a <_malloc_r+0x22>
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	42a3      	cmp	r3, r4
 800521e:	bf0c      	ite	eq
 8005220:	f8c8 2000 	streq.w	r2, [r8]
 8005224:	605a      	strne	r2, [r3, #4]
 8005226:	e7eb      	b.n	8005200 <_malloc_r+0xa8>
 8005228:	4623      	mov	r3, r4
 800522a:	6864      	ldr	r4, [r4, #4]
 800522c:	e7ae      	b.n	800518c <_malloc_r+0x34>
 800522e:	463c      	mov	r4, r7
 8005230:	687f      	ldr	r7, [r7, #4]
 8005232:	e7b6      	b.n	80051a2 <_malloc_r+0x4a>
 8005234:	461a      	mov	r2, r3
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	42a3      	cmp	r3, r4
 800523a:	d1fb      	bne.n	8005234 <_malloc_r+0xdc>
 800523c:	2300      	movs	r3, #0
 800523e:	6053      	str	r3, [r2, #4]
 8005240:	e7de      	b.n	8005200 <_malloc_r+0xa8>
 8005242:	230c      	movs	r3, #12
 8005244:	6033      	str	r3, [r6, #0]
 8005246:	4630      	mov	r0, r6
 8005248:	f000 f80c 	bl	8005264 <__malloc_unlock>
 800524c:	e794      	b.n	8005178 <_malloc_r+0x20>
 800524e:	6005      	str	r5, [r0, #0]
 8005250:	e7d6      	b.n	8005200 <_malloc_r+0xa8>
 8005252:	bf00      	nop
 8005254:	20000258 	.word	0x20000258

08005258 <__malloc_lock>:
 8005258:	4801      	ldr	r0, [pc, #4]	@ (8005260 <__malloc_lock+0x8>)
 800525a:	f000 ba9c 	b.w	8005796 <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	2000039c 	.word	0x2000039c

08005264 <__malloc_unlock>:
 8005264:	4801      	ldr	r0, [pc, #4]	@ (800526c <__malloc_unlock+0x8>)
 8005266:	f000 ba97 	b.w	8005798 <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	2000039c 	.word	0x2000039c

08005270 <std>:
 8005270:	2300      	movs	r3, #0
 8005272:	b510      	push	{r4, lr}
 8005274:	4604      	mov	r4, r0
 8005276:	e9c0 3300 	strd	r3, r3, [r0]
 800527a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800527e:	6083      	str	r3, [r0, #8]
 8005280:	8181      	strh	r1, [r0, #12]
 8005282:	6643      	str	r3, [r0, #100]	@ 0x64
 8005284:	81c2      	strh	r2, [r0, #14]
 8005286:	6183      	str	r3, [r0, #24]
 8005288:	4619      	mov	r1, r3
 800528a:	2208      	movs	r2, #8
 800528c:	305c      	adds	r0, #92	@ 0x5c
 800528e:	f000 f9f9 	bl	8005684 <memset>
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <std+0x58>)
 8005294:	6263      	str	r3, [r4, #36]	@ 0x24
 8005296:	4b0d      	ldr	r3, [pc, #52]	@ (80052cc <std+0x5c>)
 8005298:	62a3      	str	r3, [r4, #40]	@ 0x28
 800529a:	4b0d      	ldr	r3, [pc, #52]	@ (80052d0 <std+0x60>)
 800529c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800529e:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <std+0x64>)
 80052a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80052a2:	4b0d      	ldr	r3, [pc, #52]	@ (80052d8 <std+0x68>)
 80052a4:	6224      	str	r4, [r4, #32]
 80052a6:	429c      	cmp	r4, r3
 80052a8:	d006      	beq.n	80052b8 <std+0x48>
 80052aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052ae:	4294      	cmp	r4, r2
 80052b0:	d002      	beq.n	80052b8 <std+0x48>
 80052b2:	33d0      	adds	r3, #208	@ 0xd0
 80052b4:	429c      	cmp	r4, r3
 80052b6:	d105      	bne.n	80052c4 <std+0x54>
 80052b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c0:	f000 ba68 	b.w	8005794 <__retarget_lock_init_recursive>
 80052c4:	bd10      	pop	{r4, pc}
 80052c6:	bf00      	nop
 80052c8:	080054d5 	.word	0x080054d5
 80052cc:	080054f7 	.word	0x080054f7
 80052d0:	0800552f 	.word	0x0800552f
 80052d4:	08005553 	.word	0x08005553
 80052d8:	2000025c 	.word	0x2000025c

080052dc <stdio_exit_handler>:
 80052dc:	4a02      	ldr	r2, [pc, #8]	@ (80052e8 <stdio_exit_handler+0xc>)
 80052de:	4903      	ldr	r1, [pc, #12]	@ (80052ec <stdio_exit_handler+0x10>)
 80052e0:	4803      	ldr	r0, [pc, #12]	@ (80052f0 <stdio_exit_handler+0x14>)
 80052e2:	f000 b869 	b.w	80053b8 <_fwalk_sglue>
 80052e6:	bf00      	nop
 80052e8:	2000001c 	.word	0x2000001c
 80052ec:	08005ed9 	.word	0x08005ed9
 80052f0:	2000002c 	.word	0x2000002c

080052f4 <cleanup_stdio>:
 80052f4:	6841      	ldr	r1, [r0, #4]
 80052f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <cleanup_stdio+0x34>)
 80052f8:	4299      	cmp	r1, r3
 80052fa:	b510      	push	{r4, lr}
 80052fc:	4604      	mov	r4, r0
 80052fe:	d001      	beq.n	8005304 <cleanup_stdio+0x10>
 8005300:	f000 fdea 	bl	8005ed8 <_fflush_r>
 8005304:	68a1      	ldr	r1, [r4, #8]
 8005306:	4b09      	ldr	r3, [pc, #36]	@ (800532c <cleanup_stdio+0x38>)
 8005308:	4299      	cmp	r1, r3
 800530a:	d002      	beq.n	8005312 <cleanup_stdio+0x1e>
 800530c:	4620      	mov	r0, r4
 800530e:	f000 fde3 	bl	8005ed8 <_fflush_r>
 8005312:	68e1      	ldr	r1, [r4, #12]
 8005314:	4b06      	ldr	r3, [pc, #24]	@ (8005330 <cleanup_stdio+0x3c>)
 8005316:	4299      	cmp	r1, r3
 8005318:	d004      	beq.n	8005324 <cleanup_stdio+0x30>
 800531a:	4620      	mov	r0, r4
 800531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005320:	f000 bdda 	b.w	8005ed8 <_fflush_r>
 8005324:	bd10      	pop	{r4, pc}
 8005326:	bf00      	nop
 8005328:	2000025c 	.word	0x2000025c
 800532c:	200002c4 	.word	0x200002c4
 8005330:	2000032c 	.word	0x2000032c

08005334 <global_stdio_init.part.0>:
 8005334:	b510      	push	{r4, lr}
 8005336:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <global_stdio_init.part.0+0x30>)
 8005338:	4c0b      	ldr	r4, [pc, #44]	@ (8005368 <global_stdio_init.part.0+0x34>)
 800533a:	4a0c      	ldr	r2, [pc, #48]	@ (800536c <global_stdio_init.part.0+0x38>)
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	4620      	mov	r0, r4
 8005340:	2200      	movs	r2, #0
 8005342:	2104      	movs	r1, #4
 8005344:	f7ff ff94 	bl	8005270 <std>
 8005348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800534c:	2201      	movs	r2, #1
 800534e:	2109      	movs	r1, #9
 8005350:	f7ff ff8e 	bl	8005270 <std>
 8005354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005358:	2202      	movs	r2, #2
 800535a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800535e:	2112      	movs	r1, #18
 8005360:	f7ff bf86 	b.w	8005270 <std>
 8005364:	20000394 	.word	0x20000394
 8005368:	2000025c 	.word	0x2000025c
 800536c:	080052dd 	.word	0x080052dd

08005370 <__sfp_lock_acquire>:
 8005370:	4801      	ldr	r0, [pc, #4]	@ (8005378 <__sfp_lock_acquire+0x8>)
 8005372:	f000 ba10 	b.w	8005796 <__retarget_lock_acquire_recursive>
 8005376:	bf00      	nop
 8005378:	2000039d 	.word	0x2000039d

0800537c <__sfp_lock_release>:
 800537c:	4801      	ldr	r0, [pc, #4]	@ (8005384 <__sfp_lock_release+0x8>)
 800537e:	f000 ba0b 	b.w	8005798 <__retarget_lock_release_recursive>
 8005382:	bf00      	nop
 8005384:	2000039d 	.word	0x2000039d

08005388 <__sinit>:
 8005388:	b510      	push	{r4, lr}
 800538a:	4604      	mov	r4, r0
 800538c:	f7ff fff0 	bl	8005370 <__sfp_lock_acquire>
 8005390:	6a23      	ldr	r3, [r4, #32]
 8005392:	b11b      	cbz	r3, 800539c <__sinit+0x14>
 8005394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005398:	f7ff bff0 	b.w	800537c <__sfp_lock_release>
 800539c:	4b04      	ldr	r3, [pc, #16]	@ (80053b0 <__sinit+0x28>)
 800539e:	6223      	str	r3, [r4, #32]
 80053a0:	4b04      	ldr	r3, [pc, #16]	@ (80053b4 <__sinit+0x2c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1f5      	bne.n	8005394 <__sinit+0xc>
 80053a8:	f7ff ffc4 	bl	8005334 <global_stdio_init.part.0>
 80053ac:	e7f2      	b.n	8005394 <__sinit+0xc>
 80053ae:	bf00      	nop
 80053b0:	080052f5 	.word	0x080052f5
 80053b4:	20000394 	.word	0x20000394

080053b8 <_fwalk_sglue>:
 80053b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053bc:	4607      	mov	r7, r0
 80053be:	4688      	mov	r8, r1
 80053c0:	4614      	mov	r4, r2
 80053c2:	2600      	movs	r6, #0
 80053c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053c8:	f1b9 0901 	subs.w	r9, r9, #1
 80053cc:	d505      	bpl.n	80053da <_fwalk_sglue+0x22>
 80053ce:	6824      	ldr	r4, [r4, #0]
 80053d0:	2c00      	cmp	r4, #0
 80053d2:	d1f7      	bne.n	80053c4 <_fwalk_sglue+0xc>
 80053d4:	4630      	mov	r0, r6
 80053d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d907      	bls.n	80053f0 <_fwalk_sglue+0x38>
 80053e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053e4:	3301      	adds	r3, #1
 80053e6:	d003      	beq.n	80053f0 <_fwalk_sglue+0x38>
 80053e8:	4629      	mov	r1, r5
 80053ea:	4638      	mov	r0, r7
 80053ec:	47c0      	blx	r8
 80053ee:	4306      	orrs	r6, r0
 80053f0:	3568      	adds	r5, #104	@ 0x68
 80053f2:	e7e9      	b.n	80053c8 <_fwalk_sglue+0x10>

080053f4 <iprintf>:
 80053f4:	b40f      	push	{r0, r1, r2, r3}
 80053f6:	b507      	push	{r0, r1, r2, lr}
 80053f8:	4906      	ldr	r1, [pc, #24]	@ (8005414 <iprintf+0x20>)
 80053fa:	ab04      	add	r3, sp, #16
 80053fc:	6808      	ldr	r0, [r1, #0]
 80053fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005402:	6881      	ldr	r1, [r0, #8]
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	f000 fa3d 	bl	8005884 <_vfiprintf_r>
 800540a:	b003      	add	sp, #12
 800540c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005410:	b004      	add	sp, #16
 8005412:	4770      	bx	lr
 8005414:	20000028 	.word	0x20000028

08005418 <_puts_r>:
 8005418:	6a03      	ldr	r3, [r0, #32]
 800541a:	b570      	push	{r4, r5, r6, lr}
 800541c:	6884      	ldr	r4, [r0, #8]
 800541e:	4605      	mov	r5, r0
 8005420:	460e      	mov	r6, r1
 8005422:	b90b      	cbnz	r3, 8005428 <_puts_r+0x10>
 8005424:	f7ff ffb0 	bl	8005388 <__sinit>
 8005428:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800542a:	07db      	lsls	r3, r3, #31
 800542c:	d405      	bmi.n	800543a <_puts_r+0x22>
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	0598      	lsls	r0, r3, #22
 8005432:	d402      	bmi.n	800543a <_puts_r+0x22>
 8005434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005436:	f000 f9ae 	bl	8005796 <__retarget_lock_acquire_recursive>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	0719      	lsls	r1, r3, #28
 800543e:	d502      	bpl.n	8005446 <_puts_r+0x2e>
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d135      	bne.n	80054b2 <_puts_r+0x9a>
 8005446:	4621      	mov	r1, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f000 f8c5 	bl	80055d8 <__swsetup_r>
 800544e:	b380      	cbz	r0, 80054b2 <_puts_r+0x9a>
 8005450:	f04f 35ff 	mov.w	r5, #4294967295
 8005454:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005456:	07da      	lsls	r2, r3, #31
 8005458:	d405      	bmi.n	8005466 <_puts_r+0x4e>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	059b      	lsls	r3, r3, #22
 800545e:	d402      	bmi.n	8005466 <_puts_r+0x4e>
 8005460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005462:	f000 f999 	bl	8005798 <__retarget_lock_release_recursive>
 8005466:	4628      	mov	r0, r5
 8005468:	bd70      	pop	{r4, r5, r6, pc}
 800546a:	2b00      	cmp	r3, #0
 800546c:	da04      	bge.n	8005478 <_puts_r+0x60>
 800546e:	69a2      	ldr	r2, [r4, #24]
 8005470:	429a      	cmp	r2, r3
 8005472:	dc17      	bgt.n	80054a4 <_puts_r+0x8c>
 8005474:	290a      	cmp	r1, #10
 8005476:	d015      	beq.n	80054a4 <_puts_r+0x8c>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	6022      	str	r2, [r4, #0]
 800547e:	7019      	strb	r1, [r3, #0]
 8005480:	68a3      	ldr	r3, [r4, #8]
 8005482:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005486:	3b01      	subs	r3, #1
 8005488:	60a3      	str	r3, [r4, #8]
 800548a:	2900      	cmp	r1, #0
 800548c:	d1ed      	bne.n	800546a <_puts_r+0x52>
 800548e:	2b00      	cmp	r3, #0
 8005490:	da11      	bge.n	80054b6 <_puts_r+0x9e>
 8005492:	4622      	mov	r2, r4
 8005494:	210a      	movs	r1, #10
 8005496:	4628      	mov	r0, r5
 8005498:	f000 f85f 	bl	800555a <__swbuf_r>
 800549c:	3001      	adds	r0, #1
 800549e:	d0d7      	beq.n	8005450 <_puts_r+0x38>
 80054a0:	250a      	movs	r5, #10
 80054a2:	e7d7      	b.n	8005454 <_puts_r+0x3c>
 80054a4:	4622      	mov	r2, r4
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 f857 	bl	800555a <__swbuf_r>
 80054ac:	3001      	adds	r0, #1
 80054ae:	d1e7      	bne.n	8005480 <_puts_r+0x68>
 80054b0:	e7ce      	b.n	8005450 <_puts_r+0x38>
 80054b2:	3e01      	subs	r6, #1
 80054b4:	e7e4      	b.n	8005480 <_puts_r+0x68>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	6022      	str	r2, [r4, #0]
 80054bc:	220a      	movs	r2, #10
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	e7ee      	b.n	80054a0 <_puts_r+0x88>
	...

080054c4 <puts>:
 80054c4:	4b02      	ldr	r3, [pc, #8]	@ (80054d0 <puts+0xc>)
 80054c6:	4601      	mov	r1, r0
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	f7ff bfa5 	b.w	8005418 <_puts_r>
 80054ce:	bf00      	nop
 80054d0:	20000028 	.word	0x20000028

080054d4 <__sread>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	460c      	mov	r4, r1
 80054d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054dc:	f000 f8fc 	bl	80056d8 <_read_r>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	bfab      	itete	ge
 80054e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054e6:	89a3      	ldrhlt	r3, [r4, #12]
 80054e8:	181b      	addge	r3, r3, r0
 80054ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054ee:	bfac      	ite	ge
 80054f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054f2:	81a3      	strhlt	r3, [r4, #12]
 80054f4:	bd10      	pop	{r4, pc}

080054f6 <__swrite>:
 80054f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	461f      	mov	r7, r3
 80054fc:	898b      	ldrh	r3, [r1, #12]
 80054fe:	05db      	lsls	r3, r3, #23
 8005500:	4605      	mov	r5, r0
 8005502:	460c      	mov	r4, r1
 8005504:	4616      	mov	r6, r2
 8005506:	d505      	bpl.n	8005514 <__swrite+0x1e>
 8005508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550c:	2302      	movs	r3, #2
 800550e:	2200      	movs	r2, #0
 8005510:	f000 f8d0 	bl	80056b4 <_lseek_r>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800551a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	4632      	mov	r2, r6
 8005522:	463b      	mov	r3, r7
 8005524:	4628      	mov	r0, r5
 8005526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800552a:	f000 b8f7 	b.w	800571c <_write_r>

0800552e <__sseek>:
 800552e:	b510      	push	{r4, lr}
 8005530:	460c      	mov	r4, r1
 8005532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005536:	f000 f8bd 	bl	80056b4 <_lseek_r>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	bf15      	itete	ne
 8005540:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005542:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005546:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800554a:	81a3      	strheq	r3, [r4, #12]
 800554c:	bf18      	it	ne
 800554e:	81a3      	strhne	r3, [r4, #12]
 8005550:	bd10      	pop	{r4, pc}

08005552 <__sclose>:
 8005552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005556:	f000 b89d 	b.w	8005694 <_close_r>

0800555a <__swbuf_r>:
 800555a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555c:	460e      	mov	r6, r1
 800555e:	4614      	mov	r4, r2
 8005560:	4605      	mov	r5, r0
 8005562:	b118      	cbz	r0, 800556c <__swbuf_r+0x12>
 8005564:	6a03      	ldr	r3, [r0, #32]
 8005566:	b90b      	cbnz	r3, 800556c <__swbuf_r+0x12>
 8005568:	f7ff ff0e 	bl	8005388 <__sinit>
 800556c:	69a3      	ldr	r3, [r4, #24]
 800556e:	60a3      	str	r3, [r4, #8]
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	071a      	lsls	r2, r3, #28
 8005574:	d501      	bpl.n	800557a <__swbuf_r+0x20>
 8005576:	6923      	ldr	r3, [r4, #16]
 8005578:	b943      	cbnz	r3, 800558c <__swbuf_r+0x32>
 800557a:	4621      	mov	r1, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 f82b 	bl	80055d8 <__swsetup_r>
 8005582:	b118      	cbz	r0, 800558c <__swbuf_r+0x32>
 8005584:	f04f 37ff 	mov.w	r7, #4294967295
 8005588:	4638      	mov	r0, r7
 800558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	6922      	ldr	r2, [r4, #16]
 8005590:	1a98      	subs	r0, r3, r2
 8005592:	6963      	ldr	r3, [r4, #20]
 8005594:	b2f6      	uxtb	r6, r6
 8005596:	4283      	cmp	r3, r0
 8005598:	4637      	mov	r7, r6
 800559a:	dc05      	bgt.n	80055a8 <__swbuf_r+0x4e>
 800559c:	4621      	mov	r1, r4
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 fc9a 	bl	8005ed8 <_fflush_r>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d1ed      	bne.n	8005584 <__swbuf_r+0x2a>
 80055a8:	68a3      	ldr	r3, [r4, #8]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	60a3      	str	r3, [r4, #8]
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	6022      	str	r2, [r4, #0]
 80055b4:	701e      	strb	r6, [r3, #0]
 80055b6:	6962      	ldr	r2, [r4, #20]
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d004      	beq.n	80055c8 <__swbuf_r+0x6e>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	07db      	lsls	r3, r3, #31
 80055c2:	d5e1      	bpl.n	8005588 <__swbuf_r+0x2e>
 80055c4:	2e0a      	cmp	r6, #10
 80055c6:	d1df      	bne.n	8005588 <__swbuf_r+0x2e>
 80055c8:	4621      	mov	r1, r4
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 fc84 	bl	8005ed8 <_fflush_r>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d0d9      	beq.n	8005588 <__swbuf_r+0x2e>
 80055d4:	e7d6      	b.n	8005584 <__swbuf_r+0x2a>
	...

080055d8 <__swsetup_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4b29      	ldr	r3, [pc, #164]	@ (8005680 <__swsetup_r+0xa8>)
 80055dc:	4605      	mov	r5, r0
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	460c      	mov	r4, r1
 80055e2:	b118      	cbz	r0, 80055ec <__swsetup_r+0x14>
 80055e4:	6a03      	ldr	r3, [r0, #32]
 80055e6:	b90b      	cbnz	r3, 80055ec <__swsetup_r+0x14>
 80055e8:	f7ff fece 	bl	8005388 <__sinit>
 80055ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f0:	0719      	lsls	r1, r3, #28
 80055f2:	d422      	bmi.n	800563a <__swsetup_r+0x62>
 80055f4:	06da      	lsls	r2, r3, #27
 80055f6:	d407      	bmi.n	8005608 <__swsetup_r+0x30>
 80055f8:	2209      	movs	r2, #9
 80055fa:	602a      	str	r2, [r5, #0]
 80055fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	f04f 30ff 	mov.w	r0, #4294967295
 8005606:	e033      	b.n	8005670 <__swsetup_r+0x98>
 8005608:	0758      	lsls	r0, r3, #29
 800560a:	d512      	bpl.n	8005632 <__swsetup_r+0x5a>
 800560c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800560e:	b141      	cbz	r1, 8005622 <__swsetup_r+0x4a>
 8005610:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005614:	4299      	cmp	r1, r3
 8005616:	d002      	beq.n	800561e <__swsetup_r+0x46>
 8005618:	4628      	mov	r0, r5
 800561a:	f000 f8bf 	bl	800579c <_free_r>
 800561e:	2300      	movs	r3, #0
 8005620:	6363      	str	r3, [r4, #52]	@ 0x34
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005628:	81a3      	strh	r3, [r4, #12]
 800562a:	2300      	movs	r3, #0
 800562c:	6063      	str	r3, [r4, #4]
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	f043 0308 	orr.w	r3, r3, #8
 8005638:	81a3      	strh	r3, [r4, #12]
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	b94b      	cbnz	r3, 8005652 <__swsetup_r+0x7a>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005648:	d003      	beq.n	8005652 <__swsetup_r+0x7a>
 800564a:	4621      	mov	r1, r4
 800564c:	4628      	mov	r0, r5
 800564e:	f000 fc91 	bl	8005f74 <__smakebuf_r>
 8005652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005656:	f013 0201 	ands.w	r2, r3, #1
 800565a:	d00a      	beq.n	8005672 <__swsetup_r+0x9a>
 800565c:	2200      	movs	r2, #0
 800565e:	60a2      	str	r2, [r4, #8]
 8005660:	6962      	ldr	r2, [r4, #20]
 8005662:	4252      	negs	r2, r2
 8005664:	61a2      	str	r2, [r4, #24]
 8005666:	6922      	ldr	r2, [r4, #16]
 8005668:	b942      	cbnz	r2, 800567c <__swsetup_r+0xa4>
 800566a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800566e:	d1c5      	bne.n	80055fc <__swsetup_r+0x24>
 8005670:	bd38      	pop	{r3, r4, r5, pc}
 8005672:	0799      	lsls	r1, r3, #30
 8005674:	bf58      	it	pl
 8005676:	6962      	ldrpl	r2, [r4, #20]
 8005678:	60a2      	str	r2, [r4, #8]
 800567a:	e7f4      	b.n	8005666 <__swsetup_r+0x8e>
 800567c:	2000      	movs	r0, #0
 800567e:	e7f7      	b.n	8005670 <__swsetup_r+0x98>
 8005680:	20000028 	.word	0x20000028

08005684 <memset>:
 8005684:	4402      	add	r2, r0
 8005686:	4603      	mov	r3, r0
 8005688:	4293      	cmp	r3, r2
 800568a:	d100      	bne.n	800568e <memset+0xa>
 800568c:	4770      	bx	lr
 800568e:	f803 1b01 	strb.w	r1, [r3], #1
 8005692:	e7f9      	b.n	8005688 <memset+0x4>

08005694 <_close_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d06      	ldr	r5, [pc, #24]	@ (80056b0 <_close_r+0x1c>)
 8005698:	2300      	movs	r3, #0
 800569a:	4604      	mov	r4, r0
 800569c:	4608      	mov	r0, r1
 800569e:	602b      	str	r3, [r5, #0]
 80056a0:	f7fb fbe4 	bl	8000e6c <_close>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_close_r+0x1a>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_close_r+0x1a>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	20000398 	.word	0x20000398

080056b4 <_lseek_r>:
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4d07      	ldr	r5, [pc, #28]	@ (80056d4 <_lseek_r+0x20>)
 80056b8:	4604      	mov	r4, r0
 80056ba:	4608      	mov	r0, r1
 80056bc:	4611      	mov	r1, r2
 80056be:	2200      	movs	r2, #0
 80056c0:	602a      	str	r2, [r5, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f7fb fbf9 	bl	8000eba <_lseek>
 80056c8:	1c43      	adds	r3, r0, #1
 80056ca:	d102      	bne.n	80056d2 <_lseek_r+0x1e>
 80056cc:	682b      	ldr	r3, [r5, #0]
 80056ce:	b103      	cbz	r3, 80056d2 <_lseek_r+0x1e>
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	20000398 	.word	0x20000398

080056d8 <_read_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	4d07      	ldr	r5, [pc, #28]	@ (80056f8 <_read_r+0x20>)
 80056dc:	4604      	mov	r4, r0
 80056de:	4608      	mov	r0, r1
 80056e0:	4611      	mov	r1, r2
 80056e2:	2200      	movs	r2, #0
 80056e4:	602a      	str	r2, [r5, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	f7fb fb87 	bl	8000dfa <_read>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_read_r+0x1e>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_read_r+0x1e>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	20000398 	.word	0x20000398

080056fc <_sbrk_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4d06      	ldr	r5, [pc, #24]	@ (8005718 <_sbrk_r+0x1c>)
 8005700:	2300      	movs	r3, #0
 8005702:	4604      	mov	r4, r0
 8005704:	4608      	mov	r0, r1
 8005706:	602b      	str	r3, [r5, #0]
 8005708:	f7fb fbe4 	bl	8000ed4 <_sbrk>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_sbrk_r+0x1a>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	b103      	cbz	r3, 8005716 <_sbrk_r+0x1a>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	20000398 	.word	0x20000398

0800571c <_write_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4d07      	ldr	r5, [pc, #28]	@ (800573c <_write_r+0x20>)
 8005720:	4604      	mov	r4, r0
 8005722:	4608      	mov	r0, r1
 8005724:	4611      	mov	r1, r2
 8005726:	2200      	movs	r2, #0
 8005728:	602a      	str	r2, [r5, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	f7fb fb82 	bl	8000e34 <_write>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_write_r+0x1e>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_write_r+0x1e>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	20000398 	.word	0x20000398

08005740 <__errno>:
 8005740:	4b01      	ldr	r3, [pc, #4]	@ (8005748 <__errno+0x8>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000028 	.word	0x20000028

0800574c <__libc_init_array>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4d0d      	ldr	r5, [pc, #52]	@ (8005784 <__libc_init_array+0x38>)
 8005750:	4c0d      	ldr	r4, [pc, #52]	@ (8005788 <__libc_init_array+0x3c>)
 8005752:	1b64      	subs	r4, r4, r5
 8005754:	10a4      	asrs	r4, r4, #2
 8005756:	2600      	movs	r6, #0
 8005758:	42a6      	cmp	r6, r4
 800575a:	d109      	bne.n	8005770 <__libc_init_array+0x24>
 800575c:	4d0b      	ldr	r5, [pc, #44]	@ (800578c <__libc_init_array+0x40>)
 800575e:	4c0c      	ldr	r4, [pc, #48]	@ (8005790 <__libc_init_array+0x44>)
 8005760:	f000 fc66 	bl	8006030 <_init>
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	2600      	movs	r6, #0
 800576a:	42a6      	cmp	r6, r4
 800576c:	d105      	bne.n	800577a <__libc_init_array+0x2e>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	f855 3b04 	ldr.w	r3, [r5], #4
 8005774:	4798      	blx	r3
 8005776:	3601      	adds	r6, #1
 8005778:	e7ee      	b.n	8005758 <__libc_init_array+0xc>
 800577a:	f855 3b04 	ldr.w	r3, [r5], #4
 800577e:	4798      	blx	r3
 8005780:	3601      	adds	r6, #1
 8005782:	e7f2      	b.n	800576a <__libc_init_array+0x1e>
 8005784:	08008ab0 	.word	0x08008ab0
 8005788:	08008ab0 	.word	0x08008ab0
 800578c:	08008ab0 	.word	0x08008ab0
 8005790:	08008ab4 	.word	0x08008ab4

08005794 <__retarget_lock_init_recursive>:
 8005794:	4770      	bx	lr

08005796 <__retarget_lock_acquire_recursive>:
 8005796:	4770      	bx	lr

08005798 <__retarget_lock_release_recursive>:
 8005798:	4770      	bx	lr
	...

0800579c <_free_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4605      	mov	r5, r0
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d041      	beq.n	8005828 <_free_r+0x8c>
 80057a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a8:	1f0c      	subs	r4, r1, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bfb8      	it	lt
 80057ae:	18e4      	addlt	r4, r4, r3
 80057b0:	f7ff fd52 	bl	8005258 <__malloc_lock>
 80057b4:	4a1d      	ldr	r2, [pc, #116]	@ (800582c <_free_r+0x90>)
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	b933      	cbnz	r3, 80057c8 <_free_r+0x2c>
 80057ba:	6063      	str	r3, [r4, #4]
 80057bc:	6014      	str	r4, [r2, #0]
 80057be:	4628      	mov	r0, r5
 80057c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057c4:	f7ff bd4e 	b.w	8005264 <__malloc_unlock>
 80057c8:	42a3      	cmp	r3, r4
 80057ca:	d908      	bls.n	80057de <_free_r+0x42>
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	1821      	adds	r1, r4, r0
 80057d0:	428b      	cmp	r3, r1
 80057d2:	bf01      	itttt	eq
 80057d4:	6819      	ldreq	r1, [r3, #0]
 80057d6:	685b      	ldreq	r3, [r3, #4]
 80057d8:	1809      	addeq	r1, r1, r0
 80057da:	6021      	streq	r1, [r4, #0]
 80057dc:	e7ed      	b.n	80057ba <_free_r+0x1e>
 80057de:	461a      	mov	r2, r3
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	b10b      	cbz	r3, 80057e8 <_free_r+0x4c>
 80057e4:	42a3      	cmp	r3, r4
 80057e6:	d9fa      	bls.n	80057de <_free_r+0x42>
 80057e8:	6811      	ldr	r1, [r2, #0]
 80057ea:	1850      	adds	r0, r2, r1
 80057ec:	42a0      	cmp	r0, r4
 80057ee:	d10b      	bne.n	8005808 <_free_r+0x6c>
 80057f0:	6820      	ldr	r0, [r4, #0]
 80057f2:	4401      	add	r1, r0
 80057f4:	1850      	adds	r0, r2, r1
 80057f6:	4283      	cmp	r3, r0
 80057f8:	6011      	str	r1, [r2, #0]
 80057fa:	d1e0      	bne.n	80057be <_free_r+0x22>
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	6053      	str	r3, [r2, #4]
 8005802:	4408      	add	r0, r1
 8005804:	6010      	str	r0, [r2, #0]
 8005806:	e7da      	b.n	80057be <_free_r+0x22>
 8005808:	d902      	bls.n	8005810 <_free_r+0x74>
 800580a:	230c      	movs	r3, #12
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	e7d6      	b.n	80057be <_free_r+0x22>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	1821      	adds	r1, r4, r0
 8005814:	428b      	cmp	r3, r1
 8005816:	bf04      	itt	eq
 8005818:	6819      	ldreq	r1, [r3, #0]
 800581a:	685b      	ldreq	r3, [r3, #4]
 800581c:	6063      	str	r3, [r4, #4]
 800581e:	bf04      	itt	eq
 8005820:	1809      	addeq	r1, r1, r0
 8005822:	6021      	streq	r1, [r4, #0]
 8005824:	6054      	str	r4, [r2, #4]
 8005826:	e7ca      	b.n	80057be <_free_r+0x22>
 8005828:	bd38      	pop	{r3, r4, r5, pc}
 800582a:	bf00      	nop
 800582c:	20000258 	.word	0x20000258

08005830 <__sfputc_r>:
 8005830:	6893      	ldr	r3, [r2, #8]
 8005832:	3b01      	subs	r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	b410      	push	{r4}
 8005838:	6093      	str	r3, [r2, #8]
 800583a:	da08      	bge.n	800584e <__sfputc_r+0x1e>
 800583c:	6994      	ldr	r4, [r2, #24]
 800583e:	42a3      	cmp	r3, r4
 8005840:	db01      	blt.n	8005846 <__sfputc_r+0x16>
 8005842:	290a      	cmp	r1, #10
 8005844:	d103      	bne.n	800584e <__sfputc_r+0x1e>
 8005846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800584a:	f7ff be86 	b.w	800555a <__swbuf_r>
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	1c58      	adds	r0, r3, #1
 8005852:	6010      	str	r0, [r2, #0]
 8005854:	7019      	strb	r1, [r3, #0]
 8005856:	4608      	mov	r0, r1
 8005858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800585c:	4770      	bx	lr

0800585e <__sfputs_r>:
 800585e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005860:	4606      	mov	r6, r0
 8005862:	460f      	mov	r7, r1
 8005864:	4614      	mov	r4, r2
 8005866:	18d5      	adds	r5, r2, r3
 8005868:	42ac      	cmp	r4, r5
 800586a:	d101      	bne.n	8005870 <__sfputs_r+0x12>
 800586c:	2000      	movs	r0, #0
 800586e:	e007      	b.n	8005880 <__sfputs_r+0x22>
 8005870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005874:	463a      	mov	r2, r7
 8005876:	4630      	mov	r0, r6
 8005878:	f7ff ffda 	bl	8005830 <__sfputc_r>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d1f3      	bne.n	8005868 <__sfputs_r+0xa>
 8005880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005884 <_vfiprintf_r>:
 8005884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005888:	460d      	mov	r5, r1
 800588a:	b09d      	sub	sp, #116	@ 0x74
 800588c:	4614      	mov	r4, r2
 800588e:	4698      	mov	r8, r3
 8005890:	4606      	mov	r6, r0
 8005892:	b118      	cbz	r0, 800589c <_vfiprintf_r+0x18>
 8005894:	6a03      	ldr	r3, [r0, #32]
 8005896:	b90b      	cbnz	r3, 800589c <_vfiprintf_r+0x18>
 8005898:	f7ff fd76 	bl	8005388 <__sinit>
 800589c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800589e:	07d9      	lsls	r1, r3, #31
 80058a0:	d405      	bmi.n	80058ae <_vfiprintf_r+0x2a>
 80058a2:	89ab      	ldrh	r3, [r5, #12]
 80058a4:	059a      	lsls	r2, r3, #22
 80058a6:	d402      	bmi.n	80058ae <_vfiprintf_r+0x2a>
 80058a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058aa:	f7ff ff74 	bl	8005796 <__retarget_lock_acquire_recursive>
 80058ae:	89ab      	ldrh	r3, [r5, #12]
 80058b0:	071b      	lsls	r3, r3, #28
 80058b2:	d501      	bpl.n	80058b8 <_vfiprintf_r+0x34>
 80058b4:	692b      	ldr	r3, [r5, #16]
 80058b6:	b99b      	cbnz	r3, 80058e0 <_vfiprintf_r+0x5c>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff fe8c 	bl	80055d8 <__swsetup_r>
 80058c0:	b170      	cbz	r0, 80058e0 <_vfiprintf_r+0x5c>
 80058c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058c4:	07dc      	lsls	r4, r3, #31
 80058c6:	d504      	bpl.n	80058d2 <_vfiprintf_r+0x4e>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	b01d      	add	sp, #116	@ 0x74
 80058ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d2:	89ab      	ldrh	r3, [r5, #12]
 80058d4:	0598      	lsls	r0, r3, #22
 80058d6:	d4f7      	bmi.n	80058c8 <_vfiprintf_r+0x44>
 80058d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058da:	f7ff ff5d 	bl	8005798 <__retarget_lock_release_recursive>
 80058de:	e7f3      	b.n	80058c8 <_vfiprintf_r+0x44>
 80058e0:	2300      	movs	r3, #0
 80058e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80058e4:	2320      	movs	r3, #32
 80058e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ee:	2330      	movs	r3, #48	@ 0x30
 80058f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005aa0 <_vfiprintf_r+0x21c>
 80058f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058f8:	f04f 0901 	mov.w	r9, #1
 80058fc:	4623      	mov	r3, r4
 80058fe:	469a      	mov	sl, r3
 8005900:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005904:	b10a      	cbz	r2, 800590a <_vfiprintf_r+0x86>
 8005906:	2a25      	cmp	r2, #37	@ 0x25
 8005908:	d1f9      	bne.n	80058fe <_vfiprintf_r+0x7a>
 800590a:	ebba 0b04 	subs.w	fp, sl, r4
 800590e:	d00b      	beq.n	8005928 <_vfiprintf_r+0xa4>
 8005910:	465b      	mov	r3, fp
 8005912:	4622      	mov	r2, r4
 8005914:	4629      	mov	r1, r5
 8005916:	4630      	mov	r0, r6
 8005918:	f7ff ffa1 	bl	800585e <__sfputs_r>
 800591c:	3001      	adds	r0, #1
 800591e:	f000 80a7 	beq.w	8005a70 <_vfiprintf_r+0x1ec>
 8005922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005924:	445a      	add	r2, fp
 8005926:	9209      	str	r2, [sp, #36]	@ 0x24
 8005928:	f89a 3000 	ldrb.w	r3, [sl]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 809f 	beq.w	8005a70 <_vfiprintf_r+0x1ec>
 8005932:	2300      	movs	r3, #0
 8005934:	f04f 32ff 	mov.w	r2, #4294967295
 8005938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800593c:	f10a 0a01 	add.w	sl, sl, #1
 8005940:	9304      	str	r3, [sp, #16]
 8005942:	9307      	str	r3, [sp, #28]
 8005944:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005948:	931a      	str	r3, [sp, #104]	@ 0x68
 800594a:	4654      	mov	r4, sl
 800594c:	2205      	movs	r2, #5
 800594e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005952:	4853      	ldr	r0, [pc, #332]	@ (8005aa0 <_vfiprintf_r+0x21c>)
 8005954:	f7fa fc64 	bl	8000220 <memchr>
 8005958:	9a04      	ldr	r2, [sp, #16]
 800595a:	b9d8      	cbnz	r0, 8005994 <_vfiprintf_r+0x110>
 800595c:	06d1      	lsls	r1, r2, #27
 800595e:	bf44      	itt	mi
 8005960:	2320      	movmi	r3, #32
 8005962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005966:	0713      	lsls	r3, r2, #28
 8005968:	bf44      	itt	mi
 800596a:	232b      	movmi	r3, #43	@ 0x2b
 800596c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005970:	f89a 3000 	ldrb.w	r3, [sl]
 8005974:	2b2a      	cmp	r3, #42	@ 0x2a
 8005976:	d015      	beq.n	80059a4 <_vfiprintf_r+0x120>
 8005978:	9a07      	ldr	r2, [sp, #28]
 800597a:	4654      	mov	r4, sl
 800597c:	2000      	movs	r0, #0
 800597e:	f04f 0c0a 	mov.w	ip, #10
 8005982:	4621      	mov	r1, r4
 8005984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005988:	3b30      	subs	r3, #48	@ 0x30
 800598a:	2b09      	cmp	r3, #9
 800598c:	d94b      	bls.n	8005a26 <_vfiprintf_r+0x1a2>
 800598e:	b1b0      	cbz	r0, 80059be <_vfiprintf_r+0x13a>
 8005990:	9207      	str	r2, [sp, #28]
 8005992:	e014      	b.n	80059be <_vfiprintf_r+0x13a>
 8005994:	eba0 0308 	sub.w	r3, r0, r8
 8005998:	fa09 f303 	lsl.w	r3, r9, r3
 800599c:	4313      	orrs	r3, r2
 800599e:	9304      	str	r3, [sp, #16]
 80059a0:	46a2      	mov	sl, r4
 80059a2:	e7d2      	b.n	800594a <_vfiprintf_r+0xc6>
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	1d19      	adds	r1, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	9103      	str	r1, [sp, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bfbb      	ittet	lt
 80059b0:	425b      	neglt	r3, r3
 80059b2:	f042 0202 	orrlt.w	r2, r2, #2
 80059b6:	9307      	strge	r3, [sp, #28]
 80059b8:	9307      	strlt	r3, [sp, #28]
 80059ba:	bfb8      	it	lt
 80059bc:	9204      	strlt	r2, [sp, #16]
 80059be:	7823      	ldrb	r3, [r4, #0]
 80059c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80059c2:	d10a      	bne.n	80059da <_vfiprintf_r+0x156>
 80059c4:	7863      	ldrb	r3, [r4, #1]
 80059c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80059c8:	d132      	bne.n	8005a30 <_vfiprintf_r+0x1ac>
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	1d1a      	adds	r2, r3, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	9203      	str	r2, [sp, #12]
 80059d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059d6:	3402      	adds	r4, #2
 80059d8:	9305      	str	r3, [sp, #20]
 80059da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ab0 <_vfiprintf_r+0x22c>
 80059de:	7821      	ldrb	r1, [r4, #0]
 80059e0:	2203      	movs	r2, #3
 80059e2:	4650      	mov	r0, sl
 80059e4:	f7fa fc1c 	bl	8000220 <memchr>
 80059e8:	b138      	cbz	r0, 80059fa <_vfiprintf_r+0x176>
 80059ea:	9b04      	ldr	r3, [sp, #16]
 80059ec:	eba0 000a 	sub.w	r0, r0, sl
 80059f0:	2240      	movs	r2, #64	@ 0x40
 80059f2:	4082      	lsls	r2, r0
 80059f4:	4313      	orrs	r3, r2
 80059f6:	3401      	adds	r4, #1
 80059f8:	9304      	str	r3, [sp, #16]
 80059fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059fe:	4829      	ldr	r0, [pc, #164]	@ (8005aa4 <_vfiprintf_r+0x220>)
 8005a00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a04:	2206      	movs	r2, #6
 8005a06:	f7fa fc0b 	bl	8000220 <memchr>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d03f      	beq.n	8005a8e <_vfiprintf_r+0x20a>
 8005a0e:	4b26      	ldr	r3, [pc, #152]	@ (8005aa8 <_vfiprintf_r+0x224>)
 8005a10:	bb1b      	cbnz	r3, 8005a5a <_vfiprintf_r+0x1d6>
 8005a12:	9b03      	ldr	r3, [sp, #12]
 8005a14:	3307      	adds	r3, #7
 8005a16:	f023 0307 	bic.w	r3, r3, #7
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	9303      	str	r3, [sp, #12]
 8005a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a20:	443b      	add	r3, r7
 8005a22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a24:	e76a      	b.n	80058fc <_vfiprintf_r+0x78>
 8005a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	e7a8      	b.n	8005982 <_vfiprintf_r+0xfe>
 8005a30:	2300      	movs	r3, #0
 8005a32:	3401      	adds	r4, #1
 8005a34:	9305      	str	r3, [sp, #20]
 8005a36:	4619      	mov	r1, r3
 8005a38:	f04f 0c0a 	mov.w	ip, #10
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a42:	3a30      	subs	r2, #48	@ 0x30
 8005a44:	2a09      	cmp	r2, #9
 8005a46:	d903      	bls.n	8005a50 <_vfiprintf_r+0x1cc>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0c6      	beq.n	80059da <_vfiprintf_r+0x156>
 8005a4c:	9105      	str	r1, [sp, #20]
 8005a4e:	e7c4      	b.n	80059da <_vfiprintf_r+0x156>
 8005a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a54:	4604      	mov	r4, r0
 8005a56:	2301      	movs	r3, #1
 8005a58:	e7f0      	b.n	8005a3c <_vfiprintf_r+0x1b8>
 8005a5a:	ab03      	add	r3, sp, #12
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	462a      	mov	r2, r5
 8005a60:	4b12      	ldr	r3, [pc, #72]	@ (8005aac <_vfiprintf_r+0x228>)
 8005a62:	a904      	add	r1, sp, #16
 8005a64:	4630      	mov	r0, r6
 8005a66:	f3af 8000 	nop.w
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	1c78      	adds	r0, r7, #1
 8005a6e:	d1d6      	bne.n	8005a1e <_vfiprintf_r+0x19a>
 8005a70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a72:	07d9      	lsls	r1, r3, #31
 8005a74:	d405      	bmi.n	8005a82 <_vfiprintf_r+0x1fe>
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	059a      	lsls	r2, r3, #22
 8005a7a:	d402      	bmi.n	8005a82 <_vfiprintf_r+0x1fe>
 8005a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a7e:	f7ff fe8b 	bl	8005798 <__retarget_lock_release_recursive>
 8005a82:	89ab      	ldrh	r3, [r5, #12]
 8005a84:	065b      	lsls	r3, r3, #25
 8005a86:	f53f af1f 	bmi.w	80058c8 <_vfiprintf_r+0x44>
 8005a8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a8c:	e71e      	b.n	80058cc <_vfiprintf_r+0x48>
 8005a8e:	ab03      	add	r3, sp, #12
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	462a      	mov	r2, r5
 8005a94:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <_vfiprintf_r+0x228>)
 8005a96:	a904      	add	r1, sp, #16
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f000 f879 	bl	8005b90 <_printf_i>
 8005a9e:	e7e4      	b.n	8005a6a <_vfiprintf_r+0x1e6>
 8005aa0:	08008a74 	.word	0x08008a74
 8005aa4:	08008a7e 	.word	0x08008a7e
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	0800585f 	.word	0x0800585f
 8005ab0:	08008a7a 	.word	0x08008a7a

08005ab4 <_printf_common>:
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	4616      	mov	r6, r2
 8005aba:	4698      	mov	r8, r3
 8005abc:	688a      	ldr	r2, [r1, #8]
 8005abe:	690b      	ldr	r3, [r1, #16]
 8005ac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	bfb8      	it	lt
 8005ac8:	4613      	movlt	r3, r2
 8005aca:	6033      	str	r3, [r6, #0]
 8005acc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b10a      	cbz	r2, 8005ada <_printf_common+0x26>
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	6033      	str	r3, [r6, #0]
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	0699      	lsls	r1, r3, #26
 8005ade:	bf42      	ittt	mi
 8005ae0:	6833      	ldrmi	r3, [r6, #0]
 8005ae2:	3302      	addmi	r3, #2
 8005ae4:	6033      	strmi	r3, [r6, #0]
 8005ae6:	6825      	ldr	r5, [r4, #0]
 8005ae8:	f015 0506 	ands.w	r5, r5, #6
 8005aec:	d106      	bne.n	8005afc <_printf_common+0x48>
 8005aee:	f104 0a19 	add.w	sl, r4, #25
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	6832      	ldr	r2, [r6, #0]
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dc26      	bgt.n	8005b4a <_printf_common+0x96>
 8005afc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b00:	6822      	ldr	r2, [r4, #0]
 8005b02:	3b00      	subs	r3, #0
 8005b04:	bf18      	it	ne
 8005b06:	2301      	movne	r3, #1
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d42b      	bmi.n	8005b64 <_printf_common+0xb0>
 8005b0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b10:	4641      	mov	r1, r8
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c8      	blx	r9
 8005b16:	3001      	adds	r0, #1
 8005b18:	d01e      	beq.n	8005b58 <_printf_common+0xa4>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	6922      	ldr	r2, [r4, #16]
 8005b1e:	f003 0306 	and.w	r3, r3, #6
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	bf02      	ittt	eq
 8005b26:	68e5      	ldreq	r5, [r4, #12]
 8005b28:	6833      	ldreq	r3, [r6, #0]
 8005b2a:	1aed      	subeq	r5, r5, r3
 8005b2c:	68a3      	ldr	r3, [r4, #8]
 8005b2e:	bf0c      	ite	eq
 8005b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b34:	2500      	movne	r5, #0
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bfc4      	itt	gt
 8005b3a:	1a9b      	subgt	r3, r3, r2
 8005b3c:	18ed      	addgt	r5, r5, r3
 8005b3e:	2600      	movs	r6, #0
 8005b40:	341a      	adds	r4, #26
 8005b42:	42b5      	cmp	r5, r6
 8005b44:	d11a      	bne.n	8005b7c <_printf_common+0xc8>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e008      	b.n	8005b5c <_printf_common+0xa8>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	4641      	mov	r1, r8
 8005b50:	4638      	mov	r0, r7
 8005b52:	47c8      	blx	r9
 8005b54:	3001      	adds	r0, #1
 8005b56:	d103      	bne.n	8005b60 <_printf_common+0xac>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b60:	3501      	adds	r5, #1
 8005b62:	e7c6      	b.n	8005af2 <_printf_common+0x3e>
 8005b64:	18e1      	adds	r1, r4, r3
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	2030      	movs	r0, #48	@ 0x30
 8005b6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b6e:	4422      	add	r2, r4
 8005b70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b78:	3302      	adds	r3, #2
 8005b7a:	e7c7      	b.n	8005b0c <_printf_common+0x58>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4622      	mov	r2, r4
 8005b80:	4641      	mov	r1, r8
 8005b82:	4638      	mov	r0, r7
 8005b84:	47c8      	blx	r9
 8005b86:	3001      	adds	r0, #1
 8005b88:	d0e6      	beq.n	8005b58 <_printf_common+0xa4>
 8005b8a:	3601      	adds	r6, #1
 8005b8c:	e7d9      	b.n	8005b42 <_printf_common+0x8e>
	...

08005b90 <_printf_i>:
 8005b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	7e0f      	ldrb	r7, [r1, #24]
 8005b96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b98:	2f78      	cmp	r7, #120	@ 0x78
 8005b9a:	4691      	mov	r9, r2
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	469a      	mov	sl, r3
 8005ba2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ba6:	d807      	bhi.n	8005bb8 <_printf_i+0x28>
 8005ba8:	2f62      	cmp	r7, #98	@ 0x62
 8005baa:	d80a      	bhi.n	8005bc2 <_printf_i+0x32>
 8005bac:	2f00      	cmp	r7, #0
 8005bae:	f000 80d2 	beq.w	8005d56 <_printf_i+0x1c6>
 8005bb2:	2f58      	cmp	r7, #88	@ 0x58
 8005bb4:	f000 80b9 	beq.w	8005d2a <_printf_i+0x19a>
 8005bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005bc0:	e03a      	b.n	8005c38 <_printf_i+0xa8>
 8005bc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bc6:	2b15      	cmp	r3, #21
 8005bc8:	d8f6      	bhi.n	8005bb8 <_printf_i+0x28>
 8005bca:	a101      	add	r1, pc, #4	@ (adr r1, 8005bd0 <_printf_i+0x40>)
 8005bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bd0:	08005c29 	.word	0x08005c29
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005bb9 	.word	0x08005bb9
 8005bdc:	08005bb9 	.word	0x08005bb9
 8005be0:	08005bb9 	.word	0x08005bb9
 8005be4:	08005bb9 	.word	0x08005bb9
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005bb9 	.word	0x08005bb9
 8005bf0:	08005bb9 	.word	0x08005bb9
 8005bf4:	08005bb9 	.word	0x08005bb9
 8005bf8:	08005bb9 	.word	0x08005bb9
 8005bfc:	08005d3d 	.word	0x08005d3d
 8005c00:	08005c67 	.word	0x08005c67
 8005c04:	08005cf7 	.word	0x08005cf7
 8005c08:	08005bb9 	.word	0x08005bb9
 8005c0c:	08005bb9 	.word	0x08005bb9
 8005c10:	08005d5f 	.word	0x08005d5f
 8005c14:	08005bb9 	.word	0x08005bb9
 8005c18:	08005c67 	.word	0x08005c67
 8005c1c:	08005bb9 	.word	0x08005bb9
 8005c20:	08005bb9 	.word	0x08005bb9
 8005c24:	08005cff 	.word	0x08005cff
 8005c28:	6833      	ldr	r3, [r6, #0]
 8005c2a:	1d1a      	adds	r2, r3, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6032      	str	r2, [r6, #0]
 8005c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e09d      	b.n	8005d78 <_printf_i+0x1e8>
 8005c3c:	6833      	ldr	r3, [r6, #0]
 8005c3e:	6820      	ldr	r0, [r4, #0]
 8005c40:	1d19      	adds	r1, r3, #4
 8005c42:	6031      	str	r1, [r6, #0]
 8005c44:	0606      	lsls	r6, r0, #24
 8005c46:	d501      	bpl.n	8005c4c <_printf_i+0xbc>
 8005c48:	681d      	ldr	r5, [r3, #0]
 8005c4a:	e003      	b.n	8005c54 <_printf_i+0xc4>
 8005c4c:	0645      	lsls	r5, r0, #25
 8005c4e:	d5fb      	bpl.n	8005c48 <_printf_i+0xb8>
 8005c50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	da03      	bge.n	8005c60 <_printf_i+0xd0>
 8005c58:	232d      	movs	r3, #45	@ 0x2d
 8005c5a:	426d      	negs	r5, r5
 8005c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c60:	4859      	ldr	r0, [pc, #356]	@ (8005dc8 <_printf_i+0x238>)
 8005c62:	230a      	movs	r3, #10
 8005c64:	e011      	b.n	8005c8a <_printf_i+0xfa>
 8005c66:	6821      	ldr	r1, [r4, #0]
 8005c68:	6833      	ldr	r3, [r6, #0]
 8005c6a:	0608      	lsls	r0, r1, #24
 8005c6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c70:	d402      	bmi.n	8005c78 <_printf_i+0xe8>
 8005c72:	0649      	lsls	r1, r1, #25
 8005c74:	bf48      	it	mi
 8005c76:	b2ad      	uxthmi	r5, r5
 8005c78:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c7a:	4853      	ldr	r0, [pc, #332]	@ (8005dc8 <_printf_i+0x238>)
 8005c7c:	6033      	str	r3, [r6, #0]
 8005c7e:	bf14      	ite	ne
 8005c80:	230a      	movne	r3, #10
 8005c82:	2308      	moveq	r3, #8
 8005c84:	2100      	movs	r1, #0
 8005c86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c8a:	6866      	ldr	r6, [r4, #4]
 8005c8c:	60a6      	str	r6, [r4, #8]
 8005c8e:	2e00      	cmp	r6, #0
 8005c90:	bfa2      	ittt	ge
 8005c92:	6821      	ldrge	r1, [r4, #0]
 8005c94:	f021 0104 	bicge.w	r1, r1, #4
 8005c98:	6021      	strge	r1, [r4, #0]
 8005c9a:	b90d      	cbnz	r5, 8005ca0 <_printf_i+0x110>
 8005c9c:	2e00      	cmp	r6, #0
 8005c9e:	d04b      	beq.n	8005d38 <_printf_i+0x1a8>
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ca6:	fb03 5711 	mls	r7, r3, r1, r5
 8005caa:	5dc7      	ldrb	r7, [r0, r7]
 8005cac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cb0:	462f      	mov	r7, r5
 8005cb2:	42bb      	cmp	r3, r7
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	d9f4      	bls.n	8005ca2 <_printf_i+0x112>
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d10b      	bne.n	8005cd4 <_printf_i+0x144>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	07df      	lsls	r7, r3, #31
 8005cc0:	d508      	bpl.n	8005cd4 <_printf_i+0x144>
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	6861      	ldr	r1, [r4, #4]
 8005cc6:	4299      	cmp	r1, r3
 8005cc8:	bfde      	ittt	le
 8005cca:	2330      	movle	r3, #48	@ 0x30
 8005ccc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cd4:	1b92      	subs	r2, r2, r6
 8005cd6:	6122      	str	r2, [r4, #16]
 8005cd8:	f8cd a000 	str.w	sl, [sp]
 8005cdc:	464b      	mov	r3, r9
 8005cde:	aa03      	add	r2, sp, #12
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f7ff fee6 	bl	8005ab4 <_printf_common>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d14a      	bne.n	8005d82 <_printf_i+0x1f2>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	b004      	add	sp, #16
 8005cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	f043 0320 	orr.w	r3, r3, #32
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	4833      	ldr	r0, [pc, #204]	@ (8005dcc <_printf_i+0x23c>)
 8005d00:	2778      	movs	r7, #120	@ 0x78
 8005d02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	6831      	ldr	r1, [r6, #0]
 8005d0a:	061f      	lsls	r7, r3, #24
 8005d0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d10:	d402      	bmi.n	8005d18 <_printf_i+0x188>
 8005d12:	065f      	lsls	r7, r3, #25
 8005d14:	bf48      	it	mi
 8005d16:	b2ad      	uxthmi	r5, r5
 8005d18:	6031      	str	r1, [r6, #0]
 8005d1a:	07d9      	lsls	r1, r3, #31
 8005d1c:	bf44      	itt	mi
 8005d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d22:	6023      	strmi	r3, [r4, #0]
 8005d24:	b11d      	cbz	r5, 8005d2e <_printf_i+0x19e>
 8005d26:	2310      	movs	r3, #16
 8005d28:	e7ac      	b.n	8005c84 <_printf_i+0xf4>
 8005d2a:	4827      	ldr	r0, [pc, #156]	@ (8005dc8 <_printf_i+0x238>)
 8005d2c:	e7e9      	b.n	8005d02 <_printf_i+0x172>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	f023 0320 	bic.w	r3, r3, #32
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	e7f6      	b.n	8005d26 <_printf_i+0x196>
 8005d38:	4616      	mov	r6, r2
 8005d3a:	e7bd      	b.n	8005cb8 <_printf_i+0x128>
 8005d3c:	6833      	ldr	r3, [r6, #0]
 8005d3e:	6825      	ldr	r5, [r4, #0]
 8005d40:	6961      	ldr	r1, [r4, #20]
 8005d42:	1d18      	adds	r0, r3, #4
 8005d44:	6030      	str	r0, [r6, #0]
 8005d46:	062e      	lsls	r6, r5, #24
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	d501      	bpl.n	8005d50 <_printf_i+0x1c0>
 8005d4c:	6019      	str	r1, [r3, #0]
 8005d4e:	e002      	b.n	8005d56 <_printf_i+0x1c6>
 8005d50:	0668      	lsls	r0, r5, #25
 8005d52:	d5fb      	bpl.n	8005d4c <_printf_i+0x1bc>
 8005d54:	8019      	strh	r1, [r3, #0]
 8005d56:	2300      	movs	r3, #0
 8005d58:	6123      	str	r3, [r4, #16]
 8005d5a:	4616      	mov	r6, r2
 8005d5c:	e7bc      	b.n	8005cd8 <_printf_i+0x148>
 8005d5e:	6833      	ldr	r3, [r6, #0]
 8005d60:	1d1a      	adds	r2, r3, #4
 8005d62:	6032      	str	r2, [r6, #0]
 8005d64:	681e      	ldr	r6, [r3, #0]
 8005d66:	6862      	ldr	r2, [r4, #4]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7fa fa58 	bl	8000220 <memchr>
 8005d70:	b108      	cbz	r0, 8005d76 <_printf_i+0x1e6>
 8005d72:	1b80      	subs	r0, r0, r6
 8005d74:	6060      	str	r0, [r4, #4]
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	6123      	str	r3, [r4, #16]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d80:	e7aa      	b.n	8005cd8 <_printf_i+0x148>
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	4632      	mov	r2, r6
 8005d86:	4649      	mov	r1, r9
 8005d88:	4640      	mov	r0, r8
 8005d8a:	47d0      	blx	sl
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d0ad      	beq.n	8005cec <_printf_i+0x15c>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	079b      	lsls	r3, r3, #30
 8005d94:	d413      	bmi.n	8005dbe <_printf_i+0x22e>
 8005d96:	68e0      	ldr	r0, [r4, #12]
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	4298      	cmp	r0, r3
 8005d9c:	bfb8      	it	lt
 8005d9e:	4618      	movlt	r0, r3
 8005da0:	e7a6      	b.n	8005cf0 <_printf_i+0x160>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4632      	mov	r2, r6
 8005da6:	4649      	mov	r1, r9
 8005da8:	4640      	mov	r0, r8
 8005daa:	47d0      	blx	sl
 8005dac:	3001      	adds	r0, #1
 8005dae:	d09d      	beq.n	8005cec <_printf_i+0x15c>
 8005db0:	3501      	adds	r5, #1
 8005db2:	68e3      	ldr	r3, [r4, #12]
 8005db4:	9903      	ldr	r1, [sp, #12]
 8005db6:	1a5b      	subs	r3, r3, r1
 8005db8:	42ab      	cmp	r3, r5
 8005dba:	dcf2      	bgt.n	8005da2 <_printf_i+0x212>
 8005dbc:	e7eb      	b.n	8005d96 <_printf_i+0x206>
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	f104 0619 	add.w	r6, r4, #25
 8005dc4:	e7f5      	b.n	8005db2 <_printf_i+0x222>
 8005dc6:	bf00      	nop
 8005dc8:	08008a85 	.word	0x08008a85
 8005dcc:	08008a96 	.word	0x08008a96

08005dd0 <__sflush_r>:
 8005dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd8:	0716      	lsls	r6, r2, #28
 8005dda:	4605      	mov	r5, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	d454      	bmi.n	8005e8a <__sflush_r+0xba>
 8005de0:	684b      	ldr	r3, [r1, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	dc02      	bgt.n	8005dec <__sflush_r+0x1c>
 8005de6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dd48      	ble.n	8005e7e <__sflush_r+0xae>
 8005dec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dee:	2e00      	cmp	r6, #0
 8005df0:	d045      	beq.n	8005e7e <__sflush_r+0xae>
 8005df2:	2300      	movs	r3, #0
 8005df4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005df8:	682f      	ldr	r7, [r5, #0]
 8005dfa:	6a21      	ldr	r1, [r4, #32]
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	d030      	beq.n	8005e62 <__sflush_r+0x92>
 8005e00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	0759      	lsls	r1, r3, #29
 8005e06:	d505      	bpl.n	8005e14 <__sflush_r+0x44>
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e0e:	b10b      	cbz	r3, 8005e14 <__sflush_r+0x44>
 8005e10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e18:	6a21      	ldr	r1, [r4, #32]
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b0      	blx	r6
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	d106      	bne.n	8005e32 <__sflush_r+0x62>
 8005e24:	6829      	ldr	r1, [r5, #0]
 8005e26:	291d      	cmp	r1, #29
 8005e28:	d82b      	bhi.n	8005e82 <__sflush_r+0xb2>
 8005e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed4 <__sflush_r+0x104>)
 8005e2c:	410a      	asrs	r2, r1
 8005e2e:	07d6      	lsls	r6, r2, #31
 8005e30:	d427      	bmi.n	8005e82 <__sflush_r+0xb2>
 8005e32:	2200      	movs	r2, #0
 8005e34:	6062      	str	r2, [r4, #4]
 8005e36:	04d9      	lsls	r1, r3, #19
 8005e38:	6922      	ldr	r2, [r4, #16]
 8005e3a:	6022      	str	r2, [r4, #0]
 8005e3c:	d504      	bpl.n	8005e48 <__sflush_r+0x78>
 8005e3e:	1c42      	adds	r2, r0, #1
 8005e40:	d101      	bne.n	8005e46 <__sflush_r+0x76>
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	b903      	cbnz	r3, 8005e48 <__sflush_r+0x78>
 8005e46:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e4a:	602f      	str	r7, [r5, #0]
 8005e4c:	b1b9      	cbz	r1, 8005e7e <__sflush_r+0xae>
 8005e4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e52:	4299      	cmp	r1, r3
 8005e54:	d002      	beq.n	8005e5c <__sflush_r+0x8c>
 8005e56:	4628      	mov	r0, r5
 8005e58:	f7ff fca0 	bl	800579c <_free_r>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e60:	e00d      	b.n	8005e7e <__sflush_r+0xae>
 8005e62:	2301      	movs	r3, #1
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b0      	blx	r6
 8005e68:	4602      	mov	r2, r0
 8005e6a:	1c50      	adds	r0, r2, #1
 8005e6c:	d1c9      	bne.n	8005e02 <__sflush_r+0x32>
 8005e6e:	682b      	ldr	r3, [r5, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0c6      	beq.n	8005e02 <__sflush_r+0x32>
 8005e74:	2b1d      	cmp	r3, #29
 8005e76:	d001      	beq.n	8005e7c <__sflush_r+0xac>
 8005e78:	2b16      	cmp	r3, #22
 8005e7a:	d11e      	bne.n	8005eba <__sflush_r+0xea>
 8005e7c:	602f      	str	r7, [r5, #0]
 8005e7e:	2000      	movs	r0, #0
 8005e80:	e022      	b.n	8005ec8 <__sflush_r+0xf8>
 8005e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e86:	b21b      	sxth	r3, r3
 8005e88:	e01b      	b.n	8005ec2 <__sflush_r+0xf2>
 8005e8a:	690f      	ldr	r7, [r1, #16]
 8005e8c:	2f00      	cmp	r7, #0
 8005e8e:	d0f6      	beq.n	8005e7e <__sflush_r+0xae>
 8005e90:	0793      	lsls	r3, r2, #30
 8005e92:	680e      	ldr	r6, [r1, #0]
 8005e94:	bf08      	it	eq
 8005e96:	694b      	ldreq	r3, [r1, #20]
 8005e98:	600f      	str	r7, [r1, #0]
 8005e9a:	bf18      	it	ne
 8005e9c:	2300      	movne	r3, #0
 8005e9e:	eba6 0807 	sub.w	r8, r6, r7
 8005ea2:	608b      	str	r3, [r1, #8]
 8005ea4:	f1b8 0f00 	cmp.w	r8, #0
 8005ea8:	dde9      	ble.n	8005e7e <__sflush_r+0xae>
 8005eaa:	6a21      	ldr	r1, [r4, #32]
 8005eac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005eae:	4643      	mov	r3, r8
 8005eb0:	463a      	mov	r2, r7
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b0      	blx	r6
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	dc08      	bgt.n	8005ecc <__sflush_r+0xfc>
 8005eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ecc:	4407      	add	r7, r0
 8005ece:	eba8 0800 	sub.w	r8, r8, r0
 8005ed2:	e7e7      	b.n	8005ea4 <__sflush_r+0xd4>
 8005ed4:	dfbffffe 	.word	0xdfbffffe

08005ed8 <_fflush_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	690b      	ldr	r3, [r1, #16]
 8005edc:	4605      	mov	r5, r0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	b913      	cbnz	r3, 8005ee8 <_fflush_r+0x10>
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	b118      	cbz	r0, 8005ef2 <_fflush_r+0x1a>
 8005eea:	6a03      	ldr	r3, [r0, #32]
 8005eec:	b90b      	cbnz	r3, 8005ef2 <_fflush_r+0x1a>
 8005eee:	f7ff fa4b 	bl	8005388 <__sinit>
 8005ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f3      	beq.n	8005ee2 <_fflush_r+0xa>
 8005efa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005efc:	07d0      	lsls	r0, r2, #31
 8005efe:	d404      	bmi.n	8005f0a <_fflush_r+0x32>
 8005f00:	0599      	lsls	r1, r3, #22
 8005f02:	d402      	bmi.n	8005f0a <_fflush_r+0x32>
 8005f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f06:	f7ff fc46 	bl	8005796 <__retarget_lock_acquire_recursive>
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f7ff ff5f 	bl	8005dd0 <__sflush_r>
 8005f12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f14:	07da      	lsls	r2, r3, #31
 8005f16:	4605      	mov	r5, r0
 8005f18:	d4e4      	bmi.n	8005ee4 <_fflush_r+0xc>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	059b      	lsls	r3, r3, #22
 8005f1e:	d4e1      	bmi.n	8005ee4 <_fflush_r+0xc>
 8005f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f22:	f7ff fc39 	bl	8005798 <__retarget_lock_release_recursive>
 8005f26:	e7dd      	b.n	8005ee4 <_fflush_r+0xc>

08005f28 <__swhatbuf_r>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f30:	2900      	cmp	r1, #0
 8005f32:	b096      	sub	sp, #88	@ 0x58
 8005f34:	4615      	mov	r5, r2
 8005f36:	461e      	mov	r6, r3
 8005f38:	da0d      	bge.n	8005f56 <__swhatbuf_r+0x2e>
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f40:	f04f 0100 	mov.w	r1, #0
 8005f44:	bf14      	ite	ne
 8005f46:	2340      	movne	r3, #64	@ 0x40
 8005f48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	6031      	str	r1, [r6, #0]
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	b016      	add	sp, #88	@ 0x58
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	466a      	mov	r2, sp
 8005f58:	f000 f848 	bl	8005fec <_fstat_r>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	dbec      	blt.n	8005f3a <__swhatbuf_r+0x12>
 8005f60:	9901      	ldr	r1, [sp, #4]
 8005f62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f6a:	4259      	negs	r1, r3
 8005f6c:	4159      	adcs	r1, r3
 8005f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f72:	e7eb      	b.n	8005f4c <__swhatbuf_r+0x24>

08005f74 <__smakebuf_r>:
 8005f74:	898b      	ldrh	r3, [r1, #12]
 8005f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f78:	079d      	lsls	r5, r3, #30
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	d507      	bpl.n	8005f90 <__smakebuf_r+0x1c>
 8005f80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	2301      	movs	r3, #1
 8005f8a:	6163      	str	r3, [r4, #20]
 8005f8c:	b003      	add	sp, #12
 8005f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f90:	ab01      	add	r3, sp, #4
 8005f92:	466a      	mov	r2, sp
 8005f94:	f7ff ffc8 	bl	8005f28 <__swhatbuf_r>
 8005f98:	9f00      	ldr	r7, [sp, #0]
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7ff f8da 	bl	8005158 <_malloc_r>
 8005fa4:	b948      	cbnz	r0, 8005fba <__smakebuf_r+0x46>
 8005fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005faa:	059a      	lsls	r2, r3, #22
 8005fac:	d4ee      	bmi.n	8005f8c <__smakebuf_r+0x18>
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	f043 0302 	orr.w	r3, r3, #2
 8005fb6:	81a3      	strh	r3, [r4, #12]
 8005fb8:	e7e2      	b.n	8005f80 <__smakebuf_r+0xc>
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	6020      	str	r0, [r4, #0]
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	9b01      	ldr	r3, [sp, #4]
 8005fc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005fca:	b15b      	cbz	r3, 8005fe4 <__smakebuf_r+0x70>
 8005fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f81d 	bl	8006010 <_isatty_r>
 8005fd6:	b128      	cbz	r0, 8005fe4 <__smakebuf_r+0x70>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	431d      	orrs	r5, r3
 8005fe8:	81a5      	strh	r5, [r4, #12]
 8005fea:	e7cf      	b.n	8005f8c <__smakebuf_r+0x18>

08005fec <_fstat_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d07      	ldr	r5, [pc, #28]	@ (800600c <_fstat_r+0x20>)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	f7fa ff43 	bl	8000e84 <_fstat>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d102      	bne.n	8006008 <_fstat_r+0x1c>
 8006002:	682b      	ldr	r3, [r5, #0]
 8006004:	b103      	cbz	r3, 8006008 <_fstat_r+0x1c>
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	bd38      	pop	{r3, r4, r5, pc}
 800600a:	bf00      	nop
 800600c:	20000398 	.word	0x20000398

08006010 <_isatty_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d06      	ldr	r5, [pc, #24]	@ (800602c <_isatty_r+0x1c>)
 8006014:	2300      	movs	r3, #0
 8006016:	4604      	mov	r4, r0
 8006018:	4608      	mov	r0, r1
 800601a:	602b      	str	r3, [r5, #0]
 800601c:	f7fa ff42 	bl	8000ea4 <_isatty>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d102      	bne.n	800602a <_isatty_r+0x1a>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b103      	cbz	r3, 800602a <_isatty_r+0x1a>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	20000398 	.word	0x20000398

08006030 <_init>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr

0800603c <_fini>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	bf00      	nop
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr
